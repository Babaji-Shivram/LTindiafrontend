using System;
using System.Collections.Generic;
using ERP.BuildingBlocks.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace ERP.BuildingBlocks.Data.Context;

public partial class ImportUatDbContext : DbContext
{
    public ImportUatDbContext()
    {
    }

    public ImportUatDbContext(DbContextOptions<ImportUatDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Abc> Abcs { get; set; }

    public virtual DbSet<AcAccountCodeM> AcAccountCodeMs { get; set; }

    public virtual DbSet<AcApibankAccount> AcApibankAccounts { get; set; }

    public virtual DbSet<AcApibankLogin> AcApibankLogins { get; set; }

    public virtual DbSet<AcApibankStatementLog> AcApibankStatementLogs { get; set; }

    public virtual DbSet<AcApibankStatus> AcApibankStatuses { get; set; }

    public virtual DbSet<AcApibankTransaction> AcApibankTransactions { get; set; }

    public virtual DbSet<AcApibankTransactionDel> AcApibankTransactionDels { get; set; }

    public virtual DbSet<AcApibankTransactionError> AcApibankTransactionErrors { get; set; }

    public virtual DbSet<AcApibankTransactionShadow> AcApibankTransactionShadows { get; set; }

    public virtual DbSet<AcApiglobalId> AcApiglobalIds { get; set; }

    public virtual DbSet<AcBankBookM> AcBankBookMs { get; set; }

    public virtual DbSet<AcBankChequeJobNo> AcBankChequeJobNos { get; set; }

    public virtual DbSet<AcBankChequeM> AcBankChequeMs { get; set; }

    public virtual DbSet<AcCashBookM> AcCashBookMs { get; set; }

    public virtual DbSet<AcConsolidateJob> AcConsolidateJobs { get; set; }

    public virtual DbSet<AcExpenseDocDetail> AcExpenseDocDetails { get; set; }

    public virtual DbSet<AcExpenseStatusM> AcExpenseStatusMs { get; set; }

    public virtual DbSet<AcExpenseTypeM> AcExpenseTypeMs { get; set; }

    public virtual DbSet<AcFachequeDetail> AcFachequeDetails { get; set; }

    public virtual DbSet<AcFachequeIssue> AcFachequeIssues { get; set; }

    public virtual DbSet<AcFaexpenseBooking> AcFaexpenseBookings { get; set; }

    public virtual DbSet<AcFaexpenseBookingAg> AcFaexpenseBookingAgs { get; set; }

    public virtual DbSet<AcFaexpenseBookingRim> AcFaexpenseBookingRims { get; set; }

    public virtual DbSet<AcInvoiceLedgerDetail> AcInvoiceLedgerDetails { get; set; }

    public virtual DbSet<AcMemoStatusHistory> AcMemoStatusHistories { get; set; }

    public virtual DbSet<AcPaymentDetail> AcPaymentDetails { get; set; }

    public virtual DbSet<AcPaymentDetail1> AcPaymentDetails1 { get; set; }

    public virtual DbSet<AcPaymentDetailShadow> AcPaymentDetailShadows { get; set; }

    public virtual DbSet<AcPaymentExpense> AcPaymentExpenses { get; set; }

    public virtual DbSet<AcPaymentItem> AcPaymentItems { get; set; }

    public virtual DbSet<AcPaymentMemo> AcPaymentMemos { get; set; }

    public virtual DbSet<AcPaymentMemoShadow> AcPaymentMemoShadows { get; set; }

    public virtual DbSet<AcPaymentRequest> AcPaymentRequests { get; set; }

    public virtual DbSet<AcPaymentRequestShadow> AcPaymentRequestShadows { get; set; }

    public virtual DbSet<AcPaymentStatus> AcPaymentStatuses { get; set; }

    public virtual DbSet<AcPaymentTd> AcPaymentTds { get; set; }

    public virtual DbSet<AcPaymentTdsShadow> AcPaymentTdsShadows { get; set; }

    public virtual DbSet<AcPaymentTypeM> AcPaymentTypeMs { get; set; }

    public virtual DbSet<AcRequestTypeM> AcRequestTypeMs { get; set; }

    public virtual DbSet<AdBilledJob> AdBilledJobs { get; set; }

    public virtual DbSet<AdJobDetail> AdJobDetails { get; set; }

    public virtual DbSet<AdJobExpenseDetail> AdJobExpenseDetails { get; set; }

    public virtual DbSet<AdmExpenseDetail> AdmExpenseDetails { get; set; }

    public virtual DbSet<AdmExpenseM> AdmExpenseMs { get; set; }

    public virtual DbSet<AdmVoucherDetail> AdmVoucherDetails { get; set; }

    public virtual DbSet<AdmVoucherDoc> AdmVoucherDocs { get; set; }

    public virtual DbSet<AdmVoucherHistory> AdmVoucherHistories { get; set; }

    public virtual DbSet<AdmVoucherItem> AdmVoucherItems { get; set; }

    public virtual DbSet<AdmVoucherPayment> AdmVoucherPayments { get; set; }

    public virtual DbSet<AdmVoucherTd> AdmVoucherTds { get; set; }

    public virtual DbSet<ApiDocument> ApiDocuments { get; set; }

    public virtual DbSet<AppNotificationLog> AppNotificationLogs { get; set; }

    public virtual DbSet<AppStatus> AppStatuses { get; set; }

    public virtual DbSet<AppUserDeviceM> AppUserDeviceMs { get; set; }

    public virtual DbSet<BjvAutoExpensePost> BjvAutoExpensePosts { get; set; }

    public virtual DbSet<BjvAutoInvoicePost> BjvAutoInvoicePosts { get; set; }

    public virtual DbSet<BjvAutoLabourExpPost> BjvAutoLabourExpPosts { get; set; }

    public virtual DbSet<BjvAutoTransportPost> BjvAutoTransportPosts { get; set; }

    public virtual DbSet<BjvBankM> BjvBankMs { get; set; }

    public virtual DbSet<BjvCurrentJob> BjvCurrentJobs { get; set; }

    public virtual DbSet<BjvDraftFinalDetail> BjvDraftFinalDetails { get; set; }

    public virtual DbSet<BjvDraftFinalDetailsShadow> BjvDraftFinalDetailsShadows { get; set; }

    public virtual DbSet<BjvExpenseDetail> BjvExpenseDetails { get; set; }

    public virtual DbSet<BjvJobAmount> BjvJobAmounts { get; set; }

    public virtual DbSet<BjvJobStatus> BjvJobStatuses { get; set; }

    public virtual DbSet<BjvJobStatusShadow> BjvJobStatusShadows { get; set; }

    public virtual DbSet<BjvLedgerCodeM> BjvLedgerCodeMs { get; set; }

    public virtual DbSet<BjvMasterInvoice> BjvMasterInvoices { get; set; }

    public virtual DbSet<BjvPostingFailed> BjvPostingFaileds { get; set; }

    public virtual DbSet<BjvProfit21022025> BjvProfit21022025s { get; set; }

    public virtual DbSet<BjvTempAutoInvoicePost> BjvTempAutoInvoicePosts { get; set; }

    public virtual DbSet<BjvVendorBankDetail> BjvVendorBankDetails { get; set; }

    public virtual DbSet<BjvVendorBankDetailDel> BjvVendorBankDetailDels { get; set; }

    public virtual DbSet<BjvVendorBankDetailShadow> BjvVendorBankDetailShadows { get; set; }

    public virtual DbSet<BjvVendorEmail> BjvVendorEmails { get; set; }

    public virtual DbSet<BjvVendorM> BjvVendorMs { get; set; }

    public virtual DbSet<BjvVendorMsShadow> BjvVendorMsShadows { get; set; }

    public virtual DbSet<Bjvinvdet> Bjvinvdets { get; set; }

    public virtual DbSet<BsActivityHistoryStatus> BsActivityHistoryStatuses { get; set; }

    public virtual DbSet<BsAdhocReportCondition> BsAdhocReportConditions { get; set; }

    public virtual DbSet<BsAdhocReportDetail> BsAdhocReportDetails { get; set; }

    public virtual DbSet<BsAdhocReportM> BsAdhocReportMs { get; set; }

    public virtual DbSet<BsAppAlert> BsAppAlerts { get; set; }

    public virtual DbSet<BsAppNotifyM> BsAppNotifyMs { get; set; }

    public virtual DbSet<BsAppRegister> BsAppRegisters { get; set; }

    public virtual DbSet<BsAppUserAlibaba> BsAppUserAlibabas { get; set; }

    public virtual DbSet<BsAutoAirBanglRule> BsAutoAirBanglRules { get; set; }

    public virtual DbSet<BsAutoAirBanglRuleShadow> BsAutoAirBanglRuleShadows { get; set; }

    public virtual DbSet<BsAutoAirBlabrRule> BsAutoAirBlabrRules { get; set; }

    public virtual DbSet<BsAutoAirChennaiRule> BsAutoAirChennaiRules { get; set; }

    public virtual DbSet<BsAutoAirExpenseRule> BsAutoAirExpenseRules { get; set; }

    public virtual DbSet<BsAutoAirExpenseRule20240810> BsAutoAirExpenseRule20240810s { get; set; }

    public virtual DbSet<BsAutoAirExpenseRuleShadow> BsAutoAirExpenseRuleShadows { get; set; }

    public virtual DbSet<BsAutoAirHyderRule> BsAutoAirHyderRules { get; set; }

    public virtual DbSet<BsAutoAirKolkRule> BsAutoAirKolkRules { get; set; }

    public virtual DbSet<BsAutoJobAexpense> BsAutoJobAexpenses { get; set; }

    public virtual DbSet<BsAutoJobAirBangl> BsAutoJobAirBangls { get; set; }

    public virtual DbSet<BsAutoJobAirBlabr> BsAutoJobAirBlabrs { get; set; }

    public virtual DbSet<BsAutoJobAirChennai> BsAutoJobAirChennais { get; set; }

    public virtual DbSet<BsAutoJobAirExpense> BsAutoJobAirExpenses { get; set; }

    public virtual DbSet<BsAutoJobAirHyder> BsAutoJobAirHyders { get; set; }

    public virtual DbSet<BsAutoJobAirKolk> BsAutoJobAirKolks { get; set; }

    public virtual DbSet<BsAutoJobSeaAhmed> BsAutoJobSeaAhmeds { get; set; }

    public virtual DbSet<BsAutoJobSeaAnklesh> BsAutoJobSeaAnkleshes { get; set; }

    public virtual DbSet<BsAutoJobSeaBangalore> BsAutoJobSeaBangalores { get; set; }

    public virtual DbSet<BsAutoJobSeaBangaloreTemp> BsAutoJobSeaBangaloreTemps { get; set; }

    public virtual DbSet<BsAutoJobSeaBlabr> BsAutoJobSeaBlabrs { get; set; }

    public virtual DbSet<BsAutoJobSeaChennai> BsAutoJobSeaChennais { get; set; }

    public virtual DbSet<BsAutoJobSeaDelhi> BsAutoJobSeaDelhis { get; set; }

    public virtual DbSet<BsAutoJobSeaExpense> BsAutoJobSeaExpenses { get; set; }

    public virtual DbSet<BsAutoJobSeaExpenseShadow> BsAutoJobSeaExpenseShadows { get; set; }

    public virtual DbSet<BsAutoJobSeaHyder> BsAutoJobSeaHyders { get; set; }

    public virtual DbSet<BsAutoJobSeaJaipur> BsAutoJobSeaJaipurs { get; set; }

    public virtual DbSet<BsAutoJobSeaKolk> BsAutoJobSeaKolks { get; set; }

    public virtual DbSet<BsAutoJobSeaKolkShadow> BsAutoJobSeaKolkShadows { get; set; }

    public virtual DbSet<BsAutoJobSeaMundra> BsAutoJobSeaMundras { get; set; }

    public virtual DbSet<BsAutoJobSeaNagpur> BsAutoJobSeaNagpurs { get; set; }

    public virtual DbSet<BsAutoJobSeaPipavav> BsAutoJobSeaPipavavs { get; set; }

    public virtual DbSet<BsAutoJobSeaPunjab> BsAutoJobSeaPunjabs { get; set; }

    public virtual DbSet<BsAutoJobSeaVadodra> BsAutoJobSeaVadodras { get; set; }

    public virtual DbSet<BsAutoJobSeaVizag> BsAutoJobSeaVizags { get; set; }

    public virtual DbSet<BsAutoSeaAhmedRule> BsAutoSeaAhmedRules { get; set; }

    public virtual DbSet<BsAutoSeaAnkleshRule> BsAutoSeaAnkleshRules { get; set; }

    public virtual DbSet<BsAutoSeaBangaloreRule> BsAutoSeaBangaloreRules { get; set; }

    public virtual DbSet<BsAutoSeaBangaloreRuleShadow> BsAutoSeaBangaloreRuleShadows { get; set; }

    public virtual DbSet<BsAutoSeaBlabrRule> BsAutoSeaBlabrRules { get; set; }

    public virtual DbSet<BsAutoSeaChennaiRule> BsAutoSeaChennaiRules { get; set; }

    public virtual DbSet<BsAutoSeaChennaiRuleShadow> BsAutoSeaChennaiRuleShadows { get; set; }

    public virtual DbSet<BsAutoSeaDelhiRule> BsAutoSeaDelhiRules { get; set; }

    public virtual DbSet<BsAutoSeaDelhiRuleShadow> BsAutoSeaDelhiRuleShadows { get; set; }

    public virtual DbSet<BsAutoSeaExpenseRule> BsAutoSeaExpenseRules { get; set; }

    public virtual DbSet<BsAutoSeaExpenseRuleBk> BsAutoSeaExpenseRuleBks { get; set; }

    public virtual DbSet<BsAutoSeaExpenseRuleShadow> BsAutoSeaExpenseRuleShadows { get; set; }

    public virtual DbSet<BsAutoSeaHyderRule> BsAutoSeaHyderRules { get; set; }

    public virtual DbSet<BsAutoSeaJaipurRule> BsAutoSeaJaipurRules { get; set; }

    public virtual DbSet<BsAutoSeaJaipurRuleShadow> BsAutoSeaJaipurRuleShadows { get; set; }

    public virtual DbSet<BsAutoSeaKolkRule> BsAutoSeaKolkRules { get; set; }

    public virtual DbSet<BsAutoSeaKolkRule202400807> BsAutoSeaKolkRule202400807s { get; set; }

    public virtual DbSet<BsAutoSeaKolkRuleShadow> BsAutoSeaKolkRuleShadows { get; set; }

    public virtual DbSet<BsAutoSeaMundraRule> BsAutoSeaMundraRules { get; set; }

    public virtual DbSet<BsAutoSeaNagpurRule> BsAutoSeaNagpurRules { get; set; }

    public virtual DbSet<BsAutoSeaPipavavRule> BsAutoSeaPipavavRules { get; set; }

    public virtual DbSet<BsAutoSeaPunjabRule> BsAutoSeaPunjabRules { get; set; }

    public virtual DbSet<BsAutoSeaVadodrarule> BsAutoSeaVadodrarules { get; set; }

    public virtual DbSet<BsAutoSeaVizagRule> BsAutoSeaVizagRules { get; set; }

    public virtual DbSet<BsBackOfficeDocument> BsBackOfficeDocuments { get; set; }

    public virtual DbSet<BsBeprovisional> BsBeprovisionals { get; set; }

    public virtual DbSet<BsBetypeM> BsBetypeMs { get; set; }

    public virtual DbSet<BsBillDispatchDoc> BsBillDispatchDocs { get; set; }

    public virtual DbSet<BsBillDispatchDocShadow> BsBillDispatchDocShadows { get; set; }

    public virtual DbSet<BsBillReturnDetail> BsBillReturnDetails { get; set; }

    public virtual DbSet<BsBillStatusDetail> BsBillStatusDetails { get; set; }

    public virtual DbSet<BsBillStatusM> BsBillStatusMs { get; set; }

    public virtual DbSet<BsBillingFaq> BsBillingFaqs { get; set; }

    public virtual DbSet<BsBillingInstruction> BsBillingInstructions { get; set; }

    public virtual DbSet<BsBillingInstructionRef> BsBillingInstructionRefs { get; set; }

    public virtual DbSet<BsBillingRuleType> BsBillingRuleTypes { get; set; }

    public virtual DbSet<BsBlcopyDetail> BsBlcopyDetails { get; set; }

    public virtual DbSet<BsBranchCf> BsBranchCfs { get; set; }

    public virtual DbSet<BsBranchExpense> BsBranchExpenses { get; set; }

    public virtual DbSet<BsBranchJobCode> BsBranchJobCodes { get; set; }

    public virtual DbSet<BsBranchM> BsBranchMs { get; set; }

    public virtual DbSet<BsBranchPort> BsBranchPorts { get; set; }

    public virtual DbSet<BsBranchWarehouse> BsBranchWarehouses { get; set; }

    public virtual DbSet<BsCfsmaster> BsCfsmasters { get; set; }

    public virtual DbSet<BsCfsuser> BsCfsusers { get; set; }

    public virtual DbSet<BsChargesCategory> BsChargesCategories { get; set; }

    public virtual DbSet<BsChargesWsRangeDetail> BsChargesWsRangeDetails { get; set; }

    public virtual DbSet<BsCheckListDetail> BsCheckListDetails { get; set; }

    public virtual DbSet<BsCheckListStatusM> BsCheckListStatusMs { get; set; }

    public virtual DbSet<BsChekListDocDetail> BsChekListDocDetails { get; set; }

    public virtual DbSet<BsChekListDocTypeM> BsChekListDocTypeMs { get; set; }

    public virtual DbSet<BsCompanyAddress> BsCompanyAddresses { get; set; }

    public virtual DbSet<BsCompanyCategory> BsCompanyCategories { get; set; }

    public virtual DbSet<BsCompanyCategoryM> BsCompanyCategoryMs { get; set; }

    public virtual DbSet<BsConsigneeM> BsConsigneeMs { get; set; }

    public virtual DbSet<BsConsolidate> BsConsolidates { get; set; }

    public virtual DbSet<BsContactDetaile> BsContactDetailes { get; set; }

    public virtual DbSet<BsContainerCount> BsContainerCounts { get; set; }

    public virtual DbSet<BsContainerDetail> BsContainerDetails { get; set; }

    public virtual DbSet<BsContainerSizeM> BsContainerSizeMs { get; set; }

    public virtual DbSet<BsContainerTrackEventHistory> BsContainerTrackEventHistories { get; set; }

    public virtual DbSet<BsContainerTrackingEvent> BsContainerTrackingEvents { get; set; }

    public virtual DbSet<BsContainerTypeM> BsContainerTypeMs { get; set; }

    public virtual DbSet<BsCoveringletterPath> BsCoveringletterPaths { get; set; }

    public virtual DbSet<BsCurrencyM> BsCurrencyMs { get; set; }

    public virtual DbSet<BsCustCreditInput> BsCustCreditInputs { get; set; }

    public virtual DbSet<BsCustFieldGroup> BsCustFieldGroups { get; set; }

    public virtual DbSet<BsCustFieldsM> BsCustFieldsMs { get; set; }

    public virtual DbSet<BsCustJadetail> BsCustJadetails { get; set; }

    public virtual DbSet<BsCustTaskStatusM> BsCustTaskStatusMs { get; set; }

    public virtual DbSet<BsCustUcdetail> BsCustUcdetails { get; set; }

    public virtual DbSet<BsCustomGroupDetail> BsCustomGroupDetails { get; set; }

    public virtual DbSet<BsCustomGroupM> BsCustomGroupMs { get; set; }

    public virtual DbSet<BsCustomGroupPortDetail> BsCustomGroupPortDetails { get; set; }

    public virtual DbSet<BsCustomerAlert> BsCustomerAlerts { get; set; }

    public virtual DbSet<BsCustomerBillingRule> BsCustomerBillingRules { get; set; }

    public virtual DbSet<BsCustomerBranch> BsCustomerBranches { get; set; }

    public virtual DbSet<BsCustomerCircular> BsCustomerCirculars { get; set; }

    public virtual DbSet<BsCustomerCircularShadow> BsCustomerCircularShadows { get; set; }

    public virtual DbSet<BsCustomerConsignee> BsCustomerConsignees { get; set; }

    public virtual DbSet<BsCustomerDispatch> BsCustomerDispatches { get; set; }

    public virtual DbSet<BsCustomerEbillConfirm> BsCustomerEbillConfirms { get; set; }

    public virtual DbSet<BsCustomerField> BsCustomerFields { get; set; }

    public virtual DbSet<BsCustomerGst> BsCustomerGsts { get; set; }

    public virtual DbSet<BsCustomerLicenseM> BsCustomerLicenseMs { get; set; }

    public virtual DbSet<BsCustomerLicenseReturn> BsCustomerLicenseReturns { get; set; }

    public virtual DbSet<BsCustomerLocationM> BsCustomerLocationMs { get; set; }

    public virtual DbSet<BsCustomerLocationTypeM> BsCustomerLocationTypeMs { get; set; }

    public virtual DbSet<BsCustomerM> BsCustomerMs { get; set; }

    public virtual DbSet<BsCustomerNote> BsCustomerNotes { get; set; }

    public virtual DbSet<BsCustomerPlantAddress> BsCustomerPlantAddresses { get; set; }

    public virtual DbSet<BsCustomerPlantAddressShadow> BsCustomerPlantAddressShadows { get; set; }

    public virtual DbSet<BsCustomerRgbranch> BsCustomerRgbranches { get; set; }

    public virtual DbSet<BsCustomerShipper> BsCustomerShippers { get; set; }

    public virtual DbSet<BsCustomerStatusHistory> BsCustomerStatusHistories { get; set; }

    public virtual DbSet<BsCustomerTaskSummary> BsCustomerTaskSummaries { get; set; }

    public virtual DbSet<BsCustomerUserLocation> BsCustomerUserLocations { get; set; }

    public virtual DbSet<BsCustomerVariant> BsCustomerVariants { get; set; }

    public virtual DbSet<BsCutomerUserDetail> BsCutomerUserDetails { get; set; }

    public virtual DbSet<BsDeliveryConsolidate> BsDeliveryConsolidates { get; set; }

    public virtual DbSet<BsDeliveryTypeM> BsDeliveryTypeMs { get; set; }

    public virtual DbSet<BsDeptM> BsDeptMs { get; set; }

    public virtual DbSet<BsDivisionM> BsDivisionMs { get; set; }

    public virtual DbSet<BsDoProcessRemark> BsDoProcessRemarks { get; set; }

    public virtual DbSet<BsDoprocessRemarkM> BsDoprocessRemarkMs { get; set; }

    public virtual DbSet<BsDorequiredDoc> BsDorequiredDocs { get; set; }

    public virtual DbSet<BsDorequiredDocM> BsDorequiredDocMs { get; set; }

    public virtual DbSet<BsDostageHistory> BsDostageHistories { get; set; }

    public virtual DbSet<BsDostageM> BsDostageMs { get; set; }

    public virtual DbSet<BsDraftQuotation> BsDraftQuotations { get; set; }

    public virtual DbSet<BsDutyStatusDetail> BsDutyStatusDetails { get; set; }

    public virtual DbSet<BsDutyStatusDetailShadow> BsDutyStatusDetailShadows { get; set; }

    public virtual DbSet<BsDutyStatusM> BsDutyStatusMs { get; set; }

    public virtual DbSet<BsElr> BsElrs { get; set; }

    public virtual DbSet<BsElrcustomer> BsElrcustomers { get; set; }

    public virtual DbSet<BsExbondInvoice> BsExbondInvoices { get; set; }

    public virtual DbSet<BsExpenseStatusM> BsExpenseStatusMs { get; set; }

    public virtual DbSet<BsExpensesM> BsExpensesMs { get; set; }

    public virtual DbSet<BsExpensesRuleM> BsExpensesRuleMs { get; set; }

    public virtual DbSet<BsFieldGroup> BsFieldGroups { get; set; }

    public virtual DbSet<BsFieldMaster> BsFieldMasters { get; set; }

    public virtual DbSet<BsFieldTypeM> BsFieldTypeMs { get; set; }

    public virtual DbSet<BsFinYearM> BsFinYearMs { get; set; }

    public virtual DbSet<BsFlowStatus> BsFlowStatuses { get; set; }

    public virtual DbSet<BsHoldBillingAdvice> BsHoldBillingAdvices { get; set; }

    public virtual DbSet<BsHolidayM> BsHolidayMs { get; set; }

    public virtual DbSet<BsIgmDetailShadow> BsIgmDetailShadows { get; set; }

    public virtual DbSet<BsIgmdetail> BsIgmdetails { get; set; }

    public virtual DbSet<BsIncoTermM> BsIncoTermMs { get; set; }

    public virtual DbSet<BsJobAdcPhoDetail> BsJobAdcPhoDetails { get; set; }

    public virtual DbSet<BsJobAssignForStatus> BsJobAssignForStatuses { get; set; }

    public virtual DbSet<BsJobBondFormality> BsJobBondFormalities { get; set; }

    public virtual DbSet<BsJobCertificate> BsJobCertificates { get; set; }

    public virtual DbSet<BsJobCustomsStage> BsJobCustomsStages { get; set; }

    public virtual DbSet<BsJobDailyActivity> BsJobDailyActivities { get; set; }

    public virtual DbSet<BsJobDeliveryDetail> BsJobDeliveryDetails { get; set; }

    public virtual DbSet<BsJobDeliveryDetailShadow> BsJobDeliveryDetailShadows { get; set; }

    public virtual DbSet<BsJobDeliveryM> BsJobDeliveryMs { get; set; }

    public virtual DbSet<BsJobDeliveryMsShadow> BsJobDeliveryMsShadows { get; set; }

    public virtual DbSet<BsJobDeliveryWarehouse> BsJobDeliveryWarehouses { get; set; }

    public virtual DbSet<BsJobDeliveryWarehouseShadow> BsJobDeliveryWarehouseShadows { get; set; }

    public virtual DbSet<BsJobDetail> BsJobDetails { get; set; }

    public virtual DbSet<BsJobDetailShadow> BsJobDetailShadows { get; set; }

    public virtual DbSet<BsJobDocollection> BsJobDocollections { get; set; }

    public virtual DbSet<BsJobDocollectionShadow> BsJobDocollectionShadows { get; set; }

    public virtual DbSet<BsJobDoplanning> BsJobDoplannings { get; set; }

    public virtual DbSet<BsJobErrorStat> BsJobErrorStats { get; set; }

    public virtual DbSet<BsJobExamineDetail> BsJobExamineDetails { get; set; }

    public virtual DbSet<BsJobExamineDetailShadow> BsJobExamineDetailShadows { get; set; }

    public virtual DbSet<BsJobExpenseDetail> BsJobExpenseDetails { get; set; }

    public virtual DbSet<BsJobExpenseDetailShadow> BsJobExpenseDetailShadows { get; set; }

    public virtual DbSet<BsJobExpenseHistory> BsJobExpenseHistories { get; set; }

    public virtual DbSet<BsJobField> BsJobFields { get; set; }

    public virtual DbSet<BsJobFirstCheckDetail> BsJobFirstCheckDetails { get; set; }

    public virtual DbSet<BsJobInvoiceInfo> BsJobInvoiceInfos { get; set; }

    public virtual DbSet<BsJobLabourAmount> BsJobLabourAmounts { get; set; }

    public virtual DbSet<BsJobNotification> BsJobNotifications { get; set; }

    public virtual DbSet<BsJobNotingDetail> BsJobNotingDetails { get; set; }

    public virtual DbSet<BsJobNotingDetailShadow> BsJobNotingDetailShadows { get; set; }

    public virtual DbSet<BsJobPassingDetail> BsJobPassingDetails { get; set; }

    public virtual DbSet<BsJobPassingDetailShadow> BsJobPassingDetailShadows { get; set; }

    public virtual DbSet<BsJobPcdstatus> BsJobPcdstatuses { get; set; }

    public virtual DbSet<BsJobPcdstatusShadow> BsJobPcdstatusShadows { get; set; }

    public virtual DbSet<BsJobSchemeDetail> BsJobSchemeDetails { get; set; }

    public virtual DbSet<BsJobStatusM> BsJobStatusMs { get; set; }

    public virtual DbSet<BsJobSubStatusDetail> BsJobSubStatusDetails { get; set; }

    public virtual DbSet<BsJobSubStatusM> BsJobSubStatusMs { get; set; }

    public virtual DbSet<BsJobTransitHistory> BsJobTransitHistories { get; set; }

    public virtual DbSet<BsJobTypeM> BsJobTypeMs { get; set; }

    public virtual DbSet<BsJobUnlock> BsJobUnlocks { get; set; }

    public virtual DbSet<BsLabourTypeM> BsLabourTypeMs { get; set; }

    public virtual DbSet<BsLrdctype> BsLrdctypes { get; set; }

    public virtual DbSet<BsLrdetail> BsLrdetails { get; set; }

    public virtual DbSet<BsLrpackageDetail> BsLrpackageDetails { get; set; }

    public virtual DbSet<BsLrpending> BsLrpendings { get; set; }

    public virtual DbSet<BsMailFailedItem> BsMailFailedItems { get; set; }

    public virtual DbSet<BsMailFailedLog> BsMailFailedLogs { get; set; }

    public virtual DbSet<BsMailSendingTest> BsMailSendingTests { get; set; }

    public virtual DbSet<BsManPosition> BsManPositions { get; set; }

    public virtual DbSet<BsManpowerReq> BsManpowerReqs { get; set; }

    public virtual DbSet<BsMiscellaneousCustomerTask> BsMiscellaneousCustomerTasks { get; set; }

    public virtual DbSet<BsMissingJob> BsMissingJobs { get; set; }

    public virtual DbSet<BsMistakeLog> BsMistakeLogs { get; set; }

    public virtual DbSet<BsMistakeStatusM> BsMistakeStatusMs { get; set; }

    public virtual DbSet<BsModuleM> BsModuleMs { get; set; }

    public virtual DbSet<BsNextUniqueId> BsNextUniqueIds { get; set; }

    public virtual DbSet<BsNformHistory> BsNformHistories { get; set; }

    public virtual DbSet<BsNotificationMode> BsNotificationModes { get; set; }

    public virtual DbSet<BsNotificationType> BsNotificationTypes { get; set; }

    public virtual DbSet<BsNotificationUser> BsNotificationUsers { get; set; }

    public virtual DbSet<BsPackageTypeM> BsPackageTypeMs { get; set; }

    public virtual DbSet<BsPageM> BsPageMs { get; set; }

    public virtual DbSet<BsPageMs2> BsPageMs2s { get; set; }

    public virtual DbSet<BsPassingQueryDetail> BsPassingQueryDetails { get; set; }

    public virtual DbSet<BsPassingStageDetail> BsPassingStageDetails { get; set; }

    public virtual DbSet<BsPassingStageM> BsPassingStageMs { get; set; }

    public virtual DbSet<BsPaymentTypeDetail> BsPaymentTypeDetails { get; set; }

    public virtual DbSet<BsPaymentTypeM> BsPaymentTypeMs { get; set; }

    public virtual DbSet<BsPcaconsoleCover> BsPcaconsoleCovers { get; set; }

    public virtual DbSet<BsPcdbackOffice> BsPcdbackOffices { get; set; }

    public virtual DbSet<BsPcdbillingAdvice> BsPcdbillingAdvices { get; set; }

    public virtual DbSet<BsPcdbillingDetail> BsPcdbillingDetails { get; set; }

    public virtual DbSet<BsPcdcheckingDate> BsPcdcheckingDates { get; set; }

    public virtual DbSet<BsPcdcustomerDetail> BsPcdcustomerDetails { get; set; }

    public virtual DbSet<BsPcddetail> BsPcddetails { get; set; }

    public virtual DbSet<BsPcddispatchDetail> BsPcddispatchDetails { get; set; }

    public virtual DbSet<BsPcddispatchDetailShadow> BsPcddispatchDetailShadows { get; set; }

    public virtual DbSet<BsPcddocFlowDetail> BsPcddocFlowDetails { get; set; }

    public virtual DbSet<BsPcddocTypeM> BsPcddocTypeMs { get; set; }

    public virtual DbSet<BsPcddocumentDetail> BsPcddocumentDetails { get; set; }

    public virtual DbSet<BsPcddocumentM> BsPcddocumentMs { get; set; }

    public virtual DbSet<BsPcddraftInvoice> BsPcddraftInvoices { get; set; }

    public virtual DbSet<BsPcdfileRcvStatusM> BsPcdfileRcvStatusMs { get; set; }

    public virtual DbSet<BsPcdfileReceivedDetail> BsPcdfileReceivedDetails { get; set; }

    public virtual DbSet<BsPcdfileReceivedDetailShadow> BsPcdfileReceivedDetailShadows { get; set; }

    public virtual DbSet<BsPcdfinalCheckingDate> BsPcdfinalCheckingDates { get; set; }

    public virtual DbSet<BsPcdfinalDispatch> BsPcdfinalDispatches { get; set; }

    public virtual DbSet<BsPcdfinalTypingDate> BsPcdfinalTypingDates { get; set; }

    public virtual DbSet<BsPcdinvoiceDetail> BsPcdinvoiceDetails { get; set; }

    public virtual DbSet<BsPcdscanDocDetail> BsPcdscanDocDetails { get; set; }

    public virtual DbSet<BsPcdscanDocumentDetail> BsPcdscanDocumentDetails { get; set; }

    public virtual DbSet<BsPcdscanDocumentM> BsPcdscanDocumentMs { get; set; }

    public virtual DbSet<BsPcdscrutinyRejectDetail> BsPcdscrutinyRejectDetails { get; set; }

    public virtual DbSet<BsPcdscrutinyRejectDetailShadow> BsPcdscrutinyRejectDetailShadows { get; set; }

    public virtual DbSet<BsPcdscrutinyStatusDetail> BsPcdscrutinyStatusDetails { get; set; }

    public virtual DbSet<BsPcdtransportDetail> BsPcdtransportDetails { get; set; }

    public virtual DbSet<BsPendingDocRequestDetail> BsPendingDocRequestDetails { get; set; }

    public virtual DbSet<BsPinCode> BsPinCodes { get; set; }

    public virtual DbSet<BsPortM> BsPortMs { get; set; }

    public virtual DbSet<BsPortOfLoadingM> BsPortOfLoadingMs { get; set; }

    public virtual DbSet<BsPreAlertDoc> BsPreAlertDocs { get; set; }

    public virtual DbSet<BsPreAlertDocPath> BsPreAlertDocPaths { get; set; }

    public virtual DbSet<BsPreAlertDocShadow> BsPreAlertDocShadows { get; set; }

    public virtual DbSet<BsPriorityM> BsPriorityMs { get; set; }

    public virtual DbSet<BsProductInvoiceBalance> BsProductInvoiceBalances { get; set; }

    public virtual DbSet<BsProductInvoiceDetail> BsProductInvoiceDetails { get; set; }

    public virtual DbSet<BsProductInvoiceDetailDeleted> BsProductInvoiceDetailDeleteds { get; set; }

    public virtual DbSet<BsProductInvoiceLicense> BsProductInvoiceLicenses { get; set; }

    public virtual DbSet<BsQueryFieldM> BsQueryFieldMs { get; set; }

    public virtual DbSet<BsQuotationCategoryM> BsQuotationCategoryMs { get; set; }

    public virtual DbSet<BsQuotationChargesM> BsQuotationChargesMs { get; set; }

    public virtual DbSet<BsQuotationDocDetail> BsQuotationDocDetails { get; set; }

    public virtual DbSet<BsQuotationModeDetail> BsQuotationModeDetails { get; set; }

    public virtual DbSet<BsQuotationRatesDetail> BsQuotationRatesDetails { get; set; }

    public virtual DbSet<BsQuotationStatusHistory> BsQuotationStatusHistories { get; set; }

    public virtual DbSet<BsQuotationStatusM> BsQuotationStatusMs { get; set; }

    public virtual DbSet<BsQuotationTexture> BsQuotationTextures { get; set; }

    public virtual DbSet<BsQuoteApplicableField> BsQuoteApplicableFields { get; set; }

    public virtual DbSet<BsQuoteModeM> BsQuoteModeMs { get; set; }

    public virtual DbSet<BsReasonforPendencyM> BsReasonforPendencyMs { get; set; }

    public virtual DbSet<BsReceivedTypeM> BsReceivedTypeMs { get; set; }

    public virtual DbSet<BsReminderCategoriesM> BsReminderCategoriesMs { get; set; }

    public virtual DbSet<BsRmsdetail> BsRmsdetails { get; set; }

    public virtual DbSet<BsRoleDetail> BsRoleDetails { get; set; }

    public virtual DbSet<BsRoleM> BsRoleMs { get; set; }

    public virtual DbSet<BsRptBillBalance> BsRptBillBalances { get; set; }

    public virtual DbSet<BsRptBillBalanceOld> BsRptBillBalanceOlds { get; set; }

    public virtual DbSet<BsRptBillSummary> BsRptBillSummaries { get; set; }

    public virtual DbSet<BsSchemeTypeM> BsSchemeTypeMs { get; set; }

    public virtual DbSet<BsServicesM> BsServicesMs { get; set; }

    public virtual DbSet<BsShipCompDetail> BsShipCompDetails { get; set; }

    public virtual DbSet<BsShipCompMaster> BsShipCompMasters { get; set; }

    public virtual DbSet<BsStampDutyDetail> BsStampDutyDetails { get; set; }

    public virtual DbSet<BsStatusM> BsStatusMs { get; set; }

    public virtual DbSet<BsTermConditionDetail> BsTermConditionDetails { get; set; }

    public virtual DbSet<BsTermConditionM> BsTermConditionMs { get; set; }

    public virtual DbSet<BsTestAirBangl> BsTestAirBangls { get; set; }

    public virtual DbSet<BsTestSeaBanglore> BsTestSeaBanglores { get; set; }

    public virtual DbSet<BsTestSeaChennai> BsTestSeaChennais { get; set; }

    public virtual DbSet<BsTimestamp> BsTimestamps { get; set; }

    public virtual DbSet<BsTimestampShadow> BsTimestampShadows { get; set; }

    public virtual DbSet<BsTrackContainerDetail> BsTrackContainerDetails { get; set; }

    public virtual DbSet<BsTradeLaneM> BsTradeLaneMs { get; set; }

    public virtual DbSet<BsTransBillCheckM> BsTransBillCheckMs { get; set; }

    public virtual DbSet<BsTransM> BsTransMs { get; set; }

    public virtual DbSet<BsTransitType> BsTransitTypes { get; set; }

    public virtual DbSet<BsTransportationCharge> BsTransportationCharges { get; set; }

    public virtual DbSet<BsTransporterBankDetail> BsTransporterBankDetails { get; set; }

    public virtual DbSet<BsTruncatePreventKey> BsTruncatePreventKeys { get; set; }

    public virtual DbSet<BsUserActivity> BsUserActivities { get; set; }

    public virtual DbSet<BsUserBranch> BsUserBranches { get; set; }

    public virtual DbSet<BsUserCustomer> BsUserCustomers { get; set; }

    public virtual DbSet<BsUserDetail> BsUserDetails { get; set; }

    public virtual DbSet<BsUserLoginHistory> BsUserLoginHistories { get; set; }

    public virtual DbSet<BsUserM> BsUserMs { get; set; }

    public virtual DbSet<BsUserToken> BsUserTokens { get; set; }

    public virtual DbSet<BsVarientM> BsVarientMs { get; set; }

    public virtual DbSet<BsVehicleMaster> BsVehicleMasters { get; set; }

    public virtual DbSet<BsVendorLogin> BsVendorLogins { get; set; }

    public virtual DbSet<BsVendorRegistration> BsVendorRegistrations { get; set; }

    public virtual DbSet<BsWareHouseM> BsWareHouseMs { get; set; }

    public virtual DbSet<BsWarehouseTypeM> BsWarehouseTypeMs { get; set; }

    public virtual DbSet<BsWhatsNew> BsWhatsNews { get; set; }

    public virtual DbSet<BsWhatsNewDoc> BsWhatsNewDocs { get; set; }

    public virtual DbSet<BsXmljobextraDetail> BsXmljobextraDetails { get; set; }

    public virtual DbSet<CbBillingDetail> CbBillingDetails { get; set; }

    public virtual DbSet<CbBillingDetailUserDetail> CbBillingDetailUserDetails { get; set; }

    public virtual DbSet<CbCapCriteriaM> CbCapCriteriaMs { get; set; }

    public virtual DbSet<CbContractDoc> CbContractDocs { get; set; }

    public virtual DbSet<CbDivisionM> CbDivisionMs { get; set; }

    public virtual DbSet<CbEntryMode> CbEntryModes { get; set; }

    public virtual DbSet<CbFaBookM> CbFaBookMs { get; set; }

    public virtual DbSet<CbRangeCriteriaM> CbRangeCriteriaMs { get; set; }

    public virtual DbSet<CcUom> CcUoms { get; set; }

    public virtual DbSet<CiCommodityM> CiCommodityMs { get; set; }

    public virtual DbSet<CiContainerDetail> CiContainerDetails { get; set; }

    public virtual DbSet<CiInsuranceDocument> CiInsuranceDocuments { get; set; }

    public virtual DbSet<CiInsuranceHistory> CiInsuranceHistories { get; set; }

    public virtual DbSet<CiInsuranceRequest> CiInsuranceRequests { get; set; }

    public virtual DbSet<CiInsuranceResponse> CiInsuranceResponses { get; set; }

    public virtual DbSet<CiStatusM> CiStatusMs { get; set; }

    public virtual DbSet<CiTransModeM> CiTransModeMs { get; set; }

    public virtual DbSet<CmBackOfficeDocument> CmBackOfficeDocuments { get; set; }

    public virtual DbSet<CmConsolidateJobDetail> CmConsolidateJobDetails { get; set; }

    public virtual DbSet<CmContRecdCfsdetail> CmContRecdCfsdetails { get; set; }

    public virtual DbSet<CmDocument> CmDocuments { get; set; }

    public virtual DbSet<CmJobCfsrefundStatus> CmJobCfsrefundStatuses { get; set; }

    public virtual DbSet<CmJobDetail> CmJobDetails { get; set; }

    public virtual DbSet<CmMovementDetail> CmMovementDetails { get; set; }

    public virtual DbSet<CmUnprocessJobHistory> CmUnprocessJobHistories { get; set; }

    public virtual DbSet<ContractMaster> ContractMasters { get; set; }

    public virtual DbSet<Contractdataentry> Contractdataentries { get; set; }

    public virtual DbSet<CrmActivityLog> CrmActivityLogs { get; set; }

    public virtual DbSet<CrmBudgetM> CrmBudgetMs { get; set; }

    public virtual DbSet<CrmBudgetUnitM> CrmBudgetUnitMs { get; set; }

    public virtual DbSet<CrmBusinessCategoryM> CrmBusinessCategoryMs { get; set; }

    public virtual DbSet<CrmCategoryM> CrmCategoryMs { get; set; }

    public virtual DbSet<CrmCharequirement> CrmCharequirements { get; set; }

    public virtual DbSet<CrmCompanyM> CrmCompanyMs { get; set; }

    public virtual DbSet<CrmCompanyTypeM> CrmCompanyTypeMs { get; set; }

    public virtual DbSet<CrmContactDetail> CrmContactDetails { get; set; }

    public virtual DbSet<CrmContactDoc> CrmContactDocs { get; set; }

    public virtual DbSet<CrmContainerTypeM> CrmContainerTypeMs { get; set; }

    public virtual DbSet<CrmCurrentStatusM> CrmCurrentStatusMs { get; set; }

    public virtual DbSet<CrmCustomerUser> CrmCustomerUsers { get; set; }

    public virtual DbSet<CrmCustomerVisitReport> CrmCustomerVisitReports { get; set; }

    public virtual DbSet<CrmEnquiry> CrmEnquiries { get; set; }

    public virtual DbSet<CrmEnquiryDoc> CrmEnquiryDocs { get; set; }

    public virtual DbSet<CrmEnquiryHistory> CrmEnquiryHistories { get; set; }

    public virtual DbSet<CrmEnquiryService> CrmEnquiryServices { get; set; }

    public virtual DbSet<CrmEnquiryStatus> CrmEnquiryStatuses { get; set; }

    public virtual DbSet<CrmFollowupHistory> CrmFollowupHistories { get; set; }

    public virtual DbSet<CrmFreightPortRequirement> CrmFreightPortRequirements { get; set; }

    public virtual DbSet<CrmFreightRequirement> CrmFreightRequirements { get; set; }

    public virtual DbSet<CrmLead> CrmLeads { get; set; }

    public virtual DbSet<CrmLeadEnquiry> CrmLeadEnquiries { get; set; }

    public virtual DbSet<CrmLeadService> CrmLeadServices { get; set; }

    public virtual DbSet<CrmLeadSourceM> CrmLeadSourceMs { get; set; }

    public virtual DbSet<CrmLeadStageHistory> CrmLeadStageHistories { get; set; }

    public virtual DbSet<CrmLeadStageM> CrmLeadStageMs { get; set; }

    public virtual DbSet<CrmLeadStageMsOld> CrmLeadStageMsOlds { get; set; }

    public virtual DbSet<CrmLeadStatus> CrmLeadStatuses { get; set; }

    public virtual DbSet<CrmLeadUser> CrmLeadUsers { get; set; }

    public virtual DbSet<CrmMailLog> CrmMailLogs { get; set; }

    public virtual DbSet<CrmMomAgendum> CrmMomAgenda { get; set; }

    public virtual DbSet<CrmMomAttendee> CrmMomAttendees { get; set; }

    public virtual DbSet<CrmOpportunity> CrmOpportunities { get; set; }

    public virtual DbSet<CrmOpportunityBudget> CrmOpportunityBudgets { get; set; }

    public virtual DbSet<CrmOpportunityMom> CrmOpportunityMoms { get; set; }

    public virtual DbSet<CrmOpportunityStageHistory> CrmOpportunityStageHistories { get; set; }

    public virtual DbSet<CrmOpportunityStageM> CrmOpportunityStageMs { get; set; }

    public virtual DbSet<CrmPlanningEvent> CrmPlanningEvents { get; set; }

    public virtual DbSet<CrmRequirement> CrmRequirements { get; set; }

    public virtual DbSet<CrmRoleM> CrmRoleMs { get; set; }

    public virtual DbSet<CrmShareLead> CrmShareLeads { get; set; }

    public virtual DbSet<CrmSubProductM> CrmSubProductMs { get; set; }

    public virtual DbSet<CrmTask> CrmTasks { get; set; }

    public virtual DbSet<CrmTaskFollowup> CrmTaskFollowups { get; set; }

    public virtual DbSet<CrmTaskHistory> CrmTaskHistories { get; set; }

    public virtual DbSet<CrmTaskNotification> CrmTaskNotifications { get; set; }

    public virtual DbSet<CrmTaskRelatedToM> CrmTaskRelatedToMs { get; set; }

    public virtual DbSet<CrmTaskStatusM> CrmTaskStatusMs { get; set; }

    public virtual DbSet<CrmTaskUser> CrmTaskUsers { get; set; }

    public virtual DbSet<CrmUserCompany> CrmUserCompanies { get; set; }

    public virtual DbSet<CrmUserLocation> CrmUserLocations { get; set; }

    public virtual DbSet<CrmUserM> CrmUserMs { get; set; }

    public virtual DbSet<CrmUserReporting> CrmUserReportings { get; set; }

    public virtual DbSet<CrmVisitCategory> CrmVisitCategories { get; set; }

    public virtual DbSet<CrmVisitReport> CrmVisitReports { get; set; }

    public virtual DbSet<CrmWarehouseRequirement> CrmWarehouseRequirements { get; set; }

    public virtual DbSet<CrmWarehouseStructureTypeM> CrmWarehouseStructureTypeMs { get; set; }

    public virtual DbSet<CustomerImport> CustomerImports { get; set; }

    public virtual DbSet<DataRate> DataRates { get; set; }

    public virtual DbSet<Employee1> Employee1s { get; set; }

    public virtual DbSet<ExAutoAirExpenseRule> ExAutoAirExpenseRules { get; set; }

    public virtual DbSet<ExAutoJobAirExpense> ExAutoJobAirExpenses { get; set; }

    public virtual DbSet<ExAutoJobSeaAhmedExp> ExAutoJobSeaAhmedExps { get; set; }

    public virtual DbSet<ExAutoJobSeaAnklExp> ExAutoJobSeaAnklExps { get; set; }

    public virtual DbSet<ExAutoJobSeaChennaiExp> ExAutoJobSeaChennaiExps { get; set; }

    public virtual DbSet<ExAutoJobSeaExpense> ExAutoJobSeaExpenses { get; set; }

    public virtual DbSet<ExAutoJobSeaHaziraExp> ExAutoJobSeaHaziraExps { get; set; }

    public virtual DbSet<ExAutoJobSeaJaipurExp> ExAutoJobSeaJaipurExps { get; set; }

    public virtual DbSet<ExAutoJobSeaKolkExp> ExAutoJobSeaKolkExps { get; set; }

    public virtual DbSet<ExAutoSeaAhmedRule> ExAutoSeaAhmedRules { get; set; }

    public virtual DbSet<ExAutoSeaAnklRule> ExAutoSeaAnklRules { get; set; }

    public virtual DbSet<ExAutoSeaChennaiRule> ExAutoSeaChennaiRules { get; set; }

    public virtual DbSet<ExAutoSeaExpenseRule> ExAutoSeaExpenseRules { get; set; }

    public virtual DbSet<ExAutoSeaHaziraRule> ExAutoSeaHaziraRules { get; set; }

    public virtual DbSet<ExAutoSeaJaipurRule> ExAutoSeaJaipurRules { get; set; }

    public virtual DbSet<ExAutoSeaKolkRule> ExAutoSeaKolkRules { get; set; }

    public virtual DbSet<ExBillingInstruction> ExBillingInstructions { get; set; }

    public virtual DbSet<ExChecklistStatusDetail> ExChecklistStatusDetails { get; set; }

    public virtual DbSet<ExChecklistStatusM> ExChecklistStatusMs { get; set; }

    public virtual DbSet<ExContainerCount> ExContainerCounts { get; set; }

    public virtual DbSet<ExContainerDetail> ExContainerDetails { get; set; }

    public virtual DbSet<ExContainerDetailShadow> ExContainerDetailShadows { get; set; }

    public virtual DbSet<ExContainerSizeM> ExContainerSizeMs { get; set; }

    public virtual DbSet<ExEmailHouse> ExEmailHouses { get; set; }

    public virtual DbSet<ExExportTypeM> ExExportTypeMs { get; set; }

    public virtual DbSet<ExFieldGroup> ExFieldGroups { get; set; }

    public virtual DbSet<ExHoldBillingAdvice> ExHoldBillingAdvices { get; set; }

    public virtual DbSet<ExJobAdtnlDetail> ExJobAdtnlDetails { get; set; }

    public virtual DbSet<ExJobCancelDetail> ExJobCancelDetails { get; set; }

    public virtual DbSet<ExJobDeliveryDetail> ExJobDeliveryDetails { get; set; }

    public virtual DbSet<ExJobDetail> ExJobDetails { get; set; }

    public virtual DbSet<ExJobDetailShadow> ExJobDetailShadows { get; set; }

    public virtual DbSet<ExJobDocsDetail> ExJobDocsDetails { get; set; }

    public virtual DbSet<ExJobExpenseDetail> ExJobExpenseDetails { get; set; }

    public virtual DbSet<ExJobExpenseHistory> ExJobExpenseHistories { get; set; }

    public virtual DbSet<ExJobFilingDetail> ExJobFilingDetails { get; set; }

    public virtual DbSet<ExJobForm13Detail> ExJobForm13Details { get; set; }

    public virtual DbSet<ExJobInvoiceDetail> ExJobInvoiceDetails { get; set; }

    public virtual DbSet<ExJobStatusM> ExJobStatusMs { get; set; }

    public virtual DbSet<ExProductInvoiceBalance> ExProductInvoiceBalances { get; set; }

    public virtual DbSet<ExSbdocument> ExSbdocuments { get; set; }

    public virtual DbSet<ExShipmentGetInDetail> ExShipmentGetInDetails { get; set; }

    public virtual DbSet<ExShipmentTermM> ExShipmentTermMs { get; set; }

    public virtual DbSet<ExShippingBillTypeM> ExShippingBillTypeMs { get; set; }

    public virtual DbSet<FaChargesM> FaChargesMs { get; set; }

    public virtual DbSet<FaqContactPersonDetail> FaqContactPersonDetails { get; set; }

    public virtual DbSet<FaqFaqdetail> FaqFaqdetails { get; set; }

    public virtual DbSet<FileUpload> FileUploads { get; set; }

    public virtual DbSet<FopAgentInvoiceDetail> FopAgentInvoiceDetails { get; set; }

    public virtual DbSet<FopAgentInvoiceDetailShadow> FopAgentInvoiceDetailShadows { get; set; }

    public virtual DbSet<FopAgentPreAlert> FopAgentPreAlerts { get; set; }

    public virtual DbSet<FopAgentPreAlertOld> FopAgentPreAlertOlds { get; set; }

    public virtual DbSet<FopAgentPreAlertShadow> FopAgentPreAlertShadows { get; set; }

    public virtual DbSet<FopBillingAdvice> FopBillingAdvices { get; set; }

    public virtual DbSet<FopBillingDetail> FopBillingDetails { get; set; }

    public virtual DbSet<FopBillingDetailShadow> FopBillingDetailShadows { get; set; }

    public virtual DbSet<FopBooking> FopBookings { get; set; }

    public virtual DbSet<FopBookingDetail> FopBookingDetails { get; set; }

    public virtual DbSet<FopBookingShadow> FopBookingShadows { get; set; }

    public virtual DbSet<FopCargoArrivalDetail> FopCargoArrivalDetails { get; set; }

    public virtual DbSet<FopCargoArrivalDetailShadow> FopCargoArrivalDetailShadows { get; set; }

    public virtual DbSet<FopConsigneeM> FopConsigneeMs { get; set; }

    public virtual DbSet<FopContainerCount> FopContainerCounts { get; set; }

    public virtual DbSet<FopContainerDetailExport> FopContainerDetailExports { get; set; }

    public virtual DbSet<FopContainerM> FopContainerMs { get; set; }

    public virtual DbSet<FopCustomerM> FopCustomerMs { get; set; }

    public virtual DbSet<FopCustomerMsShadow> FopCustomerMsShadows { get; set; }

    public virtual DbSet<FopCustomerPreAlert> FopCustomerPreAlerts { get; set; }

    public virtual DbSet<FopCustomerPreAlertShadow> FopCustomerPreAlertShadows { get; set; }

    public virtual DbSet<FopDailyActivity> FopDailyActivities { get; set; }

    public virtual DbSet<FopDebitNote> FopDebitNotes { get; set; }

    public virtual DbSet<FopDodetail> FopDodetails { get; set; }

    public virtual DbSet<FopDodetailShadow> FopDodetailShadows { get; set; }

    public virtual DbSet<FopInvoiceDetail> FopInvoiceDetails { get; set; }

    public virtual DbSet<FopInvoiceDetailShadow> FopInvoiceDetailShadows { get; set; }

    public virtual DbSet<FopInvoiceFieldM> FopInvoiceFieldMs { get; set; }

    public virtual DbSet<FopInvoiceFieldMsShadow> FopInvoiceFieldMsShadows { get; set; }

    public virtual DbSet<FopInvoicePercentItem> FopInvoicePercentItems { get; set; }

    public virtual DbSet<FopInvoicePercentItemShadow> FopInvoicePercentItemShadows { get; set; }

    public virtual DbSet<FopJobDeliveryM> FopJobDeliveryMs { get; set; }

    public virtual DbSet<FopShipperM> FopShipperMs { get; set; }

    public virtual DbSet<FopUnitOfMeasureM> FopUnitOfMeasureMs { get; set; }

    public virtual DbSet<FopVwFreightDetail> FopVwFreightDetails { get; set; }

    public virtual DbSet<FrAdhocReportCondition> FrAdhocReportConditions { get; set; }

    public virtual DbSet<FrAdhocReportDetail> FrAdhocReportDetails { get; set; }

    public virtual DbSet<FrAdhocReportM> FrAdhocReportMs { get; set; }

    public virtual DbSet<FrAirrateChart> FrAirrateCharts { get; set; }

    public virtual DbSet<FrDocument> FrDocuments { get; set; }

    public virtual DbSet<FrDocumentType> FrDocumentTypes { get; set; }

    public virtual DbSet<FrEnquiry> FrEnquiries { get; set; }

    public virtual DbSet<FrEnquiryAgent> FrEnquiryAgents { get; set; }

    public virtual DbSet<FrEnquiryChat> FrEnquiryChats { get; set; }

    public virtual DbSet<FrEnquiryDetail> FrEnquiryDetails { get; set; }

    public virtual DbSet<FrEnquiryDetailShadow> FrEnquiryDetailShadows { get; set; }

    public virtual DbSet<FrEnquiryMailAttachPath> FrEnquiryMailAttachPaths { get; set; }

    public virtual DbSet<FrEnquiryMailsDetail> FrEnquiryMailsDetails { get; set; }

    public virtual DbSet<FrEnquiryQuote> FrEnquiryQuotes { get; set; }

    public virtual DbSet<FrEnquiryShadow> FrEnquiryShadows { get; set; }

    public virtual DbSet<FrEnquiryUser> FrEnquiryUsers { get; set; }

    public virtual DbSet<FrExportDetail> FrExportDetails { get; set; }

    public virtual DbSet<FrFieldGroup> FrFieldGroups { get; set; }

    public virtual DbSet<FrFieldMaster> FrFieldMasters { get; set; }

    public virtual DbSet<FrHoldBillingAdvice> FrHoldBillingAdvices { get; set; }

    public virtual DbSet<FrJobCancelDetail> FrJobCancelDetails { get; set; }

    public virtual DbSet<FrJobDeliveryM> FrJobDeliveryMs { get; set; }

    public virtual DbSet<FrLostStatusM> FrLostStatusMs { get; set; }

    public virtual DbSet<FrMode> FrModes { get; set; }

    public virtual DbSet<FrQuoteBuyDetail> FrQuoteBuyDetails { get; set; }

    public virtual DbSet<FrQuoteEditPermission> FrQuoteEditPermissions { get; set; }

    public virtual DbSet<FrRateAir> FrRateAirs { get; set; }

    public virtual DbSet<FrRateSea> FrRateSeas { get; set; }

    public virtual DbSet<FrReminder> FrReminders { get; set; }

    public virtual DbSet<FrReminderLog> FrReminderLogs { get; set; }

    public virtual DbSet<FrSacWsTaxDetail> FrSacWsTaxDetails { get; set; }

    public virtual DbSet<FrSeaRateChart> FrSeaRateCharts { get; set; }

    public virtual DbSet<FrShipmentTypeM> FrShipmentTypeMs { get; set; }

    public virtual DbSet<FrStatusHistory> FrStatusHistories { get; set; }

    public virtual DbSet<FrStatusM> FrStatusMs { get; set; }

    public virtual DbSet<FrTempJobFa> FrTempJobFas { get; set; }

    public virtual DbSet<FrTermsM> FrTermsMs { get; set; }

    public virtual DbSet<FrTypeM> FrTypeMs { get; set; }

    public virtual DbSet<GcmUserM> GcmUserMs { get; set; }

    public virtual DbSet<GstGst> GstGsts { get; set; }

    public virtual DbSet<GstGstDetail> GstGstDetails { get; set; }

    public virtual DbSet<GstGstMaterial> GstGstMaterials { get; set; }

    public virtual DbSet<GstGstService> GstGstServices { get; set; }

    public virtual DbSet<IceBecurrentStatus> IceBecurrentStatuses { get; set; }

    public virtual DbSet<IceBedetail> IceBedetails { get; set; }

    public virtual DbSet<IceBedocument> IceBedocuments { get; set; }

    public virtual DbSet<IceBequery> IceBequeries { get; set; }

    public virtual DbSet<IceBestatus> IceBestatuses { get; set; }

    public virtual DbSet<IceBillOfEntry> IceBillOfEntries { get; set; }

    public virtual DbSet<IceContainerDetail> IceContainerDetails { get; set; }

    public virtual DbSet<IceCustomsStageM> IceCustomsStageMs { get; set; }

    public virtual DbSet<IceDrawbackQueryDetail> IceDrawbackQueryDetails { get; set; }

    public virtual DbSet<IceDutyDetail> IceDutyDetails { get; set; }

    public virtual DbSet<IceDutyDetailShadow> IceDutyDetailShadows { get; set; }

    public virtual DbSet<IceEdocumentValidity> IceEdocumentValidities { get; set; }

    public virtual DbSet<IceEgmdetail> IceEgmdetails { get; set; }

    public virtual DbSet<IceIgmdetail> IceIgmdetails { get; set; }

    public virtual DbSet<IcePaymentDetail> IcePaymentDetails { get; set; }

    public virtual DbSet<IcePort> IcePorts { get; set; }

    public virtual DbSet<IceQueryStatusDel> IceQueryStatusDels { get; set; }

    public virtual DbSet<IceSbdetail> IceSbdetails { get; set; }

    public virtual DbSet<IceSbquery> IceSbqueries { get; set; }

    public virtual DbSet<IceSbstatus> IceSbstatuses { get; set; }

    public virtual DbSet<IceUserEmail> IceUserEmails { get; set; }

    public virtual DbSet<IceUserM> IceUserMs { get; set; }

    public virtual DbSet<ImsDispatchItem> ImsDispatchItems { get; set; }

    public virtual DbSet<ImsItemDetail> ImsItemDetails { get; set; }

    public virtual DbSet<ImsItemHistory> ImsItemHistories { get; set; }

    public virtual DbSet<ImsItemTypeM> ImsItemTypeMs { get; set; }

    public virtual DbSet<ImsMaintenanceCategory> ImsMaintenanceCategories { get; set; }

    public virtual DbSet<ImsMaintenanceDocument> ImsMaintenanceDocuments { get; set; }

    public virtual DbSet<ImsMaintenanceExpense> ImsMaintenanceExpenses { get; set; }

    public virtual DbSet<ImsMaintenanceExpenseShadow> ImsMaintenanceExpenseShadows { get; set; }

    public virtual DbSet<ImsMaintenanceWork> ImsMaintenanceWorks { get; set; }

    public virtual DbSet<ImsMaintenanceWorkShadow> ImsMaintenanceWorkShadows { get; set; }

    public virtual DbSet<InvConsolePaymentDetail> InvConsolePaymentDetails { get; set; }

    public virtual DbSet<InvConsolePaymentM> InvConsolePaymentMs { get; set; }

    public virtual DbSet<InvInvoiceDetail> InvInvoiceDetails { get; set; }

    public virtual DbSet<InvInvoiceDetailShadow> InvInvoiceDetailShadows { get; set; }

    public virtual DbSet<InvInvoiceDocument> InvInvoiceDocuments { get; set; }

    public virtual DbSet<InvInvoiceHoldHistory> InvInvoiceHoldHistories { get; set; }

    public virtual DbSet<InvInvoiceItem> InvInvoiceItems { get; set; }

    public virtual DbSet<InvInvoiceItemShadow> InvInvoiceItemShadows { get; set; }

    public virtual DbSet<InvInvoiceMemo> InvInvoiceMemos { get; set; }

    public virtual DbSet<InvInvoiceMemoHistory> InvInvoiceMemoHistories { get; set; }

    public virtual DbSet<InvInvoiceMemoShadow> InvInvoiceMemoShadows { get; set; }

    public virtual DbSet<InvInvoiceMode> InvInvoiceModes { get; set; }

    public virtual DbSet<InvInvoicePayment> InvInvoicePayments { get; set; }

    public virtual DbSet<InvInvoicePaymentShadow> InvInvoicePaymentShadows { get; set; }

    public virtual DbSet<InvInvoiceStatusHistory> InvInvoiceStatusHistories { get; set; }

    public virtual DbSet<InvInvoiceTd> InvInvoiceTds { get; set; }

    public virtual DbSet<InvInvoiceTdsShadow> InvInvoiceTdsShadows { get; set; }

    public virtual DbSet<InvReceiveDetail> InvReceiveDetails { get; set; }

    public virtual DbSet<InvStampDutyM> InvStampDutyMs { get; set; }

    public virtual DbSet<InvStampDutyRate> InvStampDutyRates { get; set; }

    public virtual DbSet<InvStatusM> InvStatusMs { get; set; }

    public virtual DbSet<InvTdsexemptM> InvTdsexemptMs { get; set; }

    public virtual DbSet<InvTransactionType> InvTransactionTypes { get; set; }

    public virtual DbSet<InvVendorBuyDetail> InvVendorBuyDetails { get; set; }

    public virtual DbSet<KpiEmpParticular> KpiEmpParticulars { get; set; }

    public virtual DbSet<KpiEmpParticularShadow> KpiEmpParticularShadows { get; set; }

    public virtual DbSet<KpiEmpTarget> KpiEmpTargets { get; set; }

    public virtual DbSet<KpiEmpTargetShadow> KpiEmpTargetShadows { get; set; }

    public virtual DbSet<KpiKpidetail> KpiKpidetails { get; set; }

    public virtual DbSet<KpiKpim> KpiKpims { get; set; }

    public virtual DbSet<KpiParameterM> KpiParameterMs { get; set; }

    public virtual DbSet<KpiSkillDetail> KpiSkillDetails { get; set; }

    public virtual DbSet<KpiSkillM> KpiSkillMs { get; set; }

    public virtual DbSet<KpimCategory> KpimCategories { get; set; }

    public virtual DbSet<KpimCategoryItem> KpimCategoryItems { get; set; }

    public virtual DbSet<KpimOperator> KpimOperators { get; set; }

    public virtual DbSet<KpimTemplateDetail> KpimTemplateDetails { get; set; }

    public virtual DbSet<KpimTemplateM> KpimTemplateMs { get; set; }

    public virtual DbSet<KtCircularDoc> KtCircularDocs { get; set; }

    public virtual DbSet<KtCircularMail> KtCircularMails { get; set; }

    public virtual DbSet<KtUserM> KtUserMs { get; set; }

    public virtual DbSet<KycCompanyCategory> KycCompanyCategories { get; set; }

    public virtual DbSet<KycConstitutionM> KycConstitutionMs { get; set; }

    public virtual DbSet<KycContactDetail> KycContactDetails { get; set; }

    public virtual DbSet<KycCustomerReg> KycCustomerRegs { get; set; }

    public virtual DbSet<KycGstMaterialDetail> KycGstMaterialDetails { get; set; }

    public virtual DbSet<KycGstServiceDetail> KycGstServiceDetails { get; set; }

    public virtual DbSet<KycGstcopyDetail> KycGstcopyDetails { get; set; }

    public virtual DbSet<KycGstdetail> KycGstdetails { get; set; }

    public virtual DbSet<KycGstmaterial> KycGstmaterials { get; set; }

    public virtual DbSet<KycGstservicess> KycGstservicesses { get; set; }

    public virtual DbSet<KycKycGstDetail> KycKycGstDetails { get; set; }

    public virtual DbSet<KycNatureofBusinessM> KycNatureofBusinessMs { get; set; }

    public virtual DbSet<KycSo> KycSos { get; set; }

    public virtual DbSet<KycVendorDetail> KycVendorDetails { get; set; }

    public virtual DbSet<KycVendorStatusHistory> KycVendorStatusHistories { get; set; }

    public virtual DbSet<LocDetail> LocDetails { get; set; }

    public virtual DbSet<LocMaster> LocMasters { get; set; }

    public virtual DbSet<LocSubdivisionCode> LocSubdivisionCodes { get; set; }

    public virtual DbSet<LocSubdivisionCodes1> LocSubdivisionCodes1s { get; set; }

    public virtual DbSet<LocSubdivisionCodes2> LocSubdivisionCodes2s { get; set; }

    public virtual DbSet<LocSubdivisionCodes3> LocSubdivisionCodes3s { get; set; }

    public virtual DbSet<LocSubdivisionCodes4> LocSubdivisionCodes4s { get; set; }

    public virtual DbSet<LtCbInvDet> LtCbInvDets { get; set; }

    public virtual DbSet<LtCbInvMst> LtCbInvMsts { get; set; }

    public virtual DbSet<LtTsInvDet> LtTsInvDets { get; set; }

    public virtual DbSet<LtTsInvMst> LtTsInvMsts { get; set; }

    public virtual DbSet<MigAcpayment> MigAcpayments { get; set; }

    public virtual DbSet<MigApitransaction20241216> MigApitransaction20241216s { get; set; }

    public virtual DbSet<MigApitransaction20241217> MigApitransaction20241217s { get; set; }

    public virtual DbSet<MigAutoExpensePost> MigAutoExpensePosts { get; set; }

    public virtual DbSet<MigAutoJobAirChennai> MigAutoJobAirChennais { get; set; }

    public virtual DbSet<MigAutoJobSeaChennai> MigAutoJobSeaChennais { get; set; }

    public virtual DbSet<MigAutoJobSeaExpense> MigAutoJobSeaExpenses { get; set; }

    public virtual DbSet<MigAutoSeaChennai> MigAutoSeaChennais { get; set; }

    public virtual DbSet<MigAutoSeaExpenseRule> MigAutoSeaExpenseRules { get; set; }

    public virtual DbSet<MigBetest> MigBetests { get; set; }

    public virtual DbSet<MigBillBacklog> MigBillBacklogs { get; set; }

    public virtual DbSet<MigBillingCourier> MigBillingCouriers { get; set; }

    public virtual DbSet<MigBillingHandDelivery> MigBillingHandDeliveries { get; set; }

    public virtual DbSet<MigBjvPostTran> MigBjvPostTrans { get; set; }

    public virtual DbSet<MigBsAutoJobAirKolk> MigBsAutoJobAirKolks { get; set; }

    public virtual DbSet<MigBsAutoJobSeaKolk> MigBsAutoJobSeaKolks { get; set; }

    public virtual DbSet<MigChennai> MigChennais { get; set; }

    public virtual DbSet<MigContainerMove> MigContainerMoves { get; set; }

    public virtual DbSet<MigCountry> MigCountries { get; set; }

    public virtual DbSet<MigCurrentJobFa> MigCurrentJobFas { get; set; }

    public virtual DbSet<MigCustomerPlant> MigCustomerPlants { get; set; }

    public virtual DbSet<MigCustomerSector> MigCustomerSectors { get; set; }

    public virtual DbSet<MigDispatch0201> MigDispatch0201s { get; set; }

    public virtual DbSet<MigDispatch1307> MigDispatch1307s { get; set; }

    public virtual DbSet<MigDynamicDrill> MigDynamicDrills { get; set; }

    public virtual DbSet<MigEbill> MigEbills { get; set; }

    public virtual DbSet<MigEmployeeHr> MigEmployeeHrs { get; set; }

    public virtual DbSet<MigEway> MigEways { get; set; }

    public virtual DbSet<MigExAutoJobSeaExpense> MigExAutoJobSeaExpenses { get; set; }

    public virtual DbSet<MigFabankDetail> MigFabankDetails { get; set; }

    public virtual DbSet<MigFacustomerCode> MigFacustomerCodes { get; set; }

    public virtual DbSet<MigFacustomerCode2> MigFacustomerCode2s { get; set; }

    public virtual DbSet<MigFajob> MigFajobs { get; set; }

    public virtual DbSet<MigGstLedgerCode> MigGstLedgerCodes { get; set; }

    public virtual DbSet<MigIceBecurrentStatus> MigIceBecurrentStatuses { get; set; }

    public virtual DbSet<MigIceBedetail> MigIceBedetails { get; set; }

    public virtual DbSet<MigIceBillOfEntry> MigIceBillOfEntries { get; set; }

    public virtual DbSet<MigIceDutyDetail> MigIceDutyDetails { get; set; }

    public virtual DbSet<MigJbpost> MigJbposts { get; set; }

    public virtual DbSet<MigJbpost2> MigJbpost2s { get; set; }

    public virtual DbSet<MigJobLedgerCode> MigJobLedgerCodes { get; set; }

    public virtual DbSet<MigLgdispatch1> MigLgdispatch1s { get; set; }

    public virtual DbSet<MigPageM> MigPageMs { get; set; }

    public virtual DbSet<MigPassingDatum> MigPassingData { get; set; }

    public virtual DbSet<MigPayDec> MigPayDecs { get; set; }

    public virtual DbSet<MigSkfTest> MigSkfTests { get; set; }

    public virtual DbSet<MigSkfrefNo> MigSkfrefNos { get; set; }

    public virtual DbSet<MigTemp> MigTemps { get; set; }

    public virtual DbSet<MigTempUtr20241217> MigTempUtr20241217s { get; set; }

    public virtual DbSet<MigTransaction> MigTransactions { get; set; }

    public virtual DbSet<MigUtr> MigUtrs { get; set; }

    public virtual DbSet<MigVendorBankDetail> MigVendorBankDetails { get; set; }

    public virtual DbSet<MigemployeeHr1> MigemployeeHrs1 { get; set; }

    public virtual DbSet<MpMyPaccoAutTokan> MpMyPaccoAutTokans { get; set; }

    public virtual DbSet<MpMyPaccoAwb> MpMyPaccoAwbs { get; set; }

    public virtual DbSet<MpMyPaccoJobAwb> MpMyPaccoJobAwbs { get; set; }

    public virtual DbSet<MpMyPaccoLog> MpMyPaccoLogs { get; set; }

    public virtual DbSet<MpMyPaccoLogin> MpMyPaccoLogins { get; set; }

    public virtual DbSet<MpMyPaccoStatusM> MpMyPaccoStatusMs { get; set; }

    public virtual DbSet<MsBillingInstruction> MsBillingInstructions { get; set; }

    public virtual DbSet<MsBillingInstructionShadow> MsBillingInstructionShadows { get; set; }

    public virtual DbSet<MsContainerDetail> MsContainerDetails { get; set; }

    public virtual DbSet<MsDocumentM> MsDocumentMs { get; set; }

    public virtual DbSet<MsDocumentPath> MsDocumentPaths { get; set; }

    public virtual DbSet<MsJobActivity> MsJobActivities { get; set; }

    public virtual DbSet<MsJobDetail> MsJobDetails { get; set; }

    public virtual DbSet<MsJobStatusM> MsJobStatusMs { get; set; }

    public virtual DbSet<MsPcdbillingAdvice> MsPcdbillingAdvices { get; set; }

    public virtual DbSet<MsPreAlertDoc> MsPreAlertDocs { get; set; }

    public virtual DbSet<MyLog> MyLogs { get; set; }

    public virtual DbSet<OdDocumentM> OdDocumentMs { get; set; }

    public virtual DbSet<OdDocumentShipper> OdDocumentShippers { get; set; }

    public virtual DbSet<OdDocumentShipper2> OdDocumentShipper2s { get; set; }

    public virtual DbSet<OdDorequest> OdDorequests { get; set; }

    public virtual DbSet<OdDostatus> OdDostatuses { get; set; }

    public virtual DbSet<OdInvoiceContainer> OdInvoiceContainers { get; set; }

    public virtual DbSet<OdInvoiceDocument> OdInvoiceDocuments { get; set; }

    public virtual DbSet<OdInvoiceRequest> OdInvoiceRequests { get; set; }

    public virtual DbSet<OdInvoiceRequestShadow> OdInvoiceRequestShadows { get; set; }

    public virtual DbSet<OdInvoiceResponse> OdInvoiceResponses { get; set; }

    public virtual DbSet<OdInvoiceResponseShadow> OdInvoiceResponseShadows { get; set; }

    public virtual DbSet<OdInvoiceStatus> OdInvoiceStatuses { get; set; }

    public virtual DbSet<OdInvoiceTd> OdInvoiceTds { get; set; }

    public virtual DbSet<OdRespDodetail> OdRespDodetails { get; set; }

    public virtual DbSet<OdRespDodetailShadow> OdRespDodetailShadows { get; set; }

    public virtual DbSet<OdStatusM> OdStatusMs { get; set; }

    public virtual DbSet<PassingDataRate> PassingDataRates { get; set; }

    public virtual DbSet<PassingDatum> PassingData { get; set; }

    public virtual DbSet<RandHelper> RandHelpers { get; set; }

    public virtual DbSet<RandomUuid> RandomUuids { get; set; }

    public virtual DbSet<RoyalCaninMars315> RoyalCaninMars315s { get; set; }

    public virtual DbSet<RptTempDuty> RptTempDuties { get; set; }

    public virtual DbSet<SezContainerDetail> SezContainerDetails { get; set; }

    public virtual DbSet<SezCountryOriginM> SezCountryOriginMs { get; set; }

    public virtual DbSet<SezDestinationM> SezDestinationMs { get; set; }

    public virtual DbSet<SezDocDetail> SezDocDetails { get; set; }

    public virtual DbSet<SezFieldGroup> SezFieldGroups { get; set; }

    public virtual DbSet<SezGrossWtUnitM> SezGrossWtUnitMs { get; set; }

    public virtual DbSet<SezInvoiceDetail> SezInvoiceDetails { get; set; }

    public virtual DbSet<SezInvoiceItemTypeM> SezInvoiceItemTypeMs { get; set; }

    public virtual DbSet<SezJobDetail> SezJobDetails { get; set; }

    public virtual DbSet<SezJobDocTypeM> SezJobDocTypeMs { get; set; }

    public virtual DbSet<SezJobMoreDetail> SezJobMoreDetails { get; set; }

    public virtual DbSet<SezPlaceOriginM> SezPlaceOriginMs { get; set; }

    public virtual DbSet<SezRequestTypeM> SezRequestTypeMs { get; set; }

    public virtual DbSet<SfPreAlertDoc> SfPreAlertDocs { get; set; }

    public virtual DbSet<SfPreAlertItem> SfPreAlertItems { get; set; }

    public virtual DbSet<Sheet1> Sheet1s { get; set; }

    public virtual DbSet<Sheet5> Sheet5s { get; set; }

    public virtual DbSet<SkfIndiaImportRegister> SkfIndiaImportRegisters { get; set; }

    public virtual DbSet<SqlServerVersion> SqlServerVersions { get; set; }

    public virtual DbSet<SrServiceRequest> SrServiceRequests { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<TblErrorLogApr2023> TblErrorLogApr2023s { get; set; }

    public virtual DbSet<TblErrorLogApr2024> TblErrorLogApr2024s { get; set; }

    public virtual DbSet<TblErrorLogApr2025> TblErrorLogApr2025s { get; set; }

    public virtual DbSet<TblErrorLogAug2023> TblErrorLogAug2023s { get; set; }

    public virtual DbSet<TblErrorLogAug2024> TblErrorLogAug2024s { get; set; }

    public virtual DbSet<TblErrorLogDec2023> TblErrorLogDec2023s { get; set; }

    public virtual DbSet<TblErrorLogDec2024> TblErrorLogDec2024s { get; set; }

    public virtual DbSet<TblErrorLogFeb2023> TblErrorLogFeb2023s { get; set; }

    public virtual DbSet<TblErrorLogFeb2024> TblErrorLogFeb2024s { get; set; }

    public virtual DbSet<TblErrorLogFeb2025> TblErrorLogFeb2025s { get; set; }

    public virtual DbSet<TblErrorLogJan2023> TblErrorLogJan2023s { get; set; }

    public virtual DbSet<TblErrorLogJan2024> TblErrorLogJan2024s { get; set; }

    public virtual DbSet<TblErrorLogJan2025> TblErrorLogJan2025s { get; set; }

    public virtual DbSet<TblErrorLogJul2024> TblErrorLogJul2024s { get; set; }

    public virtual DbSet<TblErrorLogJul2025> TblErrorLogJul2025s { get; set; }

    public virtual DbSet<TblErrorLogJun2024> TblErrorLogJun2024s { get; set; }

    public virtual DbSet<TblErrorLogMar2023> TblErrorLogMar2023s { get; set; }

    public virtual DbSet<TblErrorLogMar2024> TblErrorLogMar2024s { get; set; }

    public virtual DbSet<TblErrorLogMar2025> TblErrorLogMar2025s { get; set; }

    public virtual DbSet<TblErrorLogMay2023> TblErrorLogMay2023s { get; set; }

    public virtual DbSet<TblErrorLogMay2024> TblErrorLogMay2024s { get; set; }

    public virtual DbSet<TblErrorLogMay2025> TblErrorLogMay2025s { get; set; }

    public virtual DbSet<TblErrorLogNov2023> TblErrorLogNov2023s { get; set; }

    public virtual DbSet<TblErrorLogNov2024> TblErrorLogNov2024s { get; set; }

    public virtual DbSet<TblErrorLogOct2023> TblErrorLogOct2023s { get; set; }

    public virtual DbSet<TblErrorLogOct2024> TblErrorLogOct2024s { get; set; }

    public virtual DbSet<TblErrorLogSep2023> TblErrorLogSep2023s { get; set; }

    public virtual DbSet<TblErrorLogSep2024> TblErrorLogSep2024s { get; set; }

    public virtual DbSet<TblErrorLogTableName> TblErrorLogTableNames { get; set; }

    public virtual DbSet<TblFiscalYearMst> TblFiscalYearMsts { get; set; }

    public virtual DbSet<TblInvoiceDet> TblInvoiceDets { get; set; }

    public virtual DbSet<TblInvoiceMst> TblInvoiceMsts { get; set; }

    public virtual DbSet<TblUserLogApr2023> TblUserLogApr2023s { get; set; }

    public virtual DbSet<TblUserLogApr2024> TblUserLogApr2024s { get; set; }

    public virtual DbSet<TblUserLogApr2025> TblUserLogApr2025s { get; set; }

    public virtual DbSet<TblUserLogAug2023> TblUserLogAug2023s { get; set; }

    public virtual DbSet<TblUserLogAug2024> TblUserLogAug2024s { get; set; }

    public virtual DbSet<TblUserLogDec2023> TblUserLogDec2023s { get; set; }

    public virtual DbSet<TblUserLogDec2024> TblUserLogDec2024s { get; set; }

    public virtual DbSet<TblUserLogFeb2023> TblUserLogFeb2023s { get; set; }

    public virtual DbSet<TblUserLogFeb2024> TblUserLogFeb2024s { get; set; }

    public virtual DbSet<TblUserLogFeb2025> TblUserLogFeb2025s { get; set; }

    public virtual DbSet<TblUserLogJan2023> TblUserLogJan2023s { get; set; }

    public virtual DbSet<TblUserLogJan2024> TblUserLogJan2024s { get; set; }

    public virtual DbSet<TblUserLogJan2025> TblUserLogJan2025s { get; set; }

    public virtual DbSet<TblUserLogJul2024> TblUserLogJul2024s { get; set; }

    public virtual DbSet<TblUserLogJul2025> TblUserLogJul2025s { get; set; }

    public virtual DbSet<TblUserLogJun2024> TblUserLogJun2024s { get; set; }

    public virtual DbSet<TblUserLogMar2023> TblUserLogMar2023s { get; set; }

    public virtual DbSet<TblUserLogMar2024> TblUserLogMar2024s { get; set; }

    public virtual DbSet<TblUserLogMar2025> TblUserLogMar2025s { get; set; }

    public virtual DbSet<TblUserLogMay2023> TblUserLogMay2023s { get; set; }

    public virtual DbSet<TblUserLogMay2024> TblUserLogMay2024s { get; set; }

    public virtual DbSet<TblUserLogMay2025> TblUserLogMay2025s { get; set; }

    public virtual DbSet<TblUserLogNov2023> TblUserLogNov2023s { get; set; }

    public virtual DbSet<TblUserLogNov2024> TblUserLogNov2024s { get; set; }

    public virtual DbSet<TblUserLogOct2023> TblUserLogOct2023s { get; set; }

    public virtual DbSet<TblUserLogOct2024> TblUserLogOct2024s { get; set; }

    public virtual DbSet<TblUserLogSep2023> TblUserLogSep2023s { get; set; }

    public virtual DbSet<TblUserLogSep2024> TblUserLogSep2024s { get; set; }

    public virtual DbSet<TblUserLogTableName> TblUserLogTableNames { get; set; }

    public virtual DbSet<TempAirportCode> TempAirportCodes { get; set; }

    public virtual DbSet<TempBjv> TempBjvs { get; set; }

    public virtual DbSet<TempCheck> TempChecks { get; set; }

    public virtual DbSet<TempDispatchJob> TempDispatchJobs { get; set; }

    public virtual DbSet<TempDow> TempDows { get; set; }

    public virtual DbSet<TempExp> TempExps { get; set; }

    public virtual DbSet<TempExpFreight> TempExpFreights { get; set; }

    public virtual DbSet<TempExpHasBro> TempExpHasBros { get; set; }

    public virtual DbSet<TempExpenseDpd> TempExpenseDpds { get; set; }

    public virtual DbSet<TempExpenseEmail> TempExpenseEmails { get; set; }

    public virtual DbSet<TempHalliburtonDoc> TempHalliburtonDocs { get; set; }

    public virtual DbSet<TempLoadingPort> TempLoadingPorts { get; set; }

    public virtual DbSet<TempTdsexempt> TempTdsexempts { get; set; }

    public virtual DbSet<TempUsercount> TempUsercounts { get; set; }

    public virtual DbSet<TestEmp> TestEmps { get; set; }

    public virtual DbSet<TestMigDispatchPending> TestMigDispatchPendings { get; set; }

    public virtual DbSet<TmpAptive> TmpAptives { get; set; }

    public virtual DbSet<TopBillingJob> TopBillingJobs { get; set; }

    public virtual DbSet<TopBillingJobOld> TopBillingJobOlds { get; set; }

    public virtual DbSet<TopVehicleDetail> TopVehicleDetails { get; set; }

    public virtual DbSet<TopVehicleDetailHistory> TopVehicleDetailHistories { get; set; }

    public virtual DbSet<TopVehicleDetailHistoryOld> TopVehicleDetailHistoryOlds { get; set; }

    public virtual DbSet<TopVehicleDetailOld> TopVehicleDetailOlds { get; set; }

    public virtual DbSet<TrBillApprovalHistory> TrBillApprovalHistories { get; set; }

    public virtual DbSet<TrBillReceiveStatusM> TrBillReceiveStatusMs { get; set; }

    public virtual DbSet<TrBillReceivedDetail> TrBillReceivedDetails { get; set; }

    public virtual DbSet<TrBillReceivedDetailHistory> TrBillReceivedDetailHistories { get; set; }

    public virtual DbSet<TrBillRequestDetail> TrBillRequestDetails { get; set; }

    public virtual DbSet<TrBillRequestDetailOld> TrBillRequestDetailOlds { get; set; }

    public virtual DbSet<TrBillingInstruction> TrBillingInstructions { get; set; }

    public virtual DbSet<TrBranchWsRequest> TrBranchWsRequests { get; set; }

    public virtual DbSet<TrConsolidateInstruction> TrConsolidateInstructions { get; set; }

    public virtual DbSet<TrConsolidateJobDetail> TrConsolidateJobDetails { get; set; }

    public virtual DbSet<TrConsolidateRequest> TrConsolidateRequests { get; set; }

    public virtual DbSet<TrContainerCount> TrContainerCounts { get; set; }

    public virtual DbSet<TrContainerDetail> TrContainerDetails { get; set; }

    public virtual DbSet<TrDailyStatusHistory> TrDailyStatusHistories { get; set; }

    public virtual DbSet<TrDeliveryDetail> TrDeliveryDetails { get; set; }

    public virtual DbSet<TrDocument> TrDocuments { get; set; }

    public virtual DbSet<TrEquipmentDoc> TrEquipmentDocs { get; set; }

    public virtual DbSet<TrEquipmentM> TrEquipmentMs { get; set; }

    public virtual DbSet<TrEquipmentMsShadow> TrEquipmentMsShadows { get; set; }

    public virtual DbSet<TrEwayAutTokan> TrEwayAutTokans { get; set; }

    public virtual DbSet<TrEwayBill> TrEwayBills { get; set; }

    public virtual DbSet<TrEwayBillDocument> TrEwayBillDocuments { get; set; }

    public virtual DbSet<TrEwayBillJson> TrEwayBillJsons { get; set; }

    public virtual DbSet<TrEwayLog> TrEwayLogs { get; set; }

    public virtual DbSet<TrEwayLogin> TrEwayLogins { get; set; }

    public virtual DbSet<TrEwayProductM> TrEwayProductMs { get; set; }

    public virtual DbSet<TrEwayStatusHistory> TrEwayStatusHistories { get; set; }

    public virtual DbSet<TrEwayTypeM> TrEwayTypeMs { get; set; }

    public virtual DbSet<TrEwayVehicleLog> TrEwayVehicleLogs { get; set; }

    public virtual DbSet<TrExpenseCategory> TrExpenseCategories { get; set; }

    public virtual DbSet<TrMaintenanceCategory> TrMaintenanceCategories { get; set; }

    public virtual DbSet<TrMaintenanceEmp> TrMaintenanceEmps { get; set; }

    public virtual DbSet<TrMaintenanceExpense> TrMaintenanceExpenses { get; set; }

    public virtual DbSet<TrMaintenanceExpenseShadow> TrMaintenanceExpenseShadows { get; set; }

    public virtual DbSet<TrMaintenanceMistake> TrMaintenanceMistakes { get; set; }

    public virtual DbSet<TrMaintenanceWork> TrMaintenanceWorks { get; set; }

    public virtual DbSet<TrMaintenanceWorkShadow> TrMaintenanceWorkShadows { get; set; }

    public virtual DbSet<TrMigvehicleExp> TrMigvehicleExps { get; set; }

    public virtual DbSet<TrPackingListDoc> TrPackingListDocs { get; set; }

    public virtual DbSet<TrRequestReceived> TrRequestReceiveds { get; set; }

    public virtual DbSet<TrTestExpenseEntry> TrTestExpenseEntries { get; set; }

    public virtual DbSet<TrTransBillDetail> TrTransBillDetails { get; set; }

    public virtual DbSet<TrTransBillDetailShadow> TrTransBillDetailShadows { get; set; }

    public virtual DbSet<TrTransChargeType> TrTransChargeTypes { get; set; }

    public virtual DbSet<TrTransCustomerBill> TrTransCustomerBills { get; set; }

    public virtual DbSet<TrTransMovement> TrTransMovements { get; set; }

    public virtual DbSet<TrTransRateDetail> TrTransRateDetails { get; set; }

    public virtual DbSet<TrTransRateDetailShadow> TrTransRateDetailShadows { get; set; }

    public virtual DbSet<TrTransRateItem> TrTransRateItems { get; set; }

    public virtual DbSet<TrTransportAddressDetail> TrTransportAddressDetails { get; set; }

    public virtual DbSet<TrTransportM> TrTransportMs { get; set; }

    public virtual DbSet<TrTransportRateDetail> TrTransportRateDetails { get; set; }

    public virtual DbSet<TrTransportVendor> TrTransportVendors { get; set; }

    public virtual DbSet<TrTransporterPlaced> TrTransporterPlaceds { get; set; }

    public virtual DbSet<TrTruckRequest> TrTruckRequests { get; set; }

    public virtual DbSet<TrVardiExpenseApproval> TrVardiExpenseApprovals { get; set; }

    public virtual DbSet<TrVehicleDailyStatus> TrVehicleDailyStatuses { get; set; }

    public virtual DbSet<TrVehicleDailyStatusShadow> TrVehicleDailyStatusShadows { get; set; }

    public virtual DbSet<TrVehicleDriver> TrVehicleDrivers { get; set; }

    public virtual DbSet<TrVehicleExpense> TrVehicleExpenses { get; set; }

    public virtual DbSet<TrVehicleExpenseDel> TrVehicleExpenseDels { get; set; }

    public virtual DbSet<TrVehicleFuel> TrVehicleFuels { get; set; }

    public virtual DbSet<TrVehicleRateExpense> TrVehicleRateExpenses { get; set; }

    public virtual DbSet<TrVehicleRevenue> TrVehicleRevenues { get; set; }

    public virtual DbSet<TrVehicleSellingDetail> TrVehicleSellingDetails { get; set; }

    public virtual DbSet<TrVehicleStatusM> TrVehicleStatusMs { get; set; }

    public virtual DbSet<TrVehicleTravelLog> TrVehicleTravelLogs { get; set; }

    public virtual DbSet<TrsApibankTransaction> TrsApibankTransactions { get; set; }

    public virtual DbSet<TrsApibankTransactionError> TrsApibankTransactionErrors { get; set; }

    public virtual DbSet<TrsApibankTransactionShadow> TrsApibankTransactionShadows { get; set; }

    public virtual DbSet<TrsAutoTransportPost> TrsAutoTransportPosts { get; set; }

    public virtual DbSet<TrsCustomerBillDetail> TrsCustomerBillDetails { get; set; }

    public virtual DbSet<TrsCustomerBillM> TrsCustomerBillMs { get; set; }

    public virtual DbSet<TrsDraftFinalDetail> TrsDraftFinalDetails { get; set; }

    public virtual DbSet<TrsStatusM> TrsStatusMs { get; set; }

    public virtual DbSet<TrsTransBuyDetail> TrsTransBuyDetails { get; set; }

    public virtual DbSet<TsRemainderLog> TsRemainderLogs { get; set; }

    public virtual DbSet<TsReminderCategoriesM> TsReminderCategoriesMs { get; set; }

    public virtual DbSet<TsReminderUser> TsReminderUsers { get; set; }

    public virtual DbSet<TsTaskReminder> TsTaskReminders { get; set; }

    public virtual DbSet<TstAptiv> TstAptivs { get; set; }

    public virtual DbSet<TstConsigneeM> TstConsigneeMs { get; set; }

    public virtual DbSet<TstDodetail> TstDodetails { get; set; }

    public virtual DbSet<TstPaneltyDetail> TstPaneltyDetails { get; set; }

    public virtual DbSet<TstPaneltyM> TstPaneltyMs { get; set; }

    public virtual DbSet<TwTransportMss> TwTransportMsses { get; set; }

    public virtual DbSet<TwVehicleDetail> TwVehicleDetails { get; set; }

    public virtual DbSet<TypeofBefactoryStuffed> TypeofBefactoryStuffeds { get; set; }

    public virtual DbSet<ViewImportDatum> ViewImportData { get; set; }

    public virtual DbSet<VnAccountDetail> VnAccountDetails { get; set; }

    public virtual DbSet<VnAccountDetailsM> VnAccountDetailsMs { get; set; }

    public virtual DbSet<VnAccountTypeM> VnAccountTypeMs { get; set; }

    public virtual DbSet<VnDivisionTypeM> VnDivisionTypeMs { get; set; }

    public virtual DbSet<VnDocumentPath> VnDocumentPaths { get; set; }

    public virtual DbSet<VnGstregType> VnGstregTypes { get; set; }

    public virtual DbSet<VnKycDetailsMsDel> VnKycDetailsMsDels { get; set; }

    public virtual DbSet<VnKycHistory> VnKycHistories { get; set; }

    public virtual DbSet<VnKycdocm> VnKycdocms { get; set; }

    public virtual DbSet<VnKycstatusM> VnKycstatusMs { get; set; }

    public virtual DbSet<VnVendorKycm> VnVendorKycms { get; set; }

    public virtual DbSet<VnVendorTypeM> VnVendorTypeMs { get; set; }

    public virtual DbSet<VwCustJobDetail> VwCustJobDetails { get; set; }

    public virtual DbSet<VwCustJobDetailOld> VwCustJobDetailOlds { get; set; }

    public virtual DbSet<VwExJobDetail> VwExJobDetails { get; set; }

    public virtual DbSet<VwJobAgingDatum> VwJobAgingData { get; set; }

    public virtual DbSet<VwJobDetail> VwJobDetails { get; set; }

    public virtual DbSet<VwJobDetailCust> VwJobDetailCusts { get; set; }

    public virtual DbSet<VwJobDetailInvoice> VwJobDetailInvoices { get; set; }

    public virtual DbSet<VwJobDetailLgnew> VwJobDetailLgnews { get; set; }

    public virtual DbSet<VwJobDetailLgnewDel> VwJobDetailLgnewDels { get; set; }

    public virtual DbSet<VwJobDetailMultiRow> VwJobDetailMultiRows { get; set; }

    public virtual DbSet<VwJobDetailTran> VwJobDetailTrans { get; set; }

    public virtual DbSet<VwReportJob> VwReportJobs { get; set; }

    public virtual DbSet<VwSezjobDetail> VwSezjobDetails { get; set; }

    public virtual DbSet<VwWabTecDsrReport> VwWabTecDsrReports { get; set; }

    public virtual DbSet<VwjobDetailforBillingTurnaround> VwjobDetailforBillingTurnarounds { get; set; }

    public virtual DbSet<WaMessageLog> WaMessageLogs { get; set; }

    public virtual DbSet<WhatsAppCallbackContact> WhatsAppCallbackContacts { get; set; }

    public virtual DbSet<WhatsAppCallbackError> WhatsAppCallbackErrors { get; set; }

    public virtual DbSet<WhatsAppIncomingMessage> WhatsAppIncomingMessages { get; set; }

    public virtual DbSet<WhatsAppMessageStatus> WhatsAppMessageStatuses { get; set; }

    public virtual DbSet<WhatsAppStatus> WhatsAppStatuses { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=192.168.6.98;Initial Catalog=ImportUAT;User Id=sa;Password=sa; TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<Abc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("abc");

            entity.Property(e => e.Lid)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<AcAccountCodeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_AccountCodeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LedgeCode).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SCode)
                .HasMaxLength(500)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(500)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AcApibankAccount>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_APIBankAccount");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.AccountType).HasMaxLength(50);
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.CustomerId).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SyncDate)
                .HasComment("Bank Statment sync date for Blank Cheque Details")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcApibankLogin>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_APIBankLogin");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Apikey)
                .HasMaxLength(500)
                .HasColumnName("APIKey");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .HasColumnName("APIName");
            entity.Property(e => e.Apisecret)
                .HasMaxLength(50)
                .HasColumnName("APISecret");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(10);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
        });

        modelBuilder.Entity<AcApibankStatementLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_APIBankStatementLog");

            entity.HasIndex(e => new { e.BankAccountId, e.RefChqNum, e.CodTxnLiteral, e.BDel }, "ix_AC_APIBankStatementLog_BankAccountID_ref_chq_num_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AmtDeposit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("amt_deposit");
            entity.Property(e => e.AmtWithdrawal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("amt_withdrawal");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.CodTxnLiteral)
                .HasMaxLength(50)
                .HasColumnName("cod_txn_literal");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.RefChqNum).HasColumnName("ref_chq_num");
            entity.Property(e => e.RefUsrNo)
                .HasMaxLength(100)
                .HasColumnName("ref_usr_no");
            entity.Property(e => e.TxnDate)
                .HasColumnType("datetime")
                .HasColumnName("txn_date");
            entity.Property(e => e.TxnDesc)
                .HasMaxLength(200)
                .HasColumnName("txn_desc");
            entity.Property(e => e.ValidationFlag).HasComment(" 0 - Not Validated, 1 - Valid, 2 Invalid Amount");
        });

        modelBuilder.Entity<AcApibankStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_APIBankStatus");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.SDescription)
                .HasMaxLength(200)
                .HasColumnName("sDescription");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(400)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<AcApibankTransaction>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_APIBankTransaction", tb =>
                {
                    tb.HasTrigger("tr_AC_APIBankTransaction_Delete");
                    tb.HasTrigger("tr_AC_APIBankTransaction_Insert");
                    tb.HasTrigger("tr_AC_APIBankTransaction_Update");
                });

            entity.HasIndex(e => new { e.PaymentRequestId, e.IsSuccess, e.BDel }, "ix_AC_APIBankTransaction_PaymentRequestId_IsSuccess_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReqReferenceNo, e.BDel }, "ix_AC_APIBankTransaction_ReqReferenceNo_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CreditorAccountIfsc)
                .HasMaxLength(50)
                .HasColumnName("CreditorAccountIFSC");
            entity.Property(e => e.CreditorAccountName).HasMaxLength(100);
            entity.Property(e => e.CreditorAccountNo).HasMaxLength(50);
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsSuccess).HasComment("Null - Payment In Process, 0 - Payment Failed, 1 Payment Success");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReqDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReqReferenceNo).HasMaxLength(100);
            entity.Property(e => e.RespDate).HasColumnType("datetime");
            entity.Property(e => e.RespReferenceNo).HasMaxLength(100);
            entity.Property(e => e.RespStatus).HasMaxLength(100);
            entity.Property(e => e.StatusId).HasComment("Bank Response Status");
            entity.Property(e => e.UniqueReferenceNo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<AcApibankTransactionDel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AC_APIBankTransaction_Del");

            entity.Property(e => e.AttemptNo).HasColumnName("attemptNo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.ReqTransferType)
                .HasMaxLength(50)
                .HasColumnName("reqTransferType");
            entity.Property(e => e.RequestReferenceNo)
                .HasMaxLength(50)
                .HasColumnName("requestReferenceNo");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(50)
                .HasColumnName("statusCode");
            entity.Property(e => e.SubStatusCode)
                .HasMaxLength(50)
                .HasColumnName("subStatusCode");
            entity.Property(e => e.SubStatusText)
                .HasMaxLength(50)
                .HasColumnName("subStatusText");
            entity.Property(e => e.UniqueResponseNo)
                .HasMaxLength(50)
                .HasColumnName("uniqueResponseNo");
        });

        modelBuilder.Entity<AcApibankTransactionError>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_APIBankTransactionError");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ErrorActionCode).HasMaxLength(200);
            entity.Property(e => e.ErrorActionDescription).HasMaxLength(200);
            entity.Property(e => e.ErrorCode).HasMaxLength(50);
            entity.Property(e => e.ErrorId).HasMaxLength(50);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.TransactionId).HasComment("Primery Key - lid - Table Name - AC_APIBankTransaction");
        });

        modelBuilder.Entity<AcApibankTransactionShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("AC_APIBankTransaction_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CreditorAccountIfsc)
                .HasMaxLength(100)
                .HasColumnName("CreditorAccountIFSC");
            entity.Property(e => e.CreditorAccountName).HasMaxLength(200);
            entity.Property(e => e.CreditorAccountNo).HasMaxLength(100);
            entity.Property(e => e.Currency).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.ReqReferenceNo).HasMaxLength(200);
            entity.Property(e => e.RespDate).HasColumnType("datetime");
            entity.Property(e => e.RespReferenceNo).HasMaxLength(200);
            entity.Property(e => e.RespStatus).HasMaxLength(200);
            entity.Property(e => e.UniqueReferenceNo).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<AcApiglobalId>(entity =>
        {
            entity.HasKey(e => e.TransactionId);

            entity.ToTable("AC_APIGlobalID");

            entity.Property(e => e.TransactionId).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.RequestId).HasColumnName("RequestID");
        });

        modelBuilder.Entity<AcBankBookM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_BankBookMaster");

            entity.ToTable("AC_BankBookMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankApiid).HasColumnName("BankAPIId");
            entity.Property(e => e.BankId).HasComment("BankID - PK - BJV_BankMS");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(50)
                .HasColumnName("GSTIN");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.LType)
                .HasDefaultValue(0)
                .HasComment("1 - Bank Book, 2- Cash Book")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(150)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AcBankChequeJobNo>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_BankChequeJobNo");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChequeAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ChequeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceId).HasDefaultValue(0);
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("1- Vendor Invoice Pending, 0 Vendor Invoice Submitted");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcBankChequeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_BankChequeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChequeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ChequeDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsChequeIssued).HasComment("default false- Cheque is not issued against Job");
            entity.Property(e => e.LStatus)
                .HasDefaultValue(0)
                .HasComment("1 - Cleared, 5 - Cancelled")
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcCashBookM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_CashBookMaster");

            entity.ToTable("AC_CashBookMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(50)
                .HasColumnName("GSTIN");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(250)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AcConsolidateJob>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_ConsolidateJobs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<AcExpenseDocDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_ExpenseDocDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(250);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(250);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<AcExpenseStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_ExpenseStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AcExpenseTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_ExpenseTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CatgName).HasMaxLength(150);
            entity.Property(e => e.ChargeCode).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsncode)
                .HasMaxLength(50)
                .HasColumnName("HSNCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(450)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AcFachequeDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_FAChequeDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(50);
            entity.Property(e => e.ChequeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ChequeDate).HasColumnType("datetime");
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<AcFachequeIssue>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_FAChequeIssue");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PayTo).HasMaxLength(100);
            entity.Property(e => e.PayToCode).HasMaxLength(50);
        });

        modelBuilder.Entity<AcFaexpenseBooking>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_FAExpenseBooking");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChequeIssueId).HasColumnName("ChequeIssueID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.PaidToCode).HasMaxLength(50);
            entity.Property(e => e.PayModeId).HasColumnName("PayModeID");
            entity.Property(e => e.RimorAg)
                .HasComment("1 RIM, 2 AG")
                .HasColumnName("RIMorAG");
        });

        modelBuilder.Entity<AcFaexpenseBookingAg>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_FA_ExpenseBookingAG");

            entity.ToTable("AC_FAExpenseBookingAG");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AgencyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApprovalFilePath).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChargeCode).HasMaxLength(50);
            entity.Property(e => e.ChargeName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PartyChargeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ServiceRemark).HasMaxLength(100);
        });

        modelBuilder.Entity<AcFaexpenseBookingRim>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_FA_ExpenseBookingRIM");

            entity.ToTable("AC_FAExpenseBookingRIM");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cgst).HasColumnName("CGST");
            entity.Property(e => e.ChargeCode).HasMaxLength(50);
            entity.Property(e => e.ChargeName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(50)
                .HasColumnName("GSTIN");
            entity.Property(e => e.Igst).HasColumnName("IGST");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.InvoiceTaxableAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceTotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Narration).HasMaxLength(200);
            entity.Property(e => e.ReceiptNumber).HasMaxLength(50);
            entity.Property(e => e.Sgst).HasColumnName("SGST");
            entity.Property(e => e.VendorCode).HasMaxLength(50);
            entity.Property(e => e.VendorName).HasMaxLength(100);
        });

        modelBuilder.Entity<AcInvoiceLedgerDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AC_InvoiceLedgerDetail");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CgstparCodeId)
                .HasMaxLength(50)
                .HasColumnName("cgstpar_codeID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IgstparCodeId)
                .HasMaxLength(50)
                .HasColumnName("igstpar_codeID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.RcmIgstparCodeId)
                .HasMaxLength(50)
                .HasColumnName("rcmIGStpar_codeID");
            entity.Property(e => e.RcmcgstparCodeId)
                .HasMaxLength(50)
                .HasColumnName("rcmcgstpar_codeID");
            entity.Property(e => e.RcmsgstparCodeId)
                .HasMaxLength(50)
                .HasColumnName("rcmsgstpar_codeID");
            entity.Property(e => e.SgstparCodeId)
                .HasMaxLength(50)
                .HasColumnName("sgstpar_codeID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcMemoStatusHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AC_MemoStatusHistory");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<AcPaymentDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_PaymentDetail", tb =>
                {
                    tb.HasTrigger("tr_AC_PaymentDetail_Delete");
                    tb.HasTrigger("tr_AC_PaymentDetail_Insert");
                    tb.HasTrigger("tr_AC_PaymentDetail_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankCode).HasMaxLength(50);
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BatchPayDate).HasColumnType("datetime");
            entity.Property(e => e.BjvpaymentFlagBy)
                .HasComment("0 - Pending, 1 - Live Tracking, 2 FA System")
                .HasColumnName("BJVPaymentFlagBy");
            entity.Property(e => e.BjvpaymentFlagDate)
                .HasColumnType("datetime")
                .HasColumnName("BJVPaymentFlagDate");
            entity.Property(e => e.BjvpaymentNo)
                .HasMaxLength(20)
                .HasColumnName("BJVPaymentNo");
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InstrumentDate).HasColumnType("datetime");
            entity.Property(e => e.InstrumentNo).HasMaxLength(50);
            entity.Property(e => e.IsBjvpaymentFlag)
                .HasComment("Flag Status - 0 - Pending, 1 Flagged,2 Not Flagged, 3 -- Flag Checking Error, 4 Moved To Access Payment")
                .HasColumnName("IsBJVPaymentFlag");
            entity.Property(e => e.IsFundTransFromApi).HasColumnName("IsFundTransFromAPI");
            entity.Property(e => e.IsMailSent)
                .HasDefaultValue(false)
                .HasComment("Payment Confirmation Email Sent Status");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PayMemoId)
                .HasDefaultValue(0)
                .HasColumnName("PayMemoID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.RequestRefNo).HasMaxLength(50);
            entity.Property(e => e.SrNo).HasDefaultValue(1);
            entity.Property(e => e.TransactionStatus).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentDetail1>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_CashAdtnlDetails");

            entity.ToTable("AC_PaymentDetails");

            entity.HasIndex(e => new { e.PaymentId, e.BDel }, "ix_AC_PaymentDetails_PaymentId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AcpnonAcp).HasColumnName("ACPNonACP");
            entity.Property(e => e.AssessableValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(450);
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.CustomDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Favouring).HasMaxLength(250);
            entity.Property(e => e.Gstno)
                .HasMaxLength(50)
                .HasColumnName("GSTNo");
            entity.Property(e => e.InterestAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PenaltyAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PenaltyAppMail).HasMaxLength(300);
            entity.Property(e => e.PenaltyCopyPath).HasMaxLength(300);
            entity.Property(e => e.PoddocPath)
                .HasMaxLength(300)
                .HasColumnName("PODDocPath");
            entity.Property(e => e.Rate).HasMaxLength(50);
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(650);
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Tr6challenNo)
                .HasMaxLength(50)
                .HasColumnName("TR6ChallenNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VoucherNo).HasMaxLength(100);
        });

        modelBuilder.Entity<AcPaymentDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("AC_PaymentDetail_shadow");

            entity.Property(e => e.AccountNo).HasMaxLength(100);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankCode).HasMaxLength(100);
            entity.Property(e => e.BankName).HasMaxLength(200);
            entity.Property(e => e.BatchPayDate).HasColumnType("datetime");
            entity.Property(e => e.BjvpaymentFlagBy).HasColumnName("BJVPaymentFlagBy");
            entity.Property(e => e.BjvpaymentFlagDate)
                .HasColumnType("datetime")
                .HasColumnName("BJVPaymentFlagDate");
            entity.Property(e => e.BjvpaymentNo)
                .HasMaxLength(40)
                .HasColumnName("BJVPaymentNo");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InstrumentDate).HasColumnType("datetime");
            entity.Property(e => e.InstrumentNo).HasMaxLength(100);
            entity.Property(e => e.IsBjvpaymentFlag).HasColumnName("IsBJVPaymentFlag");
            entity.Property(e => e.IsFundTransFromApi).HasColumnName("IsFundTransFromAPI");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PayMemoId).HasColumnName("PayMemoID");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RequestRefNo).HasMaxLength(100);
            entity.Property(e => e.TransactionStatus).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentExpense>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_JobExpenseDetails");

            entity.ToTable("AC_PaymentExpenses");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccodeId).HasColumnName("ACCodeId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Credit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Debit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_PaymentItem");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Cgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGSTAmount");
            entity.Property(e => e.CgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_codeID");
            entity.Property(e => e.Cgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CGSTRate");
            entity.Property(e => e.ChargeCode).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsn)
                .HasMaxLength(20)
                .HasColumnName("HSN");
            entity.Property(e => e.Igstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGSTAmount");
            entity.Property(e => e.IgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("igstpar_codeID");
            entity.Property(e => e.Igstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IGSTRate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherDeduction)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.RcmIgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_codeID");
            entity.Property(e => e.Rcmamount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMAmount");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_codeID");
            entity.Property(e => e.RcmgstType)
                .HasDefaultValue(0)
                .HasComment("1-IGST, 2 CGST and SGST")
                .HasColumnName("RCMGstType");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_codeID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Sgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGSTAmount");
            entity.Property(e => e.SgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_codeID");
            entity.Property(e => e.Sgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SGSTRate");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType)
                .HasDefaultValue(0)
                .HasColumnName("TDSRateType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentMemo>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_PaymentMemo", tb =>
                {
                    tb.HasTrigger("tr_AC_PaymentMemo_Delete");
                    tb.HasTrigger("tr_AC_PaymentMemo_Insert");
                    tb.HasTrigger("tr_AC_PaymentMemo_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BranchId).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinYearId).HasDefaultValue(10);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MemoAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MemoAuditDate).HasColumnType("datetime");
            entity.Property(e => e.PayDate).HasColumnType("datetime");
            entity.Property(e => e.PayMemoRefNo).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.TotalBuyValue)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalRequest).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentMemoShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("AC_PaymentMemo_shadow");

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.MemoAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MemoAuditDate).HasColumnType("datetime");
            entity.Property(e => e.PayDate).HasColumnType("datetime");
            entity.Property(e => e.PayMemoRefNo).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.TotalBuyValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentRequest>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_AC_NewEnquiry");

            entity.ToTable("AC_PaymentRequest", tb =>
                {
                    tb.HasTrigger("tr_AC_PaymentRequest_Delete");
                    tb.HasTrigger("tr_AC_PaymentRequest_Insert");
                    tb.HasTrigger("tr_AC_PaymentRequest_Update");
                });

            entity.HasIndex(e => new { e.JobId, e.BDel, e.ModuleId }, "ix_AC_PaymentRequest_JobId_bDel_ModuleId_includes");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdvanceAmt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AdvanceTds)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AdvanceTDS");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillId).HasDefaultValue(0);
            entity.Property(e => e.Bjvjbnumber)
                .HasMaxLength(50)
                .HasColumnName("BJVJBNumber");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FarefNo)
                .HasMaxLength(50)
                .HasColumnName("FARefNo");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsBjvjbbooking).HasColumnName("IsBJVJBBooking");
            entity.Property(e => e.IsBjvpaymentPosting).HasColumnName("isBJVPaymentPosting");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(450);
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsapplicable)
                .HasDefaultValue(false)
                .HasColumnName("TDSApplicable");
            entity.Property(e => e.TdsledgerCode)
                .HasMaxLength(50)
                .HasColumnName("TDSLedgerCode");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType).HasColumnName("TDSRateType");
            entity.Property(e => e.TdstotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSTotalAmount");
            entity.Property(e => e.TotalAmnt)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Amnt");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentRequestShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("AC_PaymentRequest_shadow");

            entity.Property(e => e.AdvanceAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FarefNo)
                .HasMaxLength(50)
                .HasColumnName("FARefNo");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.IsBjvpaymentPosting).HasColumnName("isBJVPaymentPosting");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidTo).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(900);
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsapplicable).HasColumnName("TDSApplicable");
            entity.Property(e => e.TdsledgerCode)
                .HasMaxLength(100)
                .HasColumnName("TDSLedgerCode");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType).HasColumnName("TDSRateType");
            entity.Property(e => e.TdstotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSTotalAmount");
            entity.Property(e => e.TotalAmnt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Amnt");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_PaymentStatus");

            entity.HasIndex(e => new { e.PaymentId, e.IsActive, e.BDel }, "ix_AC_PaymentStatus_PaymentId_IsActive_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
        });

        modelBuilder.Entity<AcPaymentTd>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_PaymentTDS", tb =>
                {
                    tb.HasTrigger("tr_AC_PaymentTDS_Delete");
                    tb.HasTrigger("tr_AC_PaymentTDS_Insert");
                    tb.HasTrigger("tr_AC_PaymentTDS_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.TaxableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentTdsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("AC_PaymentTDS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.TaxableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AcPaymentTypeM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AC_PaymentTypeMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AcRequestTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AC_RequestTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChargeCode).HasMaxLength(20);
            entity.Property(e => e.ChargeHsn)
                .HasMaxLength(20)
                .HasColumnName("ChargeHSN");
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(150)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<AdBilledJob>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AD_BilledJobs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
        });

        modelBuilder.Entity<AdJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AD_JobDetail");

            entity.HasIndex(e => new { e.ActualJobId, e.MoveToBilling, e.BDel }, "ix_AD_JobDetail_ActualJobId_MoveToBilling_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.BDel, e.JobRefNo }, "ix_AD_JobDetail_bDel_JobRefNo").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ActualJobRefNo).HasMaxLength(50);
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Branchid).HasColumnName("BRANCHID");
            entity.Property(e => e.CreditAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CustRefNo).HasMaxLength(100);
            entity.Property(e => e.DebitAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileDirName).HasMaxLength(50);
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GROSS WEIGHT");
            entity.Property(e => e.Gstno)
                .HasMaxLength(20)
                .HasColumnName("GSTNo");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.JobType).HasDefaultValue(1);
            entity.Property(e => e.Kamid).HasColumnName("KAMId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mode).HasColumnName("MODE");
            entity.Property(e => e.MovedDate).HasColumnType("datetime");
            entity.Property(e => e.NoOfPackages).HasColumnName("NO OF PACKAGES");
            entity.Property(e => e.Port).HasColumnName("PORT");
            entity.Property(e => e.Remark).HasMaxLength(350);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AdJobExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("AD_JobExpenseDetail");

            entity.HasIndex(e => e.JobId, "ix_AD_JobExpenseDetail_JobId_includes");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(0)
                .HasColumnName("bdel");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(50)
                .HasColumnName("BJVNO");
            entity.Property(e => e.Chqdate).HasColumnName("CHQDATE");
            entity.Property(e => e.Chqno)
                .HasMaxLength(100)
                .HasColumnName("CHQNO");
            entity.Property(e => e.Contraname)
                .HasMaxLength(100)
                .HasColumnName("CONTRANAME");
            entity.Property(e => e.Creditamt).HasColumnName("CREDITAMT");
            entity.Property(e => e.Debitamt).HasColumnName("DEBITAMT");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.Vchdate).HasColumnName("VCHDATE");
            entity.Property(e => e.Vchno)
                .HasMaxLength(100)
                .HasColumnName("VCHNO");
        });

        modelBuilder.Entity<AdmExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ADM_ExpenseDetail");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AdmExpenseM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ADM_ExpenseMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AdmVoucherDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ADM_VoucherDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillType).HasDefaultValue(0);
            entity.Property(e => e.Bjvjbnumber)
                .HasMaxLength(20)
                .HasColumnName("BJVJBNumber");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Cgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGST");
            entity.Property(e => e.CompanyCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.ConsigneePan)
                .HasMaxLength(50)
                .HasColumnName("ConsigneePAN");
            entity.Property(e => e.DocDir).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.ExpenseTypeId).HasDefaultValue(0);
            entity.Property(e => e.FinYear).HasDefaultValue(12);
            entity.Property(e => e.FinalInvoiceId).HasDefaultValue(0);
            entity.Property(e => e.Gstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTAmount");
            entity.Property(e => e.Gstno)
                .HasMaxLength(100)
                .HasColumnName("GSTNo");
            entity.Property(e => e.Gstrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTRate");
            entity.Property(e => e.Hodid)
                .HasDefaultValue(0)
                .HasColumnName("HODID");
            entity.Property(e => e.Igst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST");
            entity.Property(e => e.InvoiceMode).HasDefaultValue(1);
            entity.Property(e => e.IsBjvjbposting).HasColumnName("IsBJVJBPosting");
            entity.Property(e => e.IsBjvpaymentPosting).HasColumnName("isBJVPaymentPosting");
            entity.Property(e => e.IsFinalInvoicePending).HasDefaultValue(false);
            entity.Property(e => e.IsImmediatePayment).HasDefaultValue(true);
            entity.Property(e => e.IsNoItc)
                .HasDefaultValue(false)
                .HasColumnName("IsNoITC");
            entity.Property(e => e.IsNoItcrcm)
                .HasDefaultValue(false)
                .HasColumnName("IsNoITCRCM");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRequiredDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTerms).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeId).HasDefaultValue(0);
            entity.Property(e => e.ProformaInvoiceId).HasDefaultValue(0);
            entity.Property(e => e.Rcmapplicable)
                .HasDefaultValue(false)
                .HasColumnName("RCMApplicable");
            entity.Property(e => e.RcmgstType)
                .HasDefaultValue(0)
                .HasColumnName("RCMGstType");
            entity.Property(e => e.RcmledgerCode)
                .HasMaxLength(50)
                .HasColumnName("RCMLedgerCode");
            entity.Property(e => e.Rcmrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.RcmtotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMTotalAmount");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Sgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGST");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsapplicable)
                .HasDefaultValue(false)
                .HasColumnName("TDSApplicable");
            entity.Property(e => e.TdsexemptReasonId).HasColumnName("TDSExemptReasonID");
            entity.Property(e => e.TdsledgerCode)
                .HasMaxLength(50)
                .HasColumnName("TDSLedgerCode");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType)
                .HasDefaultValue(0)
                .HasColumnName("TDSRateType");
            entity.Property(e => e.TdstotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSTotalAmount");
            entity.Property(e => e.TokanNo).HasMaxLength(100);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransactionTypeId).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorCategoryId).HasColumnName("VendorCategoryID");
            entity.Property(e => e.VendorCode).HasMaxLength(50);
            entity.Property(e => e.VendorGstntype).HasColumnName("VendorGSTNType");
            entity.Property(e => e.VendorId)
                .HasDefaultValue(0)
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorName).HasMaxLength(100);
            entity.Property(e => e.VendorPan)
                .HasMaxLength(50)
                .HasColumnName("VendorPAN");
            entity.Property(e => e.VoucherAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VoucherCurrencyAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VoucherCurrencyExchangeRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.VoucherCurrencyId).HasDefaultValue(46);
            entity.Property(e => e.VoucherNo).HasMaxLength(100);
        });

        modelBuilder.Entity<AdmVoucherDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ADM_VoucherDoc");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.FilePath).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AdmVoucherHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ADM_VoucherHistory");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<AdmVoucherItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ADM_VoucherItem");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Cgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGSTAmount");
            entity.Property(e => e.CgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_codeID");
            entity.Property(e => e.Cgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CGSTRate");
            entity.Property(e => e.ChargeCode).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsn)
                .HasMaxLength(20)
                .HasColumnName("HSN");
            entity.Property(e => e.Igstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGSTAmount");
            entity.Property(e => e.IgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("igstpar_codeID");
            entity.Property(e => e.Igstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IGSTRate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherDeduction)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentId).HasDefaultValue(0);
            entity.Property(e => e.RcmIgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_codeID");
            entity.Property(e => e.Rcmamount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMAmount");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_codeID");
            entity.Property(e => e.RcmgstType)
                .HasDefaultValue(0)
                .HasComment("1-IGST, 2 CGST and SGST")
                .HasColumnName("RCMGstType");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_codeID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Sgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGSTAmount");
            entity.Property(e => e.SgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_codeID");
            entity.Property(e => e.Sgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SGSTRate");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType)
                .HasDefaultValue(0)
                .HasColumnName("TDSRateType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
        });

        modelBuilder.Entity<AdmVoucherPayment>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_INV_VoucherPayment");

            entity.ToTable("ADM_VoucherPayment");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankCode).HasMaxLength(50);
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BatchPayDate).HasColumnType("datetime");
            entity.Property(e => e.BjvpaymentFlagBy)
                .HasDefaultValue(0)
                .HasColumnName("BJVPaymentFlagBy");
            entity.Property(e => e.BjvpaymentFlagDate)
                .HasColumnType("datetime")
                .HasColumnName("BJVPaymentFlagDate");
            entity.Property(e => e.BjvpaymentNo)
                .HasMaxLength(20)
                .HasColumnName("BJVPaymentNo");
            entity.Property(e => e.ConsolePayId).HasColumnName("ConsolePayID");
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InstrumentDate).HasColumnType("datetime");
            entity.Property(e => e.InstrumentNo).HasMaxLength(50);
            entity.Property(e => e.IsBjvpaymentFlag).HasColumnName("IsBJVPaymentFlag");
            entity.Property(e => e.IsFundTransFromApi).HasColumnName("IsFundTransFromAPI");
            entity.Property(e => e.IsMailSent).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentCurrencyRate).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.RequestRefNo).HasMaxLength(50);
            entity.Property(e => e.SrNo).HasDefaultValue(1);
            entity.Property(e => e.TransactionStatus).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AdmVoucherTd>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ADM_VoucherTDS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.TaxableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ApiDocument>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("API_Documents");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.JobId).HasDefaultValue(0);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<AppNotificationLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("APP_NotificationLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BeSuccess).HasColumnName("beSuccess");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
        });

        modelBuilder.Entity<AppStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AppStatus");

            entity.Property(e => e.Skey)
                .HasMaxLength(100)
                .HasColumnName("skey");
        });

        modelBuilder.Entity<AppUserDeviceM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_APP_UserNotification_1");

            entity.ToTable("APP_UserDeviceMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DeviceOsid)
                .HasComment("1 => Android, 2 => IOS")
                .HasColumnName("DeviceOSId");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ImeiNo).HasMaxLength(50);
            entity.Property(e => e.TokenId).HasMaxLength(2000);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BjvAutoExpensePost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("BJV_AutoExpensePost");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.RejRemarks).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.TypeId).HasComment("1 A Labour, 2 B Labour, 10 Additional");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<BjvAutoInvoicePost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("BJV_AutoInvoicePost");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BankCommissionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BankCommissionLedgerCode).HasMaxLength(20);
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExcelType).HasMaxLength(50);
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.InvoiceType).HasMaxLength(50);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.RejRemarks).HasMaxLength(200);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<BjvAutoLabourExpPost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("BJV_AutoLabourExpPost");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExcelType).HasMaxLength(50);
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.InvoiceType).HasMaxLength(50);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.RejRemarks).HasMaxLength(200);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<BjvAutoTransportPost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("BJV_AutoTransportPost");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExcelType).HasMaxLength(50);
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.InvoiceType).HasMaxLength(50);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<BjvBankM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_BankMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(255)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BjvCurrentJob>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_CurrentJob");

            entity.HasIndex(e => new { e.Ref, e.BDel }, "ix_BJV_CurrentJob_ref_bDel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Ccm)
                .HasMaxLength(100)
                .HasColumnName("ccm");
            entity.Property(e => e.Clrdate)
                .HasColumnType("datetime")
                .HasColumnName("clrdate");
            entity.Property(e => e.DivCode)
                .HasMaxLength(100)
                .HasColumnName("div_code");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Fsb)
                .HasColumnType("datetime")
                .HasColumnName("fsb");
            entity.Property(e => e.Hod)
                .HasMaxLength(100)
                .HasColumnName("hod");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Kam)
                .HasMaxLength(100)
                .HasColumnName("kam");
            entity.Property(e => e.LocnCode)
                .HasMaxLength(100)
                .HasColumnName("locn_code");
            entity.Property(e => e.Odate)
                .HasColumnType("datetime")
                .HasColumnName("odate");
            entity.Property(e => e.ParCode)
                .HasMaxLength(100)
                .HasColumnName("Par_Code");
            entity.Property(e => e.ParName)
                .HasMaxLength(200)
                .HasColumnName("par_name");
            entity.Property(e => e.Ref)
                .HasMaxLength(100)
                .HasColumnName("ref");
            entity.Property(e => e.Remarks).HasColumnName("remarks");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.Vessal).HasMaxLength(100);
            entity.Property(e => e.Yref)
                .HasMaxLength(100)
                .HasColumnName("yref");
        });

        modelBuilder.Entity<BjvDraftFinalDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BJV_DraftFinalDetails_1");

            entity.ToTable("BJV_DraftFinalDetails", tb =>
                {
                    tb.HasTrigger("tr_BJV_DraftFinalDetails_Delete");
                    tb.HasTrigger("tr_BJV_DraftFinalDetails_Insert");
                    tb.HasTrigger("tr_BJV_DraftFinalDetails_Update");
                });

            entity.HasIndex(e => new { e.Bjvno, e.Invno, e.Invdate }, "ix_BJV_DraftFinalDetails_BJVNO_INVNO_INVDATE").HasFillFactor(100);

            entity.HasIndex(e => e.BillStatus, "ix_BJV_DraftFinalDetails_BillStatus_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.IsBill, e.Bjvno, e.DispatchStatus }, "ix_BJV_DraftFinalDetails_IsBill_BJVNO_DispatchStatus_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.IsBill, e.Bdel, e.Fldate, e.BillStatus }, "ix_BJV_DraftFinalDetails_IsBill_bdel_FLDATE_BillStatus_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobId, e.IsBill, e.Bdel, e.Fldate }, "ix_BJV_DraftFinalDetails_JobId_IsBill_bdel_FLDATE").HasFillFactor(100);

            entity.HasIndex(e => new { e.Bdel, e.IsBill, e.Fldate }, "ix_bdel_IsBillFLDATE_Includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Adjamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADJAmount");
            entity.Property(e => e.Adjdate)
                .HasColumnType("datetime")
                .HasColumnName("ADJDate");
            entity.Property(e => e.Adjno)
                .HasMaxLength(50)
                .HasColumnName("ADJNo");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(0)
                .HasColumnName("bdel");
            entity.Property(e => e.BillStatus).HasComment("1- Bill Dispatched, 2 - Bill Return, 3 - Bill Paid");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(50)
                .HasColumnName("BJVNO");
            entity.Property(e => e.ClientPortalDate).HasColumnType("datetime");
            entity.Property(e => e.ClientPortalRefNo).HasMaxLength(50);
            entity.Property(e => e.DispatchStatus)
                .HasDefaultValue(0)
                .HasComment("0- Pending,1 Dispatched, 2 - N.A.");
            entity.Property(e => e.Draftby)
                .HasMaxLength(50)
                .HasColumnName("DRAFTBY");
            entity.Property(e => e.Draftdate)
                .HasColumnType("datetime")
                .HasColumnName("DRAFTDATE");
            entity.Property(e => e.Drfcompby)
                .HasMaxLength(50)
                .HasColumnName("DRFCOMPBY");
            entity.Property(e => e.Drfcompdate)
                .HasColumnType("datetime")
                .HasColumnName("DRFCOMPDATE");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EbillDate)
                .HasColumnType("datetime")
                .HasColumnName("EBillDate");
            entity.Property(e => e.EbillStatus)
                .HasComment("0- Pending,1 EmailSent, 2 - N.A.")
                .HasColumnName("EBillStatus");
            entity.Property(e => e.Flby)
                .HasMaxLength(50)
                .HasColumnName("FLBY");
            entity.Property(e => e.Fldate)
                .HasColumnType("datetime")
                .HasColumnName("FLDATE");
            entity.Property(e => e.Invamount).HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(50)
                .HasColumnName("INVNO");
            entity.Property(e => e.IsBillReturn).HasComment("1 :- Bill Return By Customer");
            entity.Property(e => e.IsEbillFaupdate).HasColumnName("IsEBillFAUpdate");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.ModuleId)
                .HasDefaultValue(0)
                .HasColumnName("ModuleID");
            entity.Property(e => e.PortalStatus).HasComment("0- Pending,1 Bll Uploaded, 2 - N.A.");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BjvDraftFinalDetailsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BJV_DraftFinalDetails_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(200)
                .HasColumnName("BJVNO");
            entity.Property(e => e.ClientPortalDate).HasColumnType("datetime");
            entity.Property(e => e.ClientPortalRefNo).HasMaxLength(50);
            entity.Property(e => e.Draftby)
                .HasMaxLength(1000)
                .HasColumnName("DRAFTBY");
            entity.Property(e => e.Draftdate)
                .HasColumnType("datetime")
                .HasColumnName("DRAFTDATE");
            entity.Property(e => e.Drfcompby)
                .HasMaxLength(1000)
                .HasColumnName("DRFCOMPBY");
            entity.Property(e => e.Drfcompdate)
                .HasColumnType("datetime")
                .HasColumnName("DRFCOMPDATE");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EbillDate)
                .HasColumnType("datetime")
                .HasColumnName("EBillDate");
            entity.Property(e => e.EbillStatus).HasColumnName("EBillStatus");
            entity.Property(e => e.Flby)
                .HasMaxLength(1000)
                .HasColumnName("FLBY");
            entity.Property(e => e.Fldate)
                .HasColumnType("datetime")
                .HasColumnName("FLDATE");
            entity.Property(e => e.Invamount).HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(100)
                .HasColumnName("INVNO");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BjvExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BJV_ExpenseDetail_RR");

            entity.ToTable("BJV_ExpenseDetail", tb => tb.HasTrigger("BJV_ExpenseDetail_IUD"));

            entity.HasIndex(e => new { e.JobId, e.BDel, e.Bjvno, e.Vchno, e.Vchdate }, "IXD_BJVExpense_JOBID").HasFillFactor(90);

            entity.HasIndex(e => new { e.Bjvno, e.BDel }, "ix_BJV_ExpenseDetail_BJVNO_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(50)
                .HasColumnName("BJVNO");
            entity.Property(e => e.Chqdate)
                .HasColumnType("datetime")
                .HasColumnName("CHQDATE");
            entity.Property(e => e.Chqno)
                .HasMaxLength(50)
                .HasColumnName("CHQNO");
            entity.Property(e => e.Contraname)
                .HasMaxLength(100)
                .HasColumnName("CONTRANAME");
            entity.Property(e => e.Creditamt).HasColumnName("CREDITAMT");
            entity.Property(e => e.Debitamt).HasColumnName("DEBITAMT");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FacheckDate)
                .HasColumnType("datetime")
                .HasColumnName("FACheckDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.ModuleId).HasDefaultValue(0);
            entity.Property(e => e.ParCode)
                .HasMaxLength(50)
                .HasColumnName("PAR_Code");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.Vchdate).HasColumnName("VCHDATE");
            entity.Property(e => e.Vchno)
                .HasMaxLength(50)
                .HasColumnName("VCHNO");
        });

        modelBuilder.Entity<BjvJobAmount>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_JobAmount");

            entity.HasIndex(e => e.JobId, "ix_BJV_JobAmount_JobId");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Creditamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITAMT");
            entity.Property(e => e.Debitamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEBITAMT");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
        });

        modelBuilder.Entity<BjvJobStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_JobStatus", tb =>
                {
                    tb.HasTrigger("tr_BJV_JobStatus_Delete");
                    tb.HasTrigger("tr_BJV_JobStatus_Insert");
                    tb.HasTrigger("tr_BJV_JobStatus_Update");
                });

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_BJV_JobStatus_JobId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AuditRemark).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FarefNo)
                .HasMaxLength(50)
                .HasColumnName("FARefNo");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BjvJobStatusShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BJV_JobStatus_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditRemark).HasMaxLength(400);
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FarefNo)
                .HasMaxLength(100)
                .HasColumnName("FARefNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BjvLedgerCodeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_LedgerCodeMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.TypeName).HasMaxLength(50);
        });

        modelBuilder.Entity<BjvMasterInvoice>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_MasterInvoice");

            entity.HasIndex(e => new { e.Bjvno, e.Chargecode }, "ix_BJV_MasterInvoice_BJVNO_CHARGECODE").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Accode)
                .HasMaxLength(50)
                .HasColumnName("ACCODE");
            entity.Property(e => e.Advicedate).HasColumnName("ADVICEDATE");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.Assvvalue).HasColumnName("ASSVVALUE");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bedate).HasColumnName("BEDATE");
            entity.Property(e => e.Beno)
                .HasMaxLength(50)
                .HasColumnName("BENO");
            entity.Property(e => e.Billdate).HasColumnName("BILLDATE");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(50)
                .HasColumnName("BJVNO");
            entity.Property(e => e.Bldate).HasColumnName("BLDATE");
            entity.Property(e => e.Blno)
                .HasMaxLength(50)
                .HasColumnName("BLNO");
            entity.Property(e => e.Bondjobno)
                .HasMaxLength(50)
                .HasColumnName("BONDJOBNO");
            entity.Property(e => e.Cargoweight)
                .HasMaxLength(50)
                .HasColumnName("CARGOWEIGHT");
            entity.Property(e => e.Chargecode)
                .HasMaxLength(50)
                .HasColumnName("CHARGECODE");
            entity.Property(e => e.Chgname)
                .HasMaxLength(50)
                .HasColumnName("CHGNAME");
            entity.Property(e => e.Cleardate).HasColumnName("CLEARDATE");
            entity.Property(e => e.Clrndate).HasColumnName("CLRNDATE");
            entity.Property(e => e.Cnt20).HasColumnName("CNT20");
            entity.Property(e => e.Cnt40).HasColumnName("CNT40");
            entity.Property(e => e.Consdate)
                .HasMaxLength(50)
                .HasColumnName("CONSDATE");
            entity.Property(e => e.Consignor)
                .HasMaxLength(100)
                .HasColumnName("CONSIGNOR");
            entity.Property(e => e.Consno)
                .HasMaxLength(50)
                .HasColumnName("CONSNO");
            entity.Property(e => e.Conttype)
                .HasMaxLength(50)
                .HasColumnName("CONTTYPE");
            entity.Property(e => e.Costcenter1)
                .HasMaxLength(50)
                .HasColumnName("COSTCENTER1");
            entity.Property(e => e.Costcenter2)
                .HasMaxLength(50)
                .HasColumnName("COSTCENTER2");
            entity.Property(e => e.Costcenter3)
                .HasMaxLength(50)
                .HasColumnName("COSTCENTER3");
            entity.Property(e => e.Costcenter4)
                .HasMaxLength(50)
                .HasColumnName("COSTCENTER4");
            entity.Property(e => e.Curr)
                .HasMaxLength(50)
                .HasColumnName("CURR");
            entity.Property(e => e.Delvtype)
                .HasMaxLength(50)
                .HasColumnName("DELVTYPE");
            entity.Property(e => e.Destination)
                .HasMaxLength(100)
                .HasColumnName("DESTINATION");
            entity.Property(e => e.Discport)
                .HasMaxLength(50)
                .HasColumnName("DISCPORT");
            entity.Property(e => e.Divcode)
                .HasMaxLength(50)
                .HasColumnName("DIVCODE");
            entity.Property(e => e.Drate).HasColumnName("DRATE");
            entity.Property(e => e.Dt)
                .HasMaxLength(50)
                .HasColumnName("DT");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Encltype)
                .HasMaxLength(50)
                .HasColumnName("ENCLTYPE");
            entity.Property(e => e.Fcb)
                .HasMaxLength(50)
                .HasColumnName("FCB");
            entity.Property(e => e.Fsb)
                .HasMaxLength(50)
                .HasColumnName("FSB");
            entity.Property(e => e.Hawbdate).HasColumnName("HAWBDATE");
            entity.Property(e => e.Hawbno)
                .HasMaxLength(50)
                .HasColumnName("HAWBNO");
            entity.Property(e => e.Igmdate).HasColumnName("IGMDATE");
            entity.Property(e => e.Igmno)
                .HasMaxLength(50)
                .HasColumnName("IGMNO");
            entity.Property(e => e.Impexp)
                .HasMaxLength(50)
                .HasColumnName("IMPEXP");
            entity.Property(e => e.Invdate).HasColumnName("INVDATE");
            entity.Property(e => e.Invnarration)
                .HasMaxLength(200)
                .HasColumnName("INVNARRATION");
            entity.Property(e => e.Invno)
                .HasMaxLength(50)
                .HasColumnName("INVNO");
            entity.Property(e => e.Invremarks)
                .HasMaxLength(200)
                .HasColumnName("INVREMARKS");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.Loccode)
                .HasMaxLength(50)
                .HasColumnName("LOCCODE");
            entity.Property(e => e.Mainrefno)
                .HasMaxLength(50)
                .HasColumnName("MAINREFNO");
            entity.Property(e => e.Opdate).HasColumnName("OPDATE");
            entity.Property(e => e.Paidto)
                .HasMaxLength(50)
                .HasColumnName("PAIDTO");
            entity.Property(e => e.Partyref)
                .HasMaxLength(100)
                .HasColumnName("PARTYREF");
            entity.Property(e => e.Pdesc)
                .HasMaxLength(200)
                .HasColumnName("PDESC");
            entity.Property(e => e.Pkgs)
                .HasMaxLength(50)
                .HasColumnName("PKGS");
            entity.Property(e => e.Pkgtype)
                .HasMaxLength(50)
                .HasColumnName("PKGTYPE");
            entity.Property(e => e.Pono)
                .HasMaxLength(50)
                .HasColumnName("PONO");
            entity.Property(e => e.Qty)
                .HasMaxLength(200)
                .HasColumnName("QTY");
            entity.Property(e => e.Qtyunit)
                .HasMaxLength(50)
                .HasColumnName("QTYUNIT");
            entity.Property(e => e.Rate)
                .HasMaxLength(50)
                .HasColumnName("RATE");
            entity.Property(e => e.Rdate)
                .HasColumnType("datetime")
                .HasColumnName("RDATE");
            entity.Property(e => e.Recordtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RECORDTYPE");
            entity.Property(e => e.Remark1)
                .HasMaxLength(200)
                .HasColumnName("REMARK1");
            entity.Property(e => e.Remark2)
                .HasMaxLength(200)
                .HasColumnName("REMARK2");
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("RNO");
            entity.Property(e => e.Seaair)
                .HasMaxLength(50)
                .HasColumnName("SEAAIR");
            entity.Property(e => e.Seq)
                .HasMaxLength(50)
                .HasColumnName("SEQ");
            entity.Property(e => e.Shiptype)
                .HasMaxLength(50)
                .HasColumnName("SHIPTYPE");
            entity.Property(e => e.Sno)
                .HasMaxLength(50)
                .HasColumnName("SNO");
            entity.Property(e => e.Transname)
                .HasMaxLength(50)
                .HasColumnName("TRANSNAME");
            entity.Property(e => e.Vchno)
                .HasMaxLength(50)
                .HasColumnName("VCHNO");
            entity.Property(e => e.Vehicleno)
                .HasMaxLength(50)
                .HasColumnName("VEHICLENO");
            entity.Property(e => e.Vessal)
                .HasMaxLength(50)
                .HasColumnName("VESSAL");
            entity.Property(e => e.Yr).HasColumnName("YR");
        });

        modelBuilder.Entity<BjvPostingFailed>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_PostingFailed");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceId).HasColumnName("invoiceId");
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
        });

        modelBuilder.Entity<BjvProfit21022025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("'BJV_Profit_21022025'");

            entity.Property(e => e.Bascr).HasColumnName("BASCR");
            entity.Property(e => e.Bassales).HasColumnName("BASSALES");
            entity.Property(e => e.Cexpamt).HasColumnName("CEXPAMT");
            entity.Property(e => e.Cra).HasColumnName("CRA");
            entity.Property(e => e.Crga).HasColumnName("CRGA");
            entity.Property(e => e.Expamt).HasColumnName("EXPAMT");
            entity.Property(e => e.Lybascr)
                .HasMaxLength(255)
                .HasColumnName("LYBASCR");
            entity.Property(e => e.Lybassales)
                .HasMaxLength(255)
                .HasColumnName("LYBASSALES");
            entity.Property(e => e.Lyca)
                .HasMaxLength(255)
                .HasColumnName("LYCA");
            entity.Property(e => e.Lycga)
                .HasMaxLength(255)
                .HasColumnName("LYCGA");
            entity.Property(e => e.Lysa)
                .HasMaxLength(255)
                .HasColumnName("LYSA");
            entity.Property(e => e.Lysga)
                .HasMaxLength(255)
                .HasColumnName("LYSGA");
            entity.Property(e => e.MparCode)
                .HasMaxLength(255)
                .HasColumnName("MPAR_CODE");
            entity.Property(e => e.MparName)
                .HasMaxLength(255)
                .HasColumnName("MPAR_NAME");
            entity.Property(e => e.Odate)
                .HasColumnType("datetime")
                .HasColumnName("ODATE");
            entity.Property(e => e.Othamt).HasColumnName("OTHAMT");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("PAR_CODE");
            entity.Property(e => e.ParName)
                .HasMaxLength(255)
                .HasColumnName("PAR_NAME");
            entity.Property(e => e.Pexpamt).HasColumnName("PEXPAMT");
            entity.Property(e => e.Profit).HasColumnName("PROFIT");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("REF");
            entity.Property(e => e.Salesamount).HasColumnName("SALESAMOUNT");
            entity.Property(e => e.Salesgstamount).HasColumnName("SALESGSTAMOUNT");
        });

        modelBuilder.Entity<BjvTempAutoInvoicePost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("BJV_TempAutoInvoicePost");

            entity.Property(e => e.Sl).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExcelType).HasMaxLength(50);
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.InvoiceType).HasMaxLength(50);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<BjvVendorBankDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_VendorBankDetail", tb =>
                {
                    tb.HasTrigger("tr_BJV_VendorBankDetail_Delete");
                    tb.HasTrigger("tr_BJV_VendorBankDetail_Insert");
                    tb.HasTrigger("tr_BJV_VendorBankDetail_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccountName).HasMaxLength(100);
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.AccountType).HasComment("0-Any type of Payment Accepted, Other Linked To AC_RequestTypeMS ie. Duty, DO, CFS,  Detention - ");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.IsImps)
                .HasDefaultValue(true)
                .HasColumnName("IsIMPS");
            entity.Property(e => e.IsNeft)
                .HasDefaultValue(true)
                .HasColumnName("IsNEFT");
            entity.Property(e => e.IsRtgs)
                .HasDefaultValue(true)
                .HasColumnName("IsRTGS");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mmidcode)
                .HasMaxLength(50)
                .HasColumnName("MMIDCode");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorId).HasComment("Primery Key - LID - BJV_VendorMS");
        });

        modelBuilder.Entity<BjvVendorBankDetailDel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BJV_VendorBankDetail_Del");

            entity.Property(e => e.AccountName).HasMaxLength(100);
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Mmidcode)
                .HasMaxLength(50)
                .HasColumnName("MMIDCode");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BjvVendorBankDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BJV_VendorBankDetail_shadow");

            entity.Property(e => e.AccountName).HasMaxLength(200);
            entity.Property(e => e.AccountNo).HasMaxLength(100);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(100)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Mmidcode)
                .HasMaxLength(100)
                .HasColumnName("MMIDCode");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BjvVendorEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BJV_VendorEmail");

            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.SCode)
                .HasMaxLength(255)
                .HasColumnName("sCode");
        });

        modelBuilder.Entity<BjvVendorM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BJV_VendorMS", tb =>
                {
                    tb.HasTrigger("tr_BJV_VendorMS_Delete");
                    tb.HasTrigger("tr_BJV_VendorMS_Insert");
                    tb.HasTrigger("tr_BJV_VendorMS_Update");
                });

            entity.HasIndex(e => e.SCode, "ix_BJV_VendorMS_sCode");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CreditDays).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(50)
                .HasColumnName("GSTIN");
            entity.Property(e => e.IsCreditVendor).HasDefaultValue(false);
            entity.Property(e => e.IsPaymentHold)
                .HasDefaultValue(false)
                .HasComment("Payment Hold on Final Invoice Pending Against Proforma");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.Ledgcode)
                .HasMaxLength(50)
                .HasColumnName("LEDGCODE");
            entity.Property(e => e.PanNo).HasMaxLength(50);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.StateName).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorType).HasComment("1- Registered, 2 - Un-Registered, 3 - Foreign Party");
        });

        modelBuilder.Entity<BjvVendorMsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BJV_VendorMS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(100)
                .HasColumnName("GSTIN");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Ledgcode)
                .HasMaxLength(100)
                .HasColumnName("LEDGCODE");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PanNo).HasMaxLength(100);
            entity.Property(e => e.SCode)
                .HasMaxLength(100)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.StateName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<Bjvinvdet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BJVINVDET");

            entity.Property(e => e.Bjvno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BJVNO");
            entity.Property(e => e.Draftby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DRAFTBY");
            entity.Property(e => e.Draftdate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DRAFTDATE");
            entity.Property(e => e.Drfcompby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DRFCOMPBY");
            entity.Property(e => e.Drfcompdate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DRFCOMPDATE");
            entity.Property(e => e.Flby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FLBY");
            entity.Property(e => e.Fldate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FLDATE");
            entity.Property(e => e.Invamount)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INVNO");
        });

        modelBuilder.Entity<BsActivityHistoryStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ActivityHistoryStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAdhocReportCondition>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_AdhocReportCondition");

            entity.HasIndex(e => e.ReportId, "IX_BS_AdhocReportCondition_ReportId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ColumnDataType).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsAdhocReportDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_AdhocReportDetail");

            entity.HasIndex(e => e.ReportId, "IX_BS_AdhocReportDetail_ReportId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsAdhocReportM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AdhocReportMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LastReportGeneratedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.UserType)
                .HasDefaultValue(1)
                .HasComment("1 For Babaji User, 2 For Customer User and -1 for Admin User");
        });

        modelBuilder.Entity<BsAppAlert>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_AppAlerts");

            entity.Property(e => e.SSent).HasColumnName("sSent");
            entity.Property(e => e.SStatus).HasColumnName("sStatus");
        });

        modelBuilder.Entity<BsAppNotifyM>(entity =>
        {
            entity.HasKey(e => e.SType).HasName("PK__BS_AppNo__47012A9060BD35FF");

            entity.ToTable("BS_AppNotifyMS");

            entity.Property(e => e.SType)
                .ValueGeneratedNever()
                .HasColumnName("sType");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<BsAppRegister>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_AppRegister");

            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.UCompany)
                .HasMaxLength(100)
                .HasColumnName("uCompany");
            entity.Property(e => e.UDesignation)
                .HasMaxLength(50)
                .HasColumnName("uDesignation");
            entity.Property(e => e.UEmail)
                .HasMaxLength(100)
                .HasColumnName("uEmail");
            entity.Property(e => e.UName)
                .HasMaxLength(50)
                .HasColumnName("uName");
            entity.Property(e => e.UPhNo)
                .HasMaxLength(20)
                .HasColumnName("uPhNo");
        });

        modelBuilder.Entity<BsAppUserAlibaba>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AppUserAlibaba");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.UEmail)
                .HasMaxLength(50)
                .HasColumnName("uEmail");
            entity.Property(e => e.UName)
                .HasMaxLength(50)
                .HasColumnName("uName");
            entity.Property(e => e.UPhNo)
                .HasMaxLength(50)
                .HasColumnName("uPhNo");
        });

        modelBuilder.Entity<BsAutoAirBanglRule>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoAirBanglRule", tb =>
                {
                    tb.HasTrigger("DelAirBangRuleTR");
                    tb.HasTrigger("tr_BS_AutoAirBanglRule_Delete");
                    tb.HasTrigger("tr_BS_AutoAirBanglRule_Insert");
                    tb.HasTrigger("tr_BS_AutoAirBanglRule_Update");
                });

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for Standard and 2 for Additional Expense")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PaidCharges).HasComment("");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsAutoAirBanglRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoAirBanglRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeading).HasMaxLength(400);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(400)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsAutoAirBlabrRule>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoAirBLabrRule");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Charges).HasComment("");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsNonRms).HasColumnName("IsNonRMS");
            entity.Property(e => e.IsRms).HasColumnName("IsRMS");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LType)
                .HasComment("1 for Standard and 2 for Additional Expense")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoAirChennaiRule>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoAirChennaiRule", tb => tb.HasTrigger("DelAirChennaiRuleTR"));

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Charges).HasComment("");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for Standard and 2 for Additional Expense")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoAirExpenseRule>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_ExpenseRule");

            entity.ToTable("BS_AutoAirExpenseRule", tb =>
                {
                    tb.HasTrigger("DelAirMumbaiRuleTR");
                    tb.HasTrigger("tr_BS_AutoAirExpenseRule_Delete");
                    tb.HasTrigger("tr_BS_AutoAirExpenseRule_Insert");
                    tb.HasTrigger("tr_BS_AutoAirExpenseRule_Update");
                });

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Charges).HasComment("");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for Standard and 2 for Additional Expense")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.RmsnonRms)
                .HasDefaultValue(0)
                .HasComment("1- RMS, 2- NonRMS, 0 For Both")
                .HasColumnName("RMSNonRMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoAirExpenseRule20240810>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_AutoAirExpenseRule_20240810");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.RmsnonRms).HasColumnName("RMSNonRMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoAirExpenseRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoAirExpenseRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(400);
            entity.Property(e => e.RmsnonRms).HasColumnName("RMSNonRMS");
            entity.Property(e => e.SName)
                .HasMaxLength(400)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoAirHyderRule>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoAirHyderRule");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for Standard and 2 for Additional Expense")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PaidCharges).HasComment("");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsAutoAirKolkRule>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoKolkAirRule");

            entity.ToTable("BS_AutoAirKolkRule", tb => tb.HasTrigger("DelAirKolkRuleTR"));

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BetypeId).HasColumnName("BETypeId");
            entity.Property(e => e.Charges).HasComment("");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for Standard and 2 for Additional Expense")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAexpense>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobAExpense");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CfsuserId)
                .HasDefaultValue(0)
                .HasColumnName("CFSUserID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.IsApproved)
                .HasDefaultValue(0)
                .HasColumnName("isApproved");
            entity.Property(e => e.IsJbpost)
                .HasDefaultValue(false)
                .HasColumnName("IsJBPost");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SystemRefNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAirBangl>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AutoJobAirBangl", tb =>
                {
                    tb.HasTrigger("BS_BS_AutoJobAirBangl_IUD");
                    tb.HasTrigger("DelBangaloreAirExpenseTR");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenseType).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAirBlabr>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobAirBLabr");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAirChennai>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobAirChennai", tb =>
                {
                    tb.HasTrigger("BS_AutoJobAirChennai_IUD");
                    tb.HasTrigger("DelChennaiAIRExpenseTR");
                });

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAirExpense>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoJobExpense");

            entity.ToTable("BS_AutoJobAirExpense", tb =>
                {
                    tb.HasTrigger("BS_AutoJobAirExpense_IUD");
                    tb.HasTrigger("DeleteAIRExpense");
                });

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAirHyder>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobAirHyder", tb => tb.HasTrigger("BS_AutoJobAirHyder_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LicenseType).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobAirKolk>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobAirKolk", tb =>
                {
                    tb.HasTrigger("BS_AutoJobAirKolk_IUD");
                    tb.HasTrigger("DelKolkataAIRExpenseTR");
                });

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaAhmed>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AutoJobSeaAhmed");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaAnklesh>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AutoJobSeaAnklesh", tb => tb.HasTrigger("BS_AutoJobSeaAnklesh_IUD"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaBangalore>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobBangaloreExpense");

            entity.ToTable("BS_AutoJobSeaBangalore", tb =>
                {
                    tb.HasTrigger("BS_AutoJobSeaBangalore_IUD");
                    tb.HasTrigger("DelBangaloreSeaExpenseTR");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenseType).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaBangaloreTemp>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobBangaloreExpenseTemp");

            entity.ToTable("BS_AutoJobSeaBangaloreTemp");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenseType).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaBlabr>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobSeaBLabr");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaChennai>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoJobChennaiExpense");

            entity.ToTable("BS_AutoJobSeaChennai", tb =>
                {
                    tb.HasTrigger("BS_AutoJobSeaChennai_IUD");
                    tb.HasTrigger("DelChennaiSEAExpenseTR");
                });

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaDelhi>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobDelhiExpense");

            entity.ToTable("BS_AutoJobSeaDelhi", tb =>
                {
                    tb.HasTrigger("BS_AutoJobSeaDelhi_IUD");
                    tb.HasTrigger("DelDelhiSEAExpenseTR");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaExpense>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobSeaExpense", tb =>
                {
                    tb.HasTrigger("BS_AutoJobSeaExpense_IUD");
                    tb.HasTrigger("DeleteSeaExpense");
                    tb.HasTrigger("tr_BS_AutoJobSeaExpense_Delete");
                    tb.HasTrigger("tr_BS_AutoJobSeaExpense_Insert");
                    tb.HasTrigger("tr_BS_AutoJobSeaExpense_Update");
                });

            entity.HasIndex(e => e.JobId, "JobId").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CfsuserId)
                .HasDefaultValue(0)
                .HasColumnName("CFSUserID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.IsApproved)
                .HasDefaultValue(0)
                .HasColumnName("isApproved");
            entity.Property(e => e.IsJbpost)
                .HasDefaultValue(false)
                .HasColumnName("IsJBPost");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SystemRefNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaExpenseShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoJobSeaExpense_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CfsuserId).HasColumnName("CFSUserID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaHyder>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoJobSeaHyder", tb => tb.HasTrigger("BS_AutoJobSeaHyder_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaJaipur>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobJaipurExpense");

            entity.ToTable("BS_AutoJobSeaJaipur", tb => tb.HasTrigger("BS_AutoJobSeaJaipur_IUD"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaKolk>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoJobKolkSea");

            entity.ToTable("BS_AutoJobSeaKolk", tb =>
                {
                    tb.HasTrigger("BS_AutoJobSeaKolk_IUD");
                    tb.HasTrigger("DelKolkSEAExpenseTR");
                    tb.HasTrigger("tr_BS_AutoJobSeaKolk_Delete");
                    tb.HasTrigger("tr_BS_AutoJobSeaKolk_Insert");
                    tb.HasTrigger("tr_BS_AutoJobSeaKolk_Update");
                });

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaKolkShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoJobSeaKolk_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaMundra>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobMundraExpense");

            entity.ToTable("BS_AutoJobSeaMundra", tb => tb.HasTrigger("BS_AutoJobSeaMundra_IUD"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaNagpur>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AutoJobSeaNagpur");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaPipavav>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AutoJobSeaPipavav");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaPunjab>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobPunjabExpense");

            entity.ToTable("BS_AutoJobSeaPunjab", tb => tb.HasTrigger("BS_AutoJobSeaPunjab_IUD"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaVadodra>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_AutoJobSeaVADODRA");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoJobSeaVizag>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJobVizagExpense");

            entity.ToTable("BS_AutoJobSeaVizag", tb => tb.HasTrigger("BS_AutoJobSeaVizag_IUD"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaAhmedRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoAhmedExpenseRule");

            entity.ToTable("BS_AutoSeaAhmedRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Boetype).HasColumnName("BOEType");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaAnkleshRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoAnkleshExpenseRule");

            entity.ToTable("BS_AutoSeaAnkleshRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaBangaloreRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoBangaloreExpenseRule");

            entity.ToTable("BS_AutoSeaBangaloreRule", tb =>
                {
                    tb.HasTrigger("DelSeabangRuleTR");
                    tb.HasTrigger("tr_BS_AutoSeaBangaloreRule_Delete");
                    tb.HasTrigger("tr_BS_AutoSeaBangaloreRule_Insert");
                    tb.HasTrigger("tr_BS_AutoSeaBangaloreRule_Update");
                });

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType)
                .HasComment("1 - Standard, 2 - Customer Specific Charges")
                .HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaBangaloreRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoSeaBangaloreRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaBlabrRule>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoSeaBLabrRule");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Charges).HasComment("");
            entity.Property(e => e.CustomerId)
                .HasDefaultValue(0)
                .HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.NonRms)
                .HasDefaultValue(false)
                .HasColumnName("NonRMS");
            entity.Property(e => e.ReportHeading).HasMaxLength(50);
            entity.Property(e => e.Rms)
                .HasDefaultValue(false)
                .HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasComment("")
                .HasColumnName("sName");
            entity.Property(e => e.SchemeTypeId).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaChennaiRule>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoChennaiExpenseRule");

            entity.ToTable("BS_AutoSeaChennaiRule", tb =>
                {
                    tb.HasTrigger("DelChennaiRuleSEAExpenseTR");
                    tb.HasTrigger("tr_BS_AutoSeaChennaiRule_Delete");
                    tb.HasTrigger("tr_BS_AutoSeaChennaiRule_Insert");
                    tb.HasTrigger("tr_BS_AutoSeaChennaiRule_Update");
                });

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BegroupId).HasColumnName("BEGroupID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeading).HasMaxLength(50);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaChennaiRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoSeaChennaiRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BegroupId).HasColumnName("BEGroupID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaDelhiRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoDelhiExpenseRule");

            entity.ToTable("BS_AutoSeaDelhiRule", tb =>
                {
                    tb.HasTrigger("DelDelhiRuleSEAExpenseTR");
                    tb.HasTrigger("tr_BS_AutoSeaDelhiRule_Delete");
                    tb.HasTrigger("tr_BS_AutoSeaDelhiRule_Insert");
                    tb.HasTrigger("tr_BS_AutoSeaDelhiRule_Update");
                });

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaDelhiRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoSeaDelhiRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaExpenseRule>(entity =>
        {
            entity.HasKey(e => e.UniId);

            entity.ToTable("BS_AutoSeaExpenseRule", tb =>
                {
                    tb.HasTrigger("DelMumbaiRuleSEAExpenseTR");
                    tb.HasTrigger("tr_BS_AutoSeaExpenseRule_Delete");
                    tb.HasTrigger("tr_BS_AutoSeaExpenseRule_Insert");
                    tb.HasTrigger("tr_BS_AutoSeaExpenseRule_Update");
                });

            entity.Property(e => e.UniId)
                .ValueGeneratedNever()
                .HasColumnName("UniID");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasDefaultValue(5);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaExpenseRuleBk>(entity =>
        {
            entity.HasKey(e => e.UniId);

            entity.ToTable("BS_AutoSeaExpenseRuleBK");

            entity.Property(e => e.UniId)
                .ValueGeneratedNever()
                .HasColumnName("UniID");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaExpenseRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoSeaExpenseRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UniId).HasColumnName("UniID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaHyderRule>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_AutoSeaHyderRule");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaJaipurRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoJaipurExpenseRule");

            entity.ToTable("BS_AutoSeaJaipurRule", tb =>
                {
                    tb.HasTrigger("DelSeaJaipurRuleTR");
                    tb.HasTrigger("tr_BS_AutoSeaJaipurRule_Delete");
                    tb.HasTrigger("tr_BS_AutoSeaJaipurRule_Insert");
                    tb.HasTrigger("tr_BS_AutoSeaJaipurRule_Update");
                });

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaJaipurRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoSeaJaipurRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaKolkRule>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoKolkSeaRule");

            entity.ToTable("BS_AutoSeaKolkRule", tb =>
                {
                    tb.HasTrigger("DelKolkRuleSEAExpenseTR");
                    tb.HasTrigger("tr_BS_AutoSeaKolkRule_Delete");
                    tb.HasTrigger("tr_BS_AutoSeaKolkRule_Insert");
                    tb.HasTrigger("tr_BS_AutoSeaKolkRule_Update");
                });

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BetypeId)
                .HasDefaultValue(0)
                .HasColumnName("BETypeId");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.CustomerId)
                .HasDefaultValue(0)
                .HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaKolkRule202400807>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_AutoSeaKolkRule_202400807");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BetypeId).HasColumnName("BETypeId");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaKolkRuleShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_AutoSeaKolkRule_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.ReportHeading).HasMaxLength(200);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaMundraRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoMundraExpenseRule");

            entity.ToTable("BS_AutoSeaMundraRule", tb => tb.HasTrigger("DelSeaMundraRuleTR"));

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LabourTypeId).HasColumnName("LabourTypeID");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaNagpurRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoNagpurExpenseRule");

            entity.ToTable("BS_AutoSeaNagpurRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaPipavavRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoPipavavExpenseRule");

            entity.ToTable("BS_AutoSeaPipavavRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaPunjabRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoLudhianaExpenseRule");

            entity.ToTable("BS_AutoSeaPunjabRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsAutoSeaVadodrarule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoVADODRAExpenseRule");

            entity.ToTable("BS_AutoSeaVADODRARule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsAutoSeaVizagRule>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_AutoVizagExpenseRule");

            entity.ToTable("BS_AutoSeaVizagRule", tb => tb.HasTrigger("DelSeaVizagRuleTR"));

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsBackOfficeDocument>(entity =>
        {
            entity.HasKey(e => e.LId)
                .HasName("PK_BS_BackOfiiceDcument")
                .IsClustered(false);

            entity.ToTable("BS_BackOfficeDocument");

            entity.HasIndex(e => e.JobId, "CIX_BS_BackOfficeDocument_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsBeprovisional>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BEProvisional");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.BondClosureDate).HasColumnType("datetime");
            entity.Property(e => e.BondExecutionDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ProvisionalRemark).HasMaxLength(400);
            entity.Property(e => e.StatusDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsBetypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_BTypeMS");

            entity.ToTable("BS_BETypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BetypeName)
                .HasMaxLength(100)
                .HasColumnName("BETypeName");
        });

        modelBuilder.Entity<BsBillDispatchDoc>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__BS_BillD__DE105D07481BB026");

            entity.ToTable("BS_BillDispatchDoc", tb =>
                {
                    tb.HasTrigger("tr_BS_BillDispatchDoc_Delete");
                    tb.HasTrigger("tr_BS_BillDispatchDoc_Insert");
                    tb.HasTrigger("tr_BS_BillDispatchDoc_Update");
                });

            entity.HasIndex(e => new { e.BillId, e.DocType, e.Bdel }, "ix_BS_BillDispatchDoc_BillId_DocType_bdel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobId, e.Bdel }, "ix_BS_BillDispatchDoc_JobId_bdel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsBillDispatchDocShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_BillDispatchDoc_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(400);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
        });

        modelBuilder.Entity<BsBillReturnDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BillReturnDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bjvlid).HasColumnName("BJVlid");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Reason).HasMaxLength(300);
            entity.Property(e => e.RemarkBsend)
                .HasMaxLength(300)
                .HasColumnName("RemarkBSEnd");
            entity.Property(e => e.RemarkCust).HasMaxLength(500);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsBillStatusDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BillStatusDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillStatusId).HasColumnName("BillStatusID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
        });

        modelBuilder.Entity<BsBillStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BillStatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillStatusName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsBillingFaq>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_BillingFAQ");

            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Faq)
                .HasMaxLength(4000)
                .HasColumnName("FAQ");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Query).IsUnicode(false);
        });

        modelBuilder.Entity<BsBillingInstruction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Bs_BillingInstruction");

            entity.Property(e => e.AlliedAgencyRemark).HasMaxLength(200);
            entity.Property(e => e.AlliedAgencyService).HasMaxLength(100);
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.CeCertificateRemark).HasMaxLength(200);
            entity.Property(e => e.Cecertificate)
                .HasMaxLength(50)
                .HasColumnName("CECertificate");
            entity.Property(e => e.CecertificateApply).HasColumnName("CECertificateApply");
            entity.Property(e => e.ConsignmentType).HasMaxLength(50);
            entity.Property(e => e.DeliveyRelated).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailApprovalCopy).HasMaxLength(200);
            entity.Property(e => e.Instruction).HasMaxLength(200);
            entity.Property(e => e.Instruction1).HasMaxLength(200);
            entity.Property(e => e.Instruction2).HasMaxLength(200);
            entity.Property(e => e.Instruction3).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy1).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy2).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy3).HasMaxLength(200);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.OtherServiceRemark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.Vas)
                .HasMaxLength(100)
                .HasColumnName("VAS");
            entity.Property(e => e.Vasapply).HasColumnName("VASApply");
            entity.Property(e => e.Vasremark)
                .HasMaxLength(200)
                .HasColumnName("VASRemark");
            entity.Property(e => e.WithoutLrstatus).HasColumnName("WithoutLRStatus");
        });

        modelBuilder.Entity<BsBillingInstructionRef>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_BillingInstructionRef");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChargeDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReadDate).HasColumnType("datetime");
            entity.Property(e => e.UpdBy).HasColumnName("updBy");
            entity.Property(e => e.Upddate)
                .HasColumnType("datetime")
                .HasColumnName("upddate");
        });

        modelBuilder.Entity<BsBillingRuleType>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BillingRuleType");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder)
                .HasComment("Priority Order Set")
                .HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(400)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<BsBlcopyDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_BLCopyDetails");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContainerSize).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hbldate).HasColumnName("HBLDate");
            entity.Property(e => e.Hblno)
                .HasMaxLength(50)
                .HasColumnName("HBLNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MatchIcegate)
                .HasMaxLength(50)
                .HasColumnName("MatchICEGATE");
            entity.Property(e => e.MatchLiveTracking).HasMaxLength(50);
            entity.Property(e => e.Mbldate).HasColumnName("MBLDate");
            entity.Property(e => e.Mblno)
                .HasMaxLength(50)
                .HasColumnName("MBLNO");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsBranchCf>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_Branch_CFS");

            entity.HasIndex(e => e.BranchId, "CIX_BS_Branch_CFS_BranchId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.CfsuserId).HasColumnName("CFSUserId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsBranchExpense>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BranchExpense");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsBranchJobCode>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_BranchJobCode");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobCode).HasMaxLength(50);
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("JVPCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("VCode");
        });

        modelBuilder.Entity<BsBranchM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_BranchMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BranchCode).HasMaxLength(50);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.BranchPrefix).HasMaxLength(50);
            entity.Property(e => e.CashBookType).HasMaxLength(20);
            entity.Property(e => e.CityName).HasMaxLength(100);
            entity.Property(e => e.ContactNo).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsBranchPort>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_Branch_Port");

            entity.HasIndex(e => e.BranchId, "CIX_BS_Branch_Port_BranchId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsBranchWarehouse>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_BranchWarehouse");

            entity.HasIndex(e => e.BranchId, "CIX_BS_BranchWarehouse_BranchId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCfsmaster>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_CFSMS");

            entity.ToTable("BS_CFSMaster");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CfsuserId)
                .HasDefaultValue(0)
                .HasColumnName("CFSUserId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCfsuser>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CFSUser");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cfsid).HasColumnName("CFSID");
            entity.Property(e => e.CfsuserId).HasColumnName("CFSUserId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
        });

        modelBuilder.Entity<BsChargesCategory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ChargesCategory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsChargesWsRangeDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ChargesWsRangeDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MaxRange).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.MinRange).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCheckListDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).IsClustered(false);

            entity.ToTable("BS_CheckListDetail", tb =>
                {
                    tb.HasTrigger("APP_Checklist");
                    tb.HasTrigger("DeleteCheckListDetail");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_CheckListDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ChecklistStatus, "IX_BS_CheckListDetail_StatusId").HasFillFactor(90);

            entity.HasIndex(e => e.ChecklistStatus, "ix_BS_CheckListDetail_ChecklistStatus_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AuthorRemark).HasMaxLength(200);
            entity.Property(e => e.AuthorisedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.RequestRemark).HasMaxLength(200);
            entity.Property(e => e.RequestedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsCheckListStatusM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CheckListStatusMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<BsChekListDocDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_PreAlertDocType");

            entity.ToTable("BS_ChekListDocDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocumentName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(200)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<BsChekListDocTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_DocType_MS");

            entity.ToTable("BS_ChekListDocTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocType).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.Ldate).HasColumnName("ldate");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(200)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<BsCompanyAddress>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CompanyAddress");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.ContactAddress).HasMaxLength(400);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(400);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PhoneNo).HasMaxLength(50);
            entity.Property(e => e.Pincode).HasMaxLength(50);
        });

        modelBuilder.Entity<BsCompanyCategory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CompanyCategory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCompanyCategoryM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CompanyCategoryMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsConsigneeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ConsigneeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsigneeGroup).HasMaxLength(50);
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.ContactNo).HasMaxLength(400);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(400);
            entity.Property(e => e.Iecno)
                .HasMaxLength(100)
                .HasColumnName("IECNo");
            entity.Property(e => e.IncomeTaxNum).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
        });

        modelBuilder.Entity<BsConsolidate>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__BS_Conso__DE105D07676A338E");

            entity.ToTable("BS_Consolidate");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JStatus).HasColumnName("jStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsContactDetaile>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ContactDetaile");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.ContactEmail).HasMaxLength(200);
            entity.Property(e => e.ContactName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LandLine).HasMaxLength(20);
            entity.Property(e => e.PhonNo).HasMaxLength(20);
            entity.Property(e => e.TypeOfContact).HasMaxLength(200);
        });

        modelBuilder.Entity<BsContainerCount>(entity =>
        {
            entity.HasKey(e => e.JobId);

            entity.ToTable("BS_ContainerCount");

            entity.Property(e => e.JobId).ValueGeneratedNever();
            entity.Property(e => e.Count20).HasDefaultValue(0);
            entity.Property(e => e.Count40).HasDefaultValue(0);
            entity.Property(e => e.Count45).HasDefaultValue(0);
            entity.Property(e => e.CountLcl)
                .HasDefaultValue(0)
                .HasColumnName("CountLCL");
            entity.Property(e => e.CountTotal).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.Teu)
                .HasComment("Twenty Equivalent Unit")
                .HasColumnName("TEU");
        });

        modelBuilder.Entity<BsContainerDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_ContainerDetail", tb => tb.HasTrigger("BS_ContainerDetail_IUD"));

            entity.HasIndex(e => e.JobId, "CIX_BS_ContainerDetail_Jobid")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.ContainerSize, e.BDel }, "ix_PortReportContainer").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasComment("1 For FCL, 2 For LCL");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsContainerSizeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_ContainerSizeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsContainerTrackEventHistory>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_ContainerTrackEventHistory");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.EventLocation).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VesselName).HasMaxLength(100);
            entity.Property(e => e.VesselVoyage).HasMaxLength(100);
            entity.Property(e => e.Voyage).HasMaxLength(100);
        });

        modelBuilder.Entity<BsContainerTrackingEvent>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_ContainerTrackingEvent");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.EventLocation).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VesselName).HasMaxLength(100);
            entity.Property(e => e.VesselVoyage).HasMaxLength(100);
            entity.Property(e => e.Voyage).HasMaxLength(100);
        });

        modelBuilder.Entity<BsContainerTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_ContainerTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCoveringletterPath>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CoveringletterPath");

            entity.HasIndex(e => new { e.Jobid, e.Customerid, e.Bdel }, "ix_BS_CoveringletterPath_Jobid_customerid_bdel_includes");

            entity.HasIndex(e => e.Bdel, "ix_BS_CoveringletterPath_bdel_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(0)
                .HasColumnName("bdel");
            entity.Property(e => e.BillId).HasDefaultValue(0L);
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.MasterInvoiceDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MasterInvoiceNo).HasMaxLength(50);
        });

        modelBuilder.Entity<BsCurrencyM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CurrencyMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CountryName).HasMaxLength(50);
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.CurrencyCode).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
        });

        modelBuilder.Entity<BsCustCreditInput>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_CustCreditInput");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bsccplremark)
                .HasMaxLength(255)
                .HasColumnName("BSCCPLRemark");
            entity.Property(e => e.Ccm)
                .HasMaxLength(255)
                .HasColumnName("CCM");
            entity.Property(e => e.ClientRemark).HasMaxLength(255);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.DisputedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Kam)
                .HasMaxLength(255)
                .HasColumnName("KAM");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.OssentDate)
                .HasColumnType("datetime")
                .HasColumnName("OSSentDate");
            entity.Property(e => e.OverDue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalDue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsCustFieldGroup>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CustFieldGroup");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCustFieldsM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_Cust_FieldsMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DataType)
                .HasMaxLength(30)
                .HasColumnName("dataType");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCustJadetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_Cust_JADetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustTaskStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustTaskStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCustUcdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_Cust_UCDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustomGroupDetail>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_CustomGroupPortDetail");

            entity.ToTable("BS_CustomGroupDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustomGroupM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CustomGroupMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCustomGroupPortDetail>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_CustomGroupDetail");

            entity.ToTable("BS_CustomGroupPortDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GroupUserMobile).HasMaxLength(400);
            entity.Property(e => e.GroupUserName).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PortId).HasComment("Destination Port Id");
        });

        modelBuilder.Entity<BsCustomerAlert>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerAlert");

            entity.HasIndex(e => new { e.BabajiBranchId, e.JobId, e.BDel }, "ix_BS_CustomerAlert_BabajiBranchId_JobId_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_BS_CustomerAlert_JobId_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.TransMode, e.JobId, e.BDel }, "ix_BS_CustomerAlert_TransMode_JobId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Adcode)
                .HasMaxLength(100)
                .HasColumnName("ADCode");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BoetypeId).HasColumnName("BOETypeID");
            entity.Property(e => e.ConsigneeCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeIdOld).HasColumnName("ConsigneeId_Old");
            entity.Property(e => e.CustInstruction).HasMaxLength(400);
            entity.Property(e => e.CustRefNo).HasMaxLength(100);
            entity.Property(e => e.DirPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Etadate).HasColumnName("ETADate");
            entity.Property(e => e.IecbranchCode)
                .HasMaxLength(100)
                .HasColumnName("IECBranchCode");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.Kamid).HasColumnName("KAMID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LUserType).HasColumnName("lUserType");
            entity.Property(e => e.LoginIp)
                .HasMaxLength(100)
                .HasColumnName("LoginIP");
            entity.Property(e => e.PortCode).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.UserEmail).HasMaxLength(100);
        });

        modelBuilder.Entity<BsCustomerBillingRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerBillingRule");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustomerBranch>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_bs_customer_branch");

            entity.ToTable("BS_Customer_Branch");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(0)
                .HasColumnName("bdel");
            entity.Property(e => e.Branchid).HasColumnName("branchid");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.Luser).HasColumnName("luser");
        });

        modelBuilder.Entity<BsCustomerCircular>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_CustomerCirular");

            entity.ToTable("BS_CustomerCircular", tb =>
                {
                    tb.HasTrigger("tr_BS_CustomerCircular_Delete");
                    tb.HasTrigger("tr_BS_CustomerCircular_Insert");
                    tb.HasTrigger("tr_BS_CustomerCircular_Update");
                });

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CircularNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComputedColumnSql("('CM'+right('0000'+CONVERT([varchar](5),[Lid],(0)),(5)))", true);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MailSentDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCustomerCircularShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_CustomerCircular_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CircularNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MailSentDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCustomerConsignee>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CustomerConsignee");

            entity.HasIndex(e => e.CustomerId, "IX_BS_CustomerConsignee_CustId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.ConsigneeIdOld).HasColumnName("ConsigneeId_Old");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
        });

        modelBuilder.Entity<BsCustomerDispatch>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerDispatch");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCustomerEbillConfirm>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerEBillConfirm");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.ContactEmail).HasMaxLength(100);
            entity.Property(e => e.ContactNumber).HasMaxLength(100);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.CustomerName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EbillRequired).HasColumnName("EBillRequired");
            entity.Property(e => e.Remark).HasMaxLength(800);
        });

        modelBuilder.Entity<BsCustomerField>(entity =>
        {
            entity.HasKey(e => e.Lid).IsClustered(false);

            entity.ToTable("BS_CustomerField");

            entity.HasIndex(e => e.CustId, "CIX_BS_CustomerField_CustId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsReport).HasDefaultValue(false);
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustomerGst>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_CustomerGST");

            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CustCode).HasMaxLength(100);
            entity.Property(e => e.CustName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("GSTIN");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.PinCode).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCustomerLicenseM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerLicenseMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CloseBalance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CloseDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Iec)
                .HasMaxLength(50)
                .HasColumnName("IEC");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenceNo).HasMaxLength(50);
            entity.Property(e => e.LicenseIssueDate).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidityDate).HasColumnType("datetime");
            entity.Property(e => e.LicenseValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OpenBalance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OpenDate).HasColumnType("datetime");
            entity.Property(e => e.PortCode).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCustomerLicenseReturn>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerLicenseReturn");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DispatchAddress).HasMaxLength(200);
            entity.Property(e => e.DispatchName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.ReceiveValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsCustomerLocationM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerLocationMS");

            entity.HasIndex(e => e.CustomerId, "CIX_BS_CustomerLocationMS_CustId").HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstnno)
                .HasMaxLength(50)
                .HasColumnName("GSTNNo");
            entity.Property(e => e.LPrevId).HasColumnName("lPrevId");
            entity.Property(e => e.LType)
                .HasComment("Customer Division/Branch Or Plant")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(100)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCustomerLocationTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CustomerLocationTypeMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LPrevId).HasColumnName("lPrevId");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsCustomerM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_ClientMS");

            entity.ToTable("BS_CustomerMS");

            entity.HasIndex(e => new { e.CustCode, e.BDel }, "CustCode_bDel").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_BS_CustomerMS_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillInstruction)
                .HasMaxLength(500)
                .HasColumnName("Bill_Instruction");
            entity.Property(e => e.BinNo)
                .HasMaxLength(50)
                .HasColumnName("BinNO");
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.ContactNo).HasMaxLength(200);
            entity.Property(e => e.ContactPerson).HasMaxLength(200);
            entity.Property(e => e.CustCode).HasMaxLength(100);
            entity.Property(e => e.CustName).HasMaxLength(100);
            entity.Property(e => e.DocFolder).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Iecno)
                .HasMaxLength(50)
                .HasColumnName("IECNo");
            entity.Property(e => e.IncomeTaxNo).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDifferentGstnoAllowed)
                .HasDefaultValue(false)
                .HasComment("Allow Different GST No in Vendor Invoice Submission other then Bill Of Entry")
                .HasColumnName("IsDifferentGSTNoAllowed");
            entity.Property(e => e.IsTransAgencyPost).HasColumnName("isTransAgencyPost");
            entity.Property(e => e.IsTransBillToBabaji).HasComment("Transport Bill To babaji True else False");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(200);
            entity.Property(e => e.Pcdrequired).HasColumnName("PCDRequired");
            entity.Property(e => e.ReferredBy).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.StatusId).HasDefaultValue(1);
            entity.Property(e => e.Svbapplicable).HasColumnName("SVBApplicable");
            entity.Property(e => e.SystemGenExpense)
                .HasDefaultValue(true)
                .HasComment("1- Allow System Generated Docs Expense");
            entity.Property(e => e.UniqCode).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<BsCustomerNote>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_CustomerNotes");

            entity.HasIndex(e => e.CustId, "IX_BS_CustomerNotes_CustId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContractCustomerId)
                .HasDefaultValue(0)
                .HasColumnName("ContractCustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FilePath).HasMaxLength(400);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NoteType).HasComment("1 for notes, 2 for Contract");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsCustomerPlantAddress>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_CustomerPlantAddress", tb =>
                {
                    tb.HasTrigger("tr_BS_CustomerPlantAddress_Delete");
                    tb.HasTrigger("tr_BS_CustomerPlantAddress_Insert");
                    tb.HasTrigger("tr_BS_CustomerPlantAddress_Update");
                });

            entity.HasIndex(e => e.PlantId, "CIX_BS_CustomerPlantAddress_PlantId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AddressLine1).HasMaxLength(50);
            entity.Property(e => e.AddressLine2).HasMaxLength(150);
            entity.Property(e => e.AddressType).HasComment("Use 1 for Billing Address and 2 for PCA Address");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.IsDefault).HasComment("Value will be True if address is used for printing. only one address can be default address");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(100);
            entity.Property(e => e.Pincode).HasMaxLength(50);
            entity.Property(e => e.StateName).HasMaxLength(100);
        });

        modelBuilder.Entity<BsCustomerPlantAddressShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_CustomerPlantAddress_shadow");

            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(300);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.City).HasMaxLength(200);
            entity.Property(e => e.ContactPerson).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(200);
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(200);
            entity.Property(e => e.Pincode).HasMaxLength(100);
            entity.Property(e => e.StateName).HasMaxLength(200);
        });

        modelBuilder.Entity<BsCustomerRgbranch>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerRGBranch");

            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.BillingCity).HasMaxLength(100);
            entity.Property(e => e.BillingContactName).HasMaxLength(100);
            entity.Property(e => e.BillingEmailId)
                .HasMaxLength(400)
                .HasColumnName("BillingEmailID");
            entity.Property(e => e.BillingMobilNo).HasMaxLength(12);
            entity.Property(e => e.BillingPinCode).HasMaxLength(10);
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Pcdaddress)
                .HasMaxLength(400)
                .HasColumnName("PCDAddress");
            entity.Property(e => e.Pcdcity)
                .HasMaxLength(100)
                .HasColumnName("PCDCity");
            entity.Property(e => e.PcdcontactName)
                .HasMaxLength(100)
                .HasColumnName("PCDContactName");
            entity.Property(e => e.Pcdemailid)
                .HasMaxLength(400)
                .HasColumnName("PCDEmailid");
            entity.Property(e => e.PcdmobilNo)
                .HasMaxLength(12)
                .HasColumnName("PCDMobilNO");
            entity.Property(e => e.Pcdpincode)
                .HasMaxLength(10)
                .HasColumnName("PCDPINCode");
            entity.Property(e => e.PlantName).HasMaxLength(100);
        });

        modelBuilder.Entity<BsCustomerShipper>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerShipper");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustomerStatusHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerStatusHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
        });

        modelBuilder.Entity<BsCustomerTaskSummary>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_CustomerTaskSummary");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FollowupDate).HasColumnType("datetime");
            entity.Property(e => e.FollowupUpdate).HasMaxLength(500);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.TaskFilePath).HasMaxLength(400);
        });

        modelBuilder.Entity<BsCustomerUserLocation>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CustomerUserLocation");

            entity.HasIndex(e => e.CustUserId, "CIX_BS_CustomerUserLocation_UseId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LTypeId).HasColumnName("lTypeId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCustomerVariant>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_CustomerVariant");

            entity.HasIndex(e => e.CustomerId, "CIX_BS_CustomerVariant_CustId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsCutomerUserDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).IsClustered(false);

            entity.ToTable("BS_CutomerUserDetail");

            entity.HasIndex(e => e.CustomerUserId, "CIX_BS_CutomerUserDetail_UserId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CityName).HasMaxLength(100);
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Designation).HasMaxLength(100);
            entity.Property(e => e.DtBirthDate)
                .HasColumnType("datetime")
                .HasColumnName("dtBirthDate");
            entity.Property(e => e.FaxNo).HasMaxLength(50);
            entity.Property(e => e.MobileNo).HasMaxLength(100);
            entity.Property(e => e.OfficeNo).HasMaxLength(100);
        });

        modelBuilder.Entity<BsDeliveryConsolidate>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_DeliveryConsolidate");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CommonLr)
                .HasDefaultValue(false)
                .HasColumnName("CommonLR");
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransporterId)
                .HasDefaultValue(0)
                .HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(200);
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<BsDeliveryTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_DeliveryTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsDeptM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_DeptMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DeptCode).HasMaxLength(50);
            entity.Property(e => e.DeptName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<BsDivisionM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_DivisionMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DivisionCode).HasMaxLength(50);
            entity.Property(e => e.DivisionName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(200)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<BsDoProcessRemark>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_DoProcessRemark");

            entity.HasIndex(e => e.JobId, "ix_BS_DoProcessRemark_JobId").HasFillFactor(100);

            entity.HasIndex(e => e.JobId, "ix_BS_DoProcessRemark_JobId_includes").HasFillFactor(100);

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DoprocessRemark).HasColumnName("DOProcessRemark");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsDoprocessRemarkM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_DOProcessRemarkMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DoprocessRemark)
                .HasMaxLength(300)
                .HasColumnName("DOProcessRemark");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<BsDorequiredDoc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_DORequiredDoc");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DorequiredDoc).HasColumnName("DORequiredDoc");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<BsDorequiredDocM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_DORequiredDocMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DorequiredDoc)
                .HasMaxLength(300)
                .HasColumnName("DORequiredDoc");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<BsDostageHistory>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_DOStageHistory");

            entity.HasIndex(e => e.JobId, "CIX_BS_DOStageHistory_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.DostageId, "IX_BS_DOStageHistory_StageId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DostageId).HasColumnName("DOStageId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PickupPerson).HasMaxLength(50);
        });

        modelBuilder.Entity<BsDostageM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_DOStageMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsDraftQuotation>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_DraftQuotation");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AddressLine1).HasMaxLength(350);
            entity.Property(e => e.AddressLine2).HasMaxLength(350);
            entity.Property(e => e.AddressLine3).HasMaxLength(350);
            entity.Property(e => e.AttendedPerson).HasMaxLength(150);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BodyContent).HasMaxLength(4000);
            entity.Property(e => e.ContacNo).HasMaxLength(50);
            entity.Property(e => e.ContractCopy).HasMaxLength(250);
            entity.Property(e => e.CustomerName).HasMaxLength(300);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IncludeBody).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MailId).HasMaxLength(100);
            entity.Property(e => e.OrganisationAddress).HasMaxLength(550);
            entity.Property(e => e.OtherNotes).HasMaxLength(550);
            entity.Property(e => e.PaymentTerms).HasMaxLength(600);
            entity.Property(e => e.QuotePath).HasMaxLength(450);
            entity.Property(e => e.QuoteRefNo).HasMaxLength(150);
            entity.Property(e => e.Remark).HasMaxLength(250);
            entity.Property(e => e.SalesPersonName).HasMaxLength(150);
            entity.Property(e => e.Subject).HasMaxLength(600);
            entity.Property(e => e.TemplateFor).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsDutyStatusDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_DutyStatusDetail", tb =>
                {
                    tb.HasTrigger("tr_BS_DutyStatusDetail_Delete");
                    tb.HasTrigger("tr_BS_DutyStatusDetail_Insert");
                    tb.HasTrigger("tr_BS_DutyStatusDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_DutyStatusDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.LUserId, "IX_BS_DutyStatusDetail_UserId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bcdamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BCDAmt");
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.CopyOfChallan).HasMaxLength(200);
            entity.Property(e => e.DdchallanDate)
                .HasColumnType("datetime")
                .HasColumnName("DDChallanDate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DutyPaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DutyRecvdDateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("DutyRecvdDate_Deleted");
            entity.Property(e => e.DutyReqDate).HasColumnType("datetime");
            entity.Property(e => e.EducationCessAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FinePenalty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGSTAmt");
            entity.Property(e => e.InterestAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUserId)
                .HasDefaultValue(1)
                .HasColumnName("lUserId");
            entity.Property(e => e.LicDebitDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("lic_debit_duty");
            entity.Property(e => e.PenaltyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SocialSurchargeAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsDutyStatusDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_DutyStatusDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChallanNo).HasMaxLength(100);
            entity.Property(e => e.CopyOfChallan).HasMaxLength(400);
            entity.Property(e => e.DdchallanDate)
                .HasColumnType("datetime")
                .HasColumnName("DDChallanDate");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DutyRecvdDateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("DutyRecvdDate_Deleted");
            entity.Property(e => e.DutyReqDate).HasColumnType("datetime");
            entity.Property(e => e.FinePenalty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGSTAmt");
            entity.Property(e => e.InterestAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.LicDebitDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("lic_debit_duty");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.StampDutyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsDutyStatusM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_ DutyStatusMS");

            entity.ToTable("BS_DutyStatusMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyStatusName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsElr>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_E-LR");

            entity.ToTable("BS_ELR");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Elrdate)
                .HasColumnType("datetime")
                .HasColumnName("ELRDate");
            entity.Property(e => e.ElrdocPath)
                .HasMaxLength(200)
                .HasColumnName("ELRDocPath");
            entity.Property(e => e.ElrfileName)
                .HasMaxLength(50)
                .HasColumnName("ELRFileName");
            entity.Property(e => e.Elrno)
                .HasMaxLength(50)
                .HasColumnName("ELRNo");
            entity.Property(e => e.EndLatitude).HasMaxLength(50);
            entity.Property(e => e.EndLongitude).HasMaxLength(50);
            entity.Property(e => e.EwayBillNo).HasMaxLength(50);
            entity.Property(e => e.FromAddress).HasMaxLength(200);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mawbno)
                .HasMaxLength(50)
                .HasColumnName("MAWBNo");
            entity.Property(e => e.ReceiverSignature).HasMaxLength(200);
            entity.Property(e => e.ReceiversGoodsPhoto).HasMaxLength(200);
            entity.Property(e => e.ReceiversName).HasMaxLength(100);
            entity.Property(e => e.ReceiversPhoto).HasMaxLength(200);
            entity.Property(e => e.ReceiversRemark).HasMaxLength(200);
            entity.Property(e => e.ReceivingDate).HasColumnType("datetime");
            entity.Property(e => e.StartLatitude).HasMaxLength(50);
            entity.Property(e => e.StartLongitude).HasMaxLength(50);
            entity.Property(e => e.ToAddress).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicalNo).HasMaxLength(50);
            entity.Property(e => e.VehicalType).HasMaxLength(50);
        });

        modelBuilder.Entity<BsElrcustomer>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_ELRCustomer");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.CustName).HasMaxLength(500);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsExbondInvoice>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_ExbondInvoice");

            entity.HasIndex(e => e.InvoiceId, "IX_BS_ExbondInvoice_InvId").HasFillFactor(90);

            entity.HasIndex(e => e.JobId, "IX_BS_ExbondInvoice_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BalanceQuantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExbondQuantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OriginalQuantity).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<BsExpenseStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ExpenseStatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsExpensesM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_ExpensesMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseName).HasMaxLength(50);
            entity.Property(e => e.LPrevId)
                .HasDefaultValue(-1)
                .HasColumnName("lPrevId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModuleId)
                .HasDefaultValue(1)
                .HasColumnName("ModuleID");
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsExpensesRuleM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_ExpensesRuleMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lmode).HasColumnName("lmode");
        });

        modelBuilder.Entity<BsFieldGroup>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_FieldGroup");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsFieldMaster>(entity =>
        {
            entity.HasKey(e => e.FieldId);

            entity.ToTable("BS_FieldMaster");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FieldName).HasMaxLength(50);
            entity.Property(e => e.LType)
                .HasComment("1 For Standard Field, 2 For Additional Field")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.QueryName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsFieldTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_FIeldTypeMS");

            entity.ToTable("BS_FieldTypeMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FieldType).HasMaxLength(50);
        });

        modelBuilder.Entity<BsFinYearM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_FinYearMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.YearPrefix).HasMaxLength(50);
        });

        modelBuilder.Entity<BsFlowStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_FlowStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Betype).HasColumnName("BEType");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.StatusName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsHoldBillingAdvice>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_HoldBillingAdvice");

            entity.HasIndex(e => new { e.JobId, e.IsActive, e.BDel }, "ix_BS_HoldBillingAdvice_JobId_IsActive_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsHolded).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModuleId)
                .HasDefaultValue(0)
                .HasColumnName("ModuleID");
            entity.Property(e => e.Remark).HasMaxLength(450);
        });

        modelBuilder.Entity<BsHolidayM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_HolidayMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinYearId).HasDefaultValue(1);
            entity.Property(e => e.HolidayDate).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsIgmDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_IgmDetail_shadow");

            entity.Property(e => e.AssessableValueDeleted)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AssessableValue_deleted");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cfsdate).HasColumnName("CFSDate");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ffname)
                .HasMaxLength(200)
                .HasColumnName("FFName");
            entity.Property(e => e.Hawbdate).HasColumnName("HAWBDate");
            entity.Property(e => e.Hawbno)
                .HasMaxLength(200)
                .HasColumnName("HAWBNo");
            entity.Property(e => e.HsssellerName)
                .HasMaxLength(200)
                .HasColumnName("HSSSellerName");
            entity.Property(e => e.Igmdate).HasColumnName("IGMDate");
            entity.Property(e => e.Igmdate2).HasColumnName("IGMDate2");
            entity.Property(e => e.Igmdate3).HasColumnName("IGMDate3");
            entity.Property(e => e.Igmitem)
                .HasMaxLength(100)
                .HasColumnName("IGMItem");
            entity.Property(e => e.Igmno)
                .HasMaxLength(100)
                .HasColumnName("IGMNo");
            entity.Property(e => e.Igmno2)
                .HasMaxLength(100)
                .HasColumnName("IGMNo2");
            entity.Property(e => e.Igmno3)
                .HasMaxLength(100)
                .HasColumnName("IGMNo3");
            entity.Property(e => e.Igmremark)
                .HasMaxLength(400)
                .HasColumnName("IGMRemark");
            entity.Property(e => e.IgmsubItem)
                .HasMaxLength(100)
                .HasColumnName("IGMSubItem");
            entity.Property(e => e.IgmsubItem2)
                .HasMaxLength(100)
                .HasColumnName("IGMSubItem2");
            entity.Property(e => e.IgmsubItem3)
                .HasMaxLength(100)
                .HasColumnName("IGMSubItem3");
            entity.Property(e => e.IgmsyncDate)
                .HasColumnType("datetime")
                .HasColumnName("IGMSyncDate");
            entity.Property(e => e.Igmuser).HasColumnName("IGMUser");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LandIgmdate).HasColumnName("LandIGMDate");
            entity.Property(e => e.LandIgmno)
                .HasMaxLength(100)
                .HasColumnName("LandIGMNo");
            entity.Property(e => e.Mawbdate).HasColumnName("MAWBDate");
            entity.Property(e => e.Mawbno)
                .HasMaxLength(200)
                .HasColumnName("MAWBNo");
            entity.Property(e => e.ShippingName).HasMaxLength(200);
            entity.Property(e => e.ShortDescription).HasMaxLength(800);
            entity.Property(e => e.Supplier).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VesselName).HasMaxLength(200);
        });

        modelBuilder.Entity<BsIgmdetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_IGMDetail", tb =>
                {
                    tb.HasTrigger("DeleteIGMDetail");
                    tb.HasTrigger("tr_BS_IgmDetail_Delete");
                    tb.HasTrigger("tr_BS_IgmDetail_Insert");
                    tb.HasTrigger("tr_BS_IgmDetail_Update");
                });

            entity.HasIndex(e => e.AlertId, "CIX_BS_IGMDetail_AlertId").HasFillFactor(90);

            entity.HasIndex(e => e.Cfsid, "IX_BS_IGMDetail_CFSId").HasFillFactor(90);

            entity.HasIndex(e => e.JobId, "IX_BS_IGMDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.Igmdate, e.Mawbno, e.IgmsyncDate }, "ix_BS_IGMDetail_IGMDate_MAWBNo_IGMSyncDate_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.InwardDate, e.BDel }, "ix_BS_IGMDetail_InwardDate_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AssessableValueDeleted)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AssessableValue_deleted");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cfsdate).HasColumnName("CFSDate");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ffname)
                .HasMaxLength(100)
                .HasColumnName("FFName");
            entity.Property(e => e.GateWayPort).HasMaxLength(20);
            entity.Property(e => e.GatewayIgmdate)
                .HasColumnType("datetime")
                .HasColumnName("GatewayIGMDate");
            entity.Property(e => e.GatewayIgmno)
                .HasMaxLength(50)
                .HasColumnName("GatewayIGMNo");
            entity.Property(e => e.GatewayInwardDate).HasColumnType("datetime");
            entity.Property(e => e.Hawbdate).HasColumnName("HAWBDate");
            entity.Property(e => e.Hawbno)
                .HasMaxLength(100)
                .HasColumnName("HAWBNo");
            entity.Property(e => e.HsssellerName)
                .HasMaxLength(100)
                .HasColumnName("HSSSellerName");
            entity.Property(e => e.Igmdate).HasColumnName("IGMDate");
            entity.Property(e => e.Igmdate2).HasColumnName("IGMDate2");
            entity.Property(e => e.Igmdate3).HasColumnName("IGMDate3");
            entity.Property(e => e.Igmitem)
                .HasMaxLength(50)
                .HasColumnName("IGMItem");
            entity.Property(e => e.Igmno)
                .HasMaxLength(50)
                .HasColumnName("IGMNo");
            entity.Property(e => e.Igmno2)
                .HasMaxLength(50)
                .HasColumnName("IGMNo2");
            entity.Property(e => e.Igmno3)
                .HasMaxLength(50)
                .HasColumnName("IGMNo3");
            entity.Property(e => e.Igmremark)
                .HasMaxLength(200)
                .HasColumnName("IGMRemark");
            entity.Property(e => e.IgmsubItem)
                .HasMaxLength(50)
                .HasColumnName("IGMSubItem");
            entity.Property(e => e.IgmsubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGMSubItem2");
            entity.Property(e => e.IgmsubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGMSubItem3");
            entity.Property(e => e.IgmsyncDate)
                .HasColumnType("datetime")
                .HasColumnName("IGMSyncDate");
            entity.Property(e => e.Igmuser).HasColumnName("IGMUser");
            entity.Property(e => e.LandIgmdate).HasColumnName("LandIGMDate");
            entity.Property(e => e.LandIgmno)
                .HasMaxLength(50)
                .HasColumnName("LandIGMNo");
            entity.Property(e => e.Mawbdate).HasColumnName("MAWBDate");
            entity.Property(e => e.Mawbno)
                .HasMaxLength(100)
                .HasColumnName("MAWBNo");
            entity.Property(e => e.ShippingName).HasMaxLength(100);
            entity.Property(e => e.ShortDescription).HasMaxLength(400);
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TrackCount).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VesselName).HasMaxLength(100);

            entity.HasOne(d => d.Job).WithMany(p => p.BsIgmdetails)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_IGMDetail_BS_JobDetail");
        });

        modelBuilder.Entity<BsIncoTermM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_IncoTermMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsJobAdcPhoDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobAdcPhoDetail");

            entity.HasIndex(e => e.JobId, "CIX_BS_JobAdcPhoDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AdcexamDate).HasColumnName("ADCExamDate");
            entity.Property(e => e.AdcwithdrawnDate).HasColumnName("ADCWithdrawnDate");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PhoappointDate).HasColumnName("PHOAppointDate");
            entity.Property(e => e.PholabTestDate).HasColumnName("PHOLabTestDate");
            entity.Property(e => e.PhopaymentDate).HasColumnName("PHOPaymentDate");
            entity.Property(e => e.PhoreportDate).HasColumnName("PHOReportDate");
            entity.Property(e => e.PhoscrutinyDate).HasColumnName("PHOScrutinyDate");
            entity.Property(e => e.PhosubmitDate).HasColumnName("PHOSubmitDate");
            entity.Property(e => e.PhowithdrawnDate).HasColumnName("PHOWithdrawnDate");
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsJobAssignForStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobAssignForStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsJobBondFormality>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobBondFormality");

            entity.HasIndex(e => e.JobId, "IX_BS_JobBondFormality")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BStatus).HasColumnName("bStatus");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NocDate).HasColumnType("datetime");
            entity.Property(e => e.NocNumber).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobCertificate>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_JobCertificate");

            entity.HasIndex(e => new { e.JobId, e.CertType, e.CertNumber, e.BDel }, "ix_BS_JobCertificate_JobId_CertType_CertNumber_bDel").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CertNumber).HasMaxLength(200);
            entity.Property(e => e.CertType).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsJobCustomsStage>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobCustomsStage");

            entity.HasIndex(e => new { e.JobId, e.CustomsStatgeId, e.IsActive, e.BDel }, "ix_BS_JobCustomsStage_JobId_CustomsStatgeId_IsActive_bDel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustomsStatgeId).HasComment("ICE_CustomsStageMS ");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("1- Active, 0 InActive");
            entity.Property(e => e.LUser)
                .HasDefaultValue(10)
                .HasColumnName("lUser");
        });

        modelBuilder.Entity<BsJobDailyActivity>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobDailyActivity");

            entity.HasIndex(e => e.JobId, "CIX_BS_JobDailyActivity_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DailyProgress).HasMaxLength(4000);
            entity.Property(e => e.DocumentPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsCustomerVisible).HasDefaultValue(true);
            entity.Property(e => e.JobReason).HasMaxLength(2000);
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobDeliveryDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobDeliveryDetail", tb =>
                {
                    tb.HasTrigger("App_UpdateConsolidate");
                    tb.HasTrigger("DelJobDeliveryTR");
                    tb.HasTrigger("DispathNotify");
                    tb.HasTrigger("tr_BS_JobDeliveryDetail_Delete");
                    tb.HasTrigger("tr_BS_JobDeliveryDetail_Insert");
                    tb.HasTrigger("tr_BS_JobDeliveryDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_JobDeliveryDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.VehicleNo, e.BDel }, "ix_BS_JobDeliveryDetail_VehicleNo_bDel");

            entity.HasIndex(e => e.BDel, "ix_BS_JobDeliveryDetail_bDel_includes");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(200);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(100);
            entity.Property(e => e.CargoReceivedBy).HasMaxLength(50);
            entity.Property(e => e.ConsolidateId).HasDefaultValue(0L);
            entity.Property(e => e.DamagedImage).HasMaxLength(400);
            entity.Property(e => e.DeliveryFrom).HasComment("1 - Port To Customer, 2 or 3 Port To Warehouse, 4 Warehouse To Customer");
            entity.Property(e => e.DeliveryPoint).HasMaxLength(200);
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DriverPhone).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.NclosingDate).HasColumnName("NClosingDate");
            entity.Property(e => e.NformDate).HasColumnName("NFormDate");
            entity.Property(e => e.NformNo)
                .HasMaxLength(50)
                .HasColumnName("NFormNo");
            entity.Property(e => e.OctroiAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OctroiReceiptNo).HasMaxLength(100);
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(200)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(50);
            entity.Property(e => e.SclosingDate).HasColumnName("SClosingDate");
            entity.Property(e => e.SformDate).HasColumnName("SFormDate");
            entity.Property(e => e.SformNo)
                .HasMaxLength(50)
                .HasColumnName("SFormNo");
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransportByBabaji).HasDefaultValue(false);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<BsJobDeliveryDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobDeliveryDetail_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(400);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(200);
            entity.Property(e => e.CargoReceivedBy).HasMaxLength(100);
            entity.Property(e => e.DamagedImage).HasMaxLength(800);
            entity.Property(e => e.DeliveryPoint).HasMaxLength(400);
            entity.Property(e => e.DriverName).HasMaxLength(200);
            entity.Property(e => e.DriverPhone).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(200)
                .HasColumnName("LRNo");
            entity.Property(e => e.NclosingDate).HasColumnName("NClosingDate");
            entity.Property(e => e.NformDate).HasColumnName("NFormDate");
            entity.Property(e => e.NformNo)
                .HasMaxLength(100)
                .HasColumnName("NFormNo");
            entity.Property(e => e.OctroiAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OctroiReceiptNo).HasMaxLength(200);
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(400)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(100);
            entity.Property(e => e.SclosingDate).HasColumnName("SClosingDate");
            entity.Property(e => e.SformDate).HasColumnName("SFormDate");
            entity.Property(e => e.SformNo)
                .HasMaxLength(100)
                .HasColumnName("SFormNo");
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransportByBabaji).HasDefaultValue(false);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(200);
        });

        modelBuilder.Entity<BsJobDeliveryM>(entity =>
        {
            entity.HasKey(e => e.JobId);

            entity.ToTable("BS_JobDeliveryMS", tb =>
                {
                    tb.HasTrigger("DeleteDeliveryMS");
                    tb.HasTrigger("tr_BS_JobDeliveryMS_Delete");
                    tb.HasTrigger("tr_BS_JobDeliveryMS_Insert");
                    tb.HasTrigger("tr_BS_JobDeliveryMS_Update");
                });

            entity.Property(e => e.JobId).ValueGeneratedNever();
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DeliveryAddress).HasMaxLength(200);
            entity.Property(e => e.DeliveryDestination).HasMaxLength(200);
            entity.Property(e => e.DeliveryInstruction).HasMaxLength(200);
            entity.Property(e => e.Dimension).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PkgDimensions).HasMaxLength(200);
            entity.Property(e => e.TransportationByBabaji).HasDefaultValue(true);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehiclePlaceDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsJobDeliveryMsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobDeliveryMS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DeliveryAddress).HasMaxLength(400);
            entity.Property(e => e.DeliveryDestination).HasMaxLength(400);
            entity.Property(e => e.DeliveryInstruction).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobDeliveryWarehouse>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobDeliveryWarehouse", tb =>
                {
                    tb.HasTrigger("App_UpdateConsolidateWH");
                    tb.HasTrigger("tr_BS_JobDeliveryWarehouse_Delete");
                    tb.HasTrigger("tr_BS_JobDeliveryWarehouse_Insert");
                    tb.HasTrigger("tr_BS_JobDeliveryWarehouse_Update");
                });

            entity.HasIndex(e => e.JobId, "ix_BS_JobDeliveryWarehouse_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(200);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(100);
            entity.Property(e => e.ConsolidateId).HasDefaultValue(0L);
            entity.Property(e => e.DamagedImage).HasMaxLength(400);
            entity.Property(e => e.DeliveryPoint).HasMaxLength(400);
            entity.Property(e => e.DeliveryPointOld)
                .HasMaxLength(400)
                .HasColumnName("DeliveryPoint_Old");
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DriverPhone).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.NclosingDate).HasColumnName("NClosingDate");
            entity.Property(e => e.NformDate).HasColumnName("NFormDate");
            entity.Property(e => e.NformNo)
                .HasMaxLength(50)
                .HasColumnName("NFormNo");
            entity.Property(e => e.OctroiAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OctroiReceiptNo).HasMaxLength(100);
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(200)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(50);
            entity.Property(e => e.SclosingDate).HasColumnName("SClosingDate");
            entity.Property(e => e.SformDate).HasColumnName("SFormDate");
            entity.Property(e => e.SformNo)
                .HasMaxLength(50)
                .HasColumnName("SFormNo");
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<BsJobDeliveryWarehouseShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobDeliveryWarehouse_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(400);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(200);
            entity.Property(e => e.DamagedImage).HasMaxLength(800);
            entity.Property(e => e.DeliveryPoint).HasMaxLength(400);
            entity.Property(e => e.DeliveryPointOld)
                .HasMaxLength(400)
                .HasColumnName("DeliveryPoint_Old");
            entity.Property(e => e.DriverName).HasMaxLength(200);
            entity.Property(e => e.DriverPhone).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(200)
                .HasColumnName("LRNo");
            entity.Property(e => e.NclosingDate).HasColumnName("NClosingDate");
            entity.Property(e => e.NformDate).HasColumnName("NFormDate");
            entity.Property(e => e.NformNo)
                .HasMaxLength(100)
                .HasColumnName("NFormNo");
            entity.Property(e => e.OctroiAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OctroiReceiptNo).HasMaxLength(200);
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(400)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(100);
            entity.Property(e => e.SclosingDate).HasColumnName("SClosingDate");
            entity.Property(e => e.SformDate).HasColumnName("SFormDate");
            entity.Property(e => e.SformNo)
                .HasMaxLength(100)
                .HasColumnName("SFormNo");
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(200);
        });

        modelBuilder.Entity<BsJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobDetail", tb =>
                {
                    tb.HasTrigger("DeleteJobDetail");
                    tb.HasTrigger("PushNotification");
                    tb.HasTrigger("tr_BS_JobDetail_Delete");
                    tb.HasTrigger("tr_BS_JobDetail_Insert");
                    tb.HasTrigger("tr_BS_JobDetail_Update");
                });

            entity.HasIndex(e => new { e.AlertId, e.FinYear, e.BDel }, "ix_BS_JobDetail_AlertId_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.Boetype, e.ClearedStatus, e.FinYear, e.BDel }, "ix_BS_JobDetail_BOEType_ClearedStatus_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.DutyStatus, e.FinYear, e.BDel }, "ix_BS_JobDetail_DutyStatus_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.FinYear, e.BDel, e.StatusId }, "ix_BS_JobDetail_FinYear_bDel_StatusId_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.FinYear, e.BDel }, "ix_BS_JobDetail_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobRefNo, e.BDel }, "ix_BS_JobDetail_JobRefNo_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.NotingStatus, e.ExamineStatus, e.FinYear, e.BDel }, "ix_BS_JobDetail_NotingStatus_ExamineStatus_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.NotingStatus, e.FinYear, e.BDel, e.JobRefNo, e.JobType, e.CheckListStatus, e.StatusId }, "ix_BS_JobDetail_NotingStatus_FinYear_bDel_JobRefNo_JobType_CheckListStatus_StatusId_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.StatusId, e.BDel }, "ix_BS_JobDetail_StatusId_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.BDel, e.JobRefNo, e.JobType, e.FinYear }, "ix_BS_JobDetail_bDel_JobRefNo_JobType_FinYear_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdbankName)
                .HasMaxLength(100)
                .HasColumnName("ADBankName");
            entity.Property(e => e.Adcode)
                .HasMaxLength(100)
                .HasColumnName("ADCode");
            entity.Property(e => e.Adcphostatus).HasColumnName("ADCPHOStatus");
            entity.Property(e => e.AssessableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Atadate).HasColumnName("ATADate");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beprint).HasColumnName("BEPrint");
            entity.Property(e => e.BesyncDate)
                .HasColumnType("datetime")
                .HasColumnName("BESyncDate");
            entity.Property(e => e.Boetype)
                .HasDefaultValue(0)
                .HasColumnName("BOEType");
            entity.Property(e => e.CheckListDocPath).HasMaxLength(200);
            entity.Property(e => e.ConsigneeAddr).HasMaxLength(100);
            entity.Property(e => e.ConsigneeCity).HasMaxLength(50);
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(20)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.ConsigneePinCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeState).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryType).HasDefaultValue(0);
            entity.Property(e => e.DoplanningStatus).HasColumnName("DOPlanningStatus");
            entity.Property(e => e.Dostatus).HasColumnName("DOStatus");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FabillStatusCheckDate)
                .HasColumnType("datetime")
                .HasColumnName("FABillStatusCheckDate");
            entity.Property(e => e.FileDirName).HasMaxLength(100);
            entity.Property(e => e.FourSoftStatus).HasMaxLength(200);
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.IecbranchCode)
                .HasMaxLength(100)
                .HasColumnName("IECBranchCode");
            entity.Property(e => e.Igmstatus).HasColumnName("IGMStatus");
            entity.Property(e => e.InBondJobNo).HasMaxLength(50);
            entity.Property(e => e.IsBjvcreated).HasColumnName("IsBJVcreated");
            entity.Property(e => e.IsFundAllowed)
                .HasDefaultValue(false)
                .HasComment("Field used to Block Fund Request In Accound Module - Allow - 1, Blocked - 0");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.JobType).HasDefaultValue(0);
            entity.Property(e => e.OblrcvdDate)
                .HasComment("Original Bill of Lading Date")
                .HasColumnName("OBLRcvdDate");
            entity.Property(e => e.Oocstatus).HasColumnName("OOCStatus");
            entity.Property(e => e.PackageCode).HasMaxLength(50);
            entity.Property(e => e.Pcdstatus).HasColumnName("PCDStatus");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Remarks).HasMaxLength(200);
            entity.Property(e => e.ShipperAddr).HasMaxLength(100);
            entity.Property(e => e.ShipperName).HasMaxLength(100);
            entity.Property(e => e.UnitCode).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobDetail_shadow");

            entity.Property(e => e.AdbankName)
                .HasMaxLength(200)
                .HasColumnName("ADBankName");
            entity.Property(e => e.Adcode)
                .HasMaxLength(200)
                .HasColumnName("ADCode");
            entity.Property(e => e.Adcphostatus).HasColumnName("ADCPHOStatus");
            entity.Property(e => e.AssessableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Atadate).HasColumnName("ATADate");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beprint).HasColumnName("BEPrint");
            entity.Property(e => e.BesyncDate)
                .HasColumnType("datetime")
                .HasColumnName("BESyncDate");
            entity.Property(e => e.Boetype).HasColumnName("BOEType");
            entity.Property(e => e.CheckListDocPath).HasMaxLength(400);
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(40)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DoplanningStatus).HasColumnName("DOPlanningStatus");
            entity.Property(e => e.Dostatus).HasColumnName("DOStatus");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileDirName).HasMaxLength(200);
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.IecbranchCode)
                .HasMaxLength(200)
                .HasColumnName("IECBranchCode");
            entity.Property(e => e.Igmstatus).HasColumnName("IGMStatus");
            entity.Property(e => e.InBondJobNo).HasMaxLength(100);
            entity.Property(e => e.JobRefNo).HasMaxLength(100);
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.OblrcvdDate).HasColumnName("OBLRcvdDate");
            entity.Property(e => e.Oocstatus).HasColumnName("OOCStatus");
            entity.Property(e => e.PackageCode).HasMaxLength(100);
            entity.Property(e => e.Pcdstatus).HasColumnName("PCDStatus");
            entity.Property(e => e.Remarks).HasMaxLength(400);
            entity.Property(e => e.UnitCode).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobDocollection>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobDOCollection", tb =>
                {
                    tb.HasTrigger("DelDOCollectionTR");
                    tb.HasTrigger("tr_BS_JobDOCollection_Delete");
                    tb.HasTrigger("tr_BS_JobDOCollection_Insert");
                    tb.HasTrigger("tr_BS_JobDOCollection_Update");
                });

            entity.HasIndex(e => e.JobId, "IX_BS_JobDOCollection")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AppConsolePath).HasMaxLength(200);
            entity.Property(e => e.AppFinalPath).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BlankChequeNo).HasMaxLength(50);
            entity.Property(e => e.DetentionAmountDeleted).HasColumnName("DetentionAmount_deleted");
            entity.Property(e => e.DoamountDeleted)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOAmount_Deleted");
            entity.Property(e => e.Dobranch).HasColumnName("DOBranch");
            entity.Property(e => e.DostageId).HasColumnName("DOStageId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyYardName).HasMaxLength(100);
            entity.Property(e => e.FinalDodate).HasColumnName("FinalDODate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PickupPerson).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SecurityReceiptPath).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobDocollectionShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobDOCollection_shadow");

            entity.Property(e => e.AppConsolePath).HasMaxLength(400);
            entity.Property(e => e.AppFinalPath).HasMaxLength(400);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BlankChequeNo).HasMaxLength(100);
            entity.Property(e => e.DetentionAmountDeleted).HasColumnName("DetentionAmount_deleted");
            entity.Property(e => e.DoamountDeleted)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOAmount_Deleted");
            entity.Property(e => e.Dobranch).HasColumnName("DOBranch");
            entity.Property(e => e.DostageId).HasColumnName("DOStageId");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyYardName).HasMaxLength(200);
            entity.Property(e => e.FinalDodate).HasColumnName("FinalDODate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PickupPerson).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.SecurityReceiptPath).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobDoplanning>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobDOPlanning");

            entity.HasIndex(e => new { e.IsDoSecurity, e.BDel }, "ix_BS_JobDOPlanning_IsDoSecurity_bDel_includes");

            entity.HasIndex(e => e.JobId, "ix_BS_JobDOPlanning_JobId_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DopaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("DOPaymentDate");
            entity.Property(e => e.DotypeOfDelivery).HasColumnName("DOTypeOfDelivery");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.SecChequeCancelDt).HasColumnType("datetime");
            entity.Property(e => e.SecChequeDt).HasColumnType("datetime");
            entity.Property(e => e.SecChequeNo).HasMaxLength(100);
            entity.Property(e => e.SecFollowupDt).HasColumnType("datetime");
            entity.Property(e => e.SecRemark).HasMaxLength(500);
            entity.Property(e => e.SecType).HasComment("1 - Cheque , 2 - DD");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobErrorStat>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_JobErrorStats");

            entity.ToTable("BS_JobErrorStats");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SDescription).HasColumnName("sDescription");
            entity.Property(e => e.SErrorLine)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("sError_Line");
            entity.Property(e => e.SErrorMessage).HasColumnName("sError_Message");
            entity.Property(e => e.SErrorNumber)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("sError_Number");
            entity.Property(e => e.SErrorProcedure)
                .HasMaxLength(100)
                .HasColumnName("sError_Procedure");
            entity.Property(e => e.SErrorSeverity)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("sError_Severity");
            entity.Property(e => e.SErrorState)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("sError_State");
            entity.Property(e => e.STypeName)
                .HasMaxLength(100)
                .HasColumnName("sTypeName");
        });

        modelBuilder.Entity<BsJobExamineDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobExamineDetail", tb =>
                {
                    tb.HasTrigger("DeleteJobExamineDetail");
                    tb.HasTrigger("tr_BS_JobExamineDetail_Delete");
                    tb.HasTrigger("tr_BS_JobExamineDetail_Insert");
                    tb.HasTrigger("tr_BS_JobExamineDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "ix_BS_JobExamineDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.OutOfChargeDate, "ix_BS_JobExamineDetail_OutOfChargeDate_includes").HasFillFactor(100);

            entity.HasIndex(e => e.TransitType, "ix_BS_JobExamineDetail_TransitType_includes").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_BS_JobExamineDetail_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beprint).HasColumnName("BEPrint");
            entity.Property(e => e.CfsdispatchDate).HasColumnName("CFSDispatchDate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FrankingAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FrankingDate).HasColumnType("datetime");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.IsNform)
                .HasDefaultValue(false)
                .HasColumnName("IsNForm");
            entity.Property(e => e.IsOctroi).HasDefaultValue(false);
            entity.Property(e => e.IsSform)
                .HasDefaultValue(false)
                .HasColumnName("IsSForm");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OocfromYard)
                .HasDefaultValue(true)
                .HasColumnName("OOCFromYard");
            entity.Property(e => e.Oocremark)
                .HasMaxLength(200)
                .HasColumnName("OOCRemark");
            entity.Property(e => e.Rdamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RDAmount");
            entity.Property(e => e.Rdpercentage)
                .HasMaxLength(50)
                .HasColumnName("RDPercentage");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobExamineDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobExamineDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beprint).HasColumnName("BEPrint");
            entity.Property(e => e.CfsdispatchDate).HasColumnName("CFSDispatchDate");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FrankingAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FrankingDate).HasColumnType("datetime");
            entity.Property(e => e.IsNform).HasColumnName("IsNForm");
            entity.Property(e => e.IsSform).HasColumnName("IsSForm");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OocfromYard).HasColumnName("OOCFromYard");
            entity.Property(e => e.Oocremark)
                .HasMaxLength(200)
                .HasColumnName("OOCRemark");
            entity.Property(e => e.Rdamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RDAmount");
            entity.Property(e => e.Rdpercentage)
                .HasMaxLength(100)
                .HasColumnName("RDPercentage");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobExpenseDetail", tb =>
                {
                    tb.HasTrigger("DeleteJobExpenseDetail");
                    tb.HasTrigger("tr_BS_JobExpenseDetail_Delete");
                    tb.HasTrigger("tr_BS_JobExpenseDetail_Insert");
                    tb.HasTrigger("tr_BS_JobExpenseDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_JobExpenseDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.PaymentType, "IX_BS_JobExpenseDetail_PayType").HasFillFactor(90);

            entity.HasIndex(e => new { e.TypeId, e.BDel, e.LStatus }, "ix_BS_JobExpenseDetail_TypeId_bDel_lStatus_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovalRemark).HasMaxLength(200);
            entity.Property(e => e.ApprovalStatusId)
                .HasDefaultValue(1)
                .HasComment("1-Pending, 2 Approved, 3 Hold, 4 Rejected");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillableAmount).HasMaxLength(100);
            entity.Property(e => e.ChequeNo).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hodid)
                .HasDefaultValue(0)
                .HasColumnName("HODID");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jbnumber)
                .HasMaxLength(50)
                .HasColumnName("JBNumber");
            entity.Property(e => e.LStatus)
                .HasDefaultValue(0)
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.MistakeUser).HasMaxLength(50);
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.PayeeName).HasMaxLength(100);
            entity.Property(e => e.ReceiptAmount).HasMaxLength(100);
            entity.Property(e => e.ReceiptNo).HasMaxLength(100);
            entity.Property(e => e.ReceiptType).HasComment("1- Receipts, 2 - Non-Receipted");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobExpenseDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobExpenseDetail_shadow");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovalRemark).HasMaxLength(400);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChequeNo).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hodid).HasColumnName("HODID");
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jbnumber)
                .HasMaxLength(100)
                .HasColumnName("JBNumber");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Location).HasMaxLength(200);
            entity.Property(e => e.PaidTo).HasMaxLength(200);
            entity.Property(e => e.PayeeName).HasMaxLength(200);
            entity.Property(e => e.ReceiptAmount).HasMaxLength(200);
            entity.Property(e => e.ReceiptNo).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.SystemRef).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobExpenseHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobExpenseHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsJobField>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobField", tb => tb.HasTrigger("DelJobFieldTR"));

            entity.HasIndex(e => e.FieldId, "CIX_BS_JobField_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FieldValue).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsJobFirstCheckDetail>(entity =>
        {
            entity.HasKey(e => e.Lid)
                .HasName("PK_BS_FirstCheckDetail")
                .IsClustered(false);

            entity.ToTable("BS_JobFirstCheckDetail", tb => tb.HasTrigger("DeleteJobFirstCheckDetail"));

            entity.HasIndex(e => e.JobId, "CIX_BS_JobFirstCheckDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CeinspectionDate).HasColumnName("CEInspectionDate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobInvoiceInfo>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobInvoiceInfo");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.CurrencyList).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceAmountList).HasMaxLength(400);
            entity.Property(e => e.InvoiceDateList).HasMaxLength(400);
            entity.Property(e => e.InvoiceNoList).HasMaxLength(400);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SchemeDateList).HasMaxLength(400);
            entity.Property(e => e.SchemeNoList).HasMaxLength(400);
            entity.Property(e => e.SchemeTypeList).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsJobLabourAmount>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobLabourAmount");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_BS_JobLabourAmount_JobId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AlabourAmount)
                .HasDefaultValue(0)
                .HasColumnName("ALabourAmount");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BlabourAmount)
                .HasDefaultValue(0)
                .HasColumnName("BLabourAmount");
        });

        modelBuilder.Entity<BsJobNotification>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_JobNotification");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_BS_JobNotification_JobId_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.TypeId, e.BDel }, "ix_BS_JobNotification_TypeId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SentCc)
                .HasMaxLength(800)
                .HasColumnName("SentCC");
            entity.Property(e => e.SentTo).HasMaxLength(400);
            entity.Property(e => e.Status).HasMaxLength(200);
            entity.Property(e => e.Subject).HasMaxLength(200);
            entity.Property(e => e.UniqueRef).HasMaxLength(50);
        });

        modelBuilder.Entity<BsJobNotingDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobNotingDetail", tb =>
                {
                    tb.HasTrigger("DeleteJobNotingDetail");
                    tb.HasTrigger("tr_BS_JobNotingDetail_Delete");
                    tb.HasTrigger("tr_BS_JobNotingDetail_Insert");
                    tb.HasTrigger("tr_BS_JobNotingDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_JobNotingDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Boedate, "ix_BS_JobNotingDetail_BOEDate_includes").HasFillFactor(100);

            entity.HasIndex(e => e.Boeno, "ix_BS_JobNotingDetail_BOENo").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BefromSourceId)
                .HasDefaultValue(0)
                .HasComment("0 - User, 1 - 4Soft, 2 - Auto Fetch From Web")
                .HasColumnName("BEFromSourceId");
            entity.Property(e => e.BegroupId)
                .HasDefaultValue(0)
                .HasColumnName("BEGroupId");
            entity.Property(e => e.BeprovisionalType)
                .HasDefaultValue(0)
                .HasComment("1- SVB, 2- Rexport Bond cancellation")
                .HasColumnName("BEProvisionalType");
            entity.Property(e => e.Boedate).HasColumnName("BOEDate");
            entity.Property(e => e.Boeno)
                .HasMaxLength(10)
                .HasColumnName("BOENo");
            entity.Property(e => e.CustomsStatgeId)
                .HasDefaultValue(0)
                .HasComment("Key - ICE_CustomsStageMS, History Table - BS_JobCustomsStage");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.IceBetype)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("IceBEType");
            entity.Property(e => e.Iecno)
                .HasMaxLength(20)
                .HasColumnName("IECNo");
            entity.Property(e => e.IsBeprovisional).HasColumnName("IsBEProvisional");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModeOfBe)
                .HasMaxLength(20)
                .HasColumnName("ModeOfBE");
            entity.Property(e => e.PriorBestatus)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasComment("N.A.,N -Normal,A -Advance,Y - Prior,C - Prior To Final")
                .HasColumnName("PriorBEStatus");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RmsnonRms)
                .HasDefaultValue(0)
                .HasComment("1 for RMS, 2 For Non-RMS")
                .HasColumnName("RMSNonRMS");
            entity.Property(e => e.Sec48status)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SEC48Status");
            entity.Property(e => e.Svbdate)
                .HasColumnType("datetime")
                .HasColumnName("SVBDate");
            entity.Property(e => e.Svbno)
                .HasMaxLength(50)
                .HasColumnName("SVBNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobNotingDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobNotingDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BefromSourceId).HasColumnName("BEFromSourceId");
            entity.Property(e => e.BegroupId).HasColumnName("BEGroupId");
            entity.Property(e => e.BeprovisionalType).HasColumnName("BEProvisionalType");
            entity.Property(e => e.Boedate).HasColumnName("BOEDate");
            entity.Property(e => e.Boeno)
                .HasMaxLength(20)
                .HasColumnName("BOENo");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(2)
                .IsFixedLength();
            entity.Property(e => e.IceBetype)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("IceBEType");
            entity.Property(e => e.Iecno)
                .HasMaxLength(40)
                .HasColumnName("IECNo");
            entity.Property(e => e.IsBeprovisional).HasColumnName("IsBEProvisional");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModeOfBe)
                .HasMaxLength(40)
                .HasColumnName("ModeOfBE");
            entity.Property(e => e.PriorBestatus)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("PriorBEStatus");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.RmsnonRms).HasColumnName("RMSNonRMS");
            entity.Property(e => e.Sec48status)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SEC48Status");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobPassingDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobPassingDetail", tb =>
                {
                    tb.HasTrigger("DeleteJobPassingDetail");
                    tb.HasTrigger("tr_BS_JobPassingDetail_Delete");
                    tb.HasTrigger("tr_BS_JobPassingDetail_Insert");
                    tb.HasTrigger("tr_BS_JobPassingDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_JobPassingDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AppraisingDate).HasColumnType("datetime");
            entity.Property(e => e.AssessmentDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.QueryDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobPassingDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobPassingDetail_shadow");

            entity.Property(e => e.AppraisingDate).HasColumnType("datetime");
            entity.Property(e => e.AssessmentDate).HasColumnType("datetime");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.QueryDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobPcdstatus>(entity =>
        {
            entity.HasKey(e => e.Lid).IsClustered(false);

            entity.ToTable("BS_JobPCDStatus", tb =>
                {
                    tb.HasTrigger("DeleteJobPCDStatus");
                    tb.HasTrigger("tr_BS_JobPCDStatus_Delete");
                    tb.HasTrigger("tr_BS_JobPCDStatus_Insert");
                    tb.HasTrigger("tr_BS_JobPCDStatus_Update");
                });

            entity.HasIndex(e => e.BillLrstatus, "BillLRStatus_Includes");

            entity.HasIndex(e => e.JobId, "CIX_BS_JobPCDStatus_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.PcdtoBillDispatch, "PCDToBillDispatch_Includes").HasFillFactor(100);

            entity.HasIndex(e => e.PcdtoBillDispatch, "PCDToBillDispatch_Includes1").HasFillFactor(100);

            entity.HasIndex(e => e.ModuleId, "ix_BS_JobPCDStatus_ModuleId_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.PcdfinalTyping, e.PcdfinalChecking }, "ix_BS_JobPCDStatus_PCDFinalTyping_PCDFinalChecking_includes").HasFillFactor(100);

            entity.HasIndex(e => e.PcdtoBillingAdvice, "ix_BS_JobPCDStatus_PCDToBillingAdvice_includes").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_BS_JobPCDStatus_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillLrdate)
                .HasColumnType("datetime")
                .HasColumnName("BillLRDate");
            entity.Property(e => e.BillLrstatus)
                .HasComment("0 - LR Pending, 1 - LR Received, 2 - LR Not Required")
                .HasColumnName("BillLRStatus");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PcdbillingChecking).HasColumnName("PCDBillingChecking");
            entity.Property(e => e.PcddraftInvoice).HasColumnName("PCDDraftInvoice");
            entity.Property(e => e.PcdfinalChecking).HasColumnName("PCDFinalChecking");
            entity.Property(e => e.PcdfinalTyping).HasColumnName("PCDFinalTyping");
            entity.Property(e => e.PcdfinalTypingComment)
                .HasMaxLength(100)
                .HasColumnName("PCDFinalTypingComment");
            entity.Property(e => e.PcdtoBackOffice).HasColumnName("PCDToBackOffice");
            entity.Property(e => e.PcdtoBillDispatch).HasColumnName("PCDToBillDispatch");
            entity.Property(e => e.PcdtoBilling).HasColumnName("PCDToBilling");
            entity.Property(e => e.PcdtoBillingAdvice).HasColumnName("PCDToBillingAdvice");
            entity.Property(e => e.PcdtoCustomer).HasColumnName("PCDToCustomer");
            entity.Property(e => e.PcdtoDispatch).HasColumnName("PCDToDispatch");
            entity.Property(e => e.PcdtoDispatchCustomer).HasColumnName("PCDToDispatchCustomer");
            entity.Property(e => e.PcdtoScrutiny).HasColumnName("PCDToScrutiny");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobPcdstatusShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_JobPCDStatus_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PcdbillingChecking).HasColumnName("PCDBillingChecking");
            entity.Property(e => e.PcddraftInvoice).HasColumnName("PCDDraftInvoice");
            entity.Property(e => e.PcdfinalChecking).HasColumnName("PCDFinalChecking");
            entity.Property(e => e.PcdfinalTyping).HasColumnName("PCDFinalTyping");
            entity.Property(e => e.PcdfinalTypingComment)
                .HasMaxLength(200)
                .HasColumnName("PCDFinalTypingComment");
            entity.Property(e => e.PcdtoBackOffice).HasColumnName("PCDToBackOffice");
            entity.Property(e => e.PcdtoBillDispatch).HasColumnName("PCDToBillDispatch");
            entity.Property(e => e.PcdtoBilling).HasColumnName("PCDToBilling");
            entity.Property(e => e.PcdtoBillingAdvice).HasColumnName("PCDToBillingAdvice");
            entity.Property(e => e.PcdtoCustomer).HasColumnName("PCDToCustomer");
            entity.Property(e => e.PcdtoDispatch).HasColumnName("PCDToDispatch");
            entity.Property(e => e.PcdtoDispatchCustomer).HasColumnName("PCDToDispatchCustomer");
            entity.Property(e => e.PcdtoScrutiny).HasColumnName("PCDToScrutiny");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobSchemeDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_JobSchemeDetail");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_BS_JobSchemeDetail_JobId_bDel").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for License, 2 For Scheme, 3 for certificate")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LicenseAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LicenseDebitCifvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("LicenseDebitCIFValue");
            entity.Property(e => e.PortName).HasMaxLength(50);
            entity.Property(e => e.SchemeDate).HasColumnType("datetime");
            entity.Property(e => e.SchemeName).HasMaxLength(100);
            entity.Property(e => e.SchemeNo).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsJobStatusM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_JobStatusMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustoomerId).HasColumnName("CustoomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.StatusName).HasMaxLength(100);
        });

        modelBuilder.Entity<BsJobSubStatusDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobSubStatusDetail");

            entity.HasIndex(e => e.JobId, "CIX_BS_JobSubStatusDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<BsJobSubStatusM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_JobSubStatusMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsJobTransitHistory>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_JobTransitHistory");

            entity.HasIndex(e => e.JobId, "CIX_BS_JobTransitHistory_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsJobTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_JobTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsJobUnlock>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_JobUnlock");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UnlockDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<BsLabourTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_LabourTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsLrdctype>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_LRDCType");

            entity.Property(e => e.Bdel)
                .HasDefaultValue(0)
                .HasColumnName("bdel");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Lrdctype)
                .HasMaxLength(50)
                .HasColumnName("LRDCtype");
        });

        modelBuilder.Entity<BsLrdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_LRDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("bDel");
            entity.Property(e => e.Beno)
                .HasMaxLength(50)
                .HasColumnName("BENo");
            entity.Property(e => e.Blno)
                .HasMaxLength(50)
                .HasColumnName("BLNo");
            entity.Property(e => e.Cndate).HasColumnName("CNDate");
            entity.Property(e => e.Cnno)
                .HasMaxLength(50)
                .HasColumnName("CNNo");
            entity.Property(e => e.ConsigneeNm).HasMaxLength(500);
            entity.Property(e => e.ConsignorNm).HasMaxLength(500);
            entity.Property(e => e.DeliveryAddr).HasMaxLength(500);
            entity.Property(e => e.DtDate).HasColumnName("dtDate");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LiablePayTo).HasColumnName("liablePayTo");
            entity.Property(e => e.Lrfrom)
                .HasMaxLength(100)
                .HasColumnName("LRFrom");
            entity.Property(e => e.Lrto)
                .HasMaxLength(100)
                .HasColumnName("LRTo");
            entity.Property(e => e.OurJobNo).HasMaxLength(100);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.TelNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate).HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
            entity.Property(e => e.VehicleType).HasMaxLength(50);
            entity.Property(e => e.WayBillNo).HasMaxLength(50);
        });

        modelBuilder.Entity<BsLrpackageDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_LRPackageDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ActualWt).HasMaxLength(50);
            entity.Property(e => e.BDel)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("bDel");
            entity.Property(e => e.Charged).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate).HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrid).HasColumnName("LRId");
            entity.Property(e => e.Packages).HasMaxLength(100);
            entity.Property(e => e.UpdDate).HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsLrpending>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_LRPending");

            entity.Property(e => e.Lid)
                .HasComment("LR Pending Details")
                .HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LStatus)
                .HasDefaultValue(0)
                .HasComment("0 Pending 1  LR Received")
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LrpendingDate)
                .HasColumnType("datetime")
                .HasColumnName("LRPendingDate");
            entity.Property(e => e.LrreceiveDate)
                .HasColumnType("datetime")
                .HasColumnName("LRReceiveDate");
            entity.Property(e => e.PhysicalFileReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.UpdateRemark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsMailFailedItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_MailFailedItem");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SentStatus).HasComment("1- Mail Sent, 0 - Mail Sending Failed");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsMailFailedLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_MailFailedLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LastTimeStamp).HasMaxLength(50);
        });

        modelBuilder.Entity<BsMailSendingTest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_MailSendingTest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.SBody)
                .IsUnicode(false)
                .HasColumnName("sBody");
            entity.Property(e => e.SEmailCc).HasColumnName("sEmailCC");
            entity.Property(e => e.SEmailTo).HasColumnName("sEmailTo");
            entity.Property(e => e.SName)
                .HasMaxLength(500)
                .HasColumnName("sName");
            entity.Property(e => e.SSubject)
                .HasMaxLength(2000)
                .HasColumnName("sSubject");
        });

        modelBuilder.Entity<BsManPosition>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ManPosition");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate).HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MinQualif).HasMaxLength(200);
            entity.Property(e => e.PosReportTo).HasMaxLength(200);
            entity.Property(e => e.PosReqFor).HasMaxLength(200);
            entity.Property(e => e.SalaryRange).HasMaxLength(200);
            entity.Property(e => e.UpdDate).HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsManpowerReq>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ManpowerReq");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdditionalInfo).HasMaxLength(300);
            entity.Property(e => e.AddtionalReq).HasMaxLength(200);
            entity.Property(e => e.ApproveDt).HasColumnType("datetime");
            entity.Property(e => e.BDel)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("bDel");
            entity.Property(e => e.CompleteDt).HasColumnType("datetime");
            entity.Property(e => e.DeptMngrNm).HasMaxLength(100);
            entity.Property(e => e.DeptName).HasMaxLength(200);
            entity.Property(e => e.DtDate).HasColumnName("dtDate");
            entity.Property(e => e.JobResponsibility).HasMaxLength(300);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.MinQualifReq).HasMaxLength(100);
            entity.Property(e => e.PosReportingTo).HasMaxLength(100);
            entity.Property(e => e.PosRequiredFor).HasMaxLength(100);
            entity.Property(e => e.PrevExperiance).HasMaxLength(100);
            entity.Property(e => e.RejectReason).HasMaxLength(400);
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.ReplacementReq).HasMaxLength(100);
            entity.Property(e => e.SalaryRange).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(400);
            entity.Property(e => e.TotalEmpReq).HasMaxLength(50);
            entity.Property(e => e.UpdDate).HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsMiscellaneousCustomerTask>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_MiscellaneousCustomerTask");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ActivityDetail).HasMaxLength(500);
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.DelClintId).HasColumnName("delClintID");
            entity.Property(e => e.DelFollowuUpdate)
                .HasMaxLength(500)
                .HasColumnName("delFollowuUpdate");
            entity.Property(e => e.DelIsApprove).HasColumnName("delIsApprove");
            entity.Property(e => e.DelfollouptDate)
                .HasColumnType("datetime")
                .HasColumnName("delfollouptDate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.EstimateDate).HasColumnType("datetime");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LUserType).HasColumnName("lUserType");
            entity.Property(e => e.OperatioMmsid).HasColumnName("OperatioMMSId");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StatusId)
                .HasDefaultValue(0)
                .HasColumnName("StatusID");
            entity.Property(e => e.Subject).HasMaxLength(500);
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsMissingJob>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_MissingJob");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BoeType).HasColumnName("BOE_Type");
            entity.Property(e => e.ConsigneeCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeId).HasColumnName("ConsigneeID");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer_Ref_No");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.InbondJobNumber).HasMaxLength(50);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
        });

        modelBuilder.Entity<BsMistakeLog>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_MistakeLog_1");

            entity.ToTable("BS_MistakeLog", tb => tb.HasTrigger("DeleteMistakeLog"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustomerName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MistakeDate).HasColumnType("datetime");
            entity.Property(e => e.MistakeRemarks).HasMaxLength(800);
            entity.Property(e => e.ResolveRemark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsMistakeStatusM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_MistakeStatusMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsModuleM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_ModuleMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(50)
                .HasColumnName("GSTIN");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LedgerCode).HasMaxLength(10);
            entity.Property(e => e.ReportName).HasMaxLength(50);
            entity.Property(e => e.SCode)
                .HasMaxLength(10)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsNextUniqueId>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_NextUniqueId");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.NextId).HasColumnName("NextID");
        });

        modelBuilder.Entity<BsNformHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_NFormHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DeliveryId).HasColumnName("DeliveryID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NformClosingDate)
                .HasColumnType("datetime")
                .HasColumnName("NFormClosingDate");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<BsNotificationMode>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_NotificationMode_Lid");

            entity.ToTable("BS_NotificationMode");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsNotificationType>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_NotificationType_Lid");

            entity.ToTable("BS_NotificationType");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsNotificationUser>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_UserNotification_Lid");

            entity.ToTable("BS_NotificationUser");

            entity.HasIndex(e => e.CustUserId, "CIX_BS_NotificationUser_UserId").HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsPackageTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_PackageTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsPageM>(entity =>
        {
            entity.HasKey(e => e.PageId).HasName("PK_BS_PageMSTemp");

            entity.ToTable("BS_PageMS");

            entity.HasIndex(e => e.ParentPage, "IX_BS_PageMS_ParentPage").HasFillFactor(90);

            entity.Property(e => e.PageId).ValueGeneratedNever();
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CGsGpFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cGsGpFlag");
            entity.Property(e => e.CTyp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTyp");
            entity.Property(e => e.CountryId)
                .HasDefaultValue(10)
                .HasColumnName("CountryID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.MenuNode).HasMaxLength(500);
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.PageLink).HasMaxLength(500);
            entity.Property(e => e.PageName).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsPageMs2>(entity =>
        {
            entity.HasKey(e => e.PageId).HasName("PK__BS_PageM__C565B1040BAA4671");

            entity.ToTable("BS_PageMS2");

            entity.Property(e => e.PageId).ValueGeneratedNever();
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CGsGpFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cGsGpFlag");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
        });

        modelBuilder.Entity<BsPassingQueryDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PassingQueryDetail");

            entity.HasIndex(e => new { e.JobId, e.Status }, "CIX_BS_PassingQueryDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FilePath).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.QueryDate).HasColumnType("datetime");
            entity.Property(e => e.QueryNo).HasDefaultValue(1);
            entity.Property(e => e.QueryReply).HasColumnName("Query_Reply");
            entity.Property(e => e.ResolveDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasComment("0 - Pending, 1 Resolved");
        });

        modelBuilder.Entity<BsPassingStageDetail>(entity =>
        {
            entity.HasKey(e => e.LId)
                .HasName("PK_BS_PassingStatusDetail")
                .IsClustered(false);

            entity.ToTable("BS_PassingStageDetail");

            entity.HasIndex(e => new { e.JobId, e.PassingStage }, "CIX_BS_PassingStageDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
        });

        modelBuilder.Entity<BsPassingStageM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_PassingStatus");

            entity.ToTable("BS_PassingStageMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.StageName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsPaymentTypeDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_PaymentTypeDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.TypeId).HasComment("Function Type ie 1 for DO Payment, 2 For Duty Payment Type, 3 For Expense Payment Type");
        });

        modelBuilder.Entity<BsPaymentTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_PaymentTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsPcaconsoleCover>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCAConsoleCover");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsoleId).HasColumnName("ConsoleID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsPcdbackOffice>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDBackOffice");

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDBackOffice_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BackOfficeDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(500);
        });

        modelBuilder.Entity<BsPcdbillingAdvice>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDBillingAdvice");

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDBillingAdvice_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BStatus).HasColumnName("bStatus");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcdbillingDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDBillingDetail");

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDBillingDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CheckingDate).HasColumnType("datetime");
            entity.Property(e => e.DraftInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinalTypingDate).HasColumnType("datetime");
            entity.Property(e => e.GenerlisingDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNumber).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsPcdcheckingDate>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCDCheckingDate");

            entity.HasIndex(e => e.JobId, "ix_BS_PCDCheckingDate_JobId").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CheckingDate).HasColumnType("datetime");
            entity.Property(e => e.Correct).HasMaxLength(1);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcdcustomerDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDCustomerDetail");

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDCustomerDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PcdtoCustomer).HasColumnName("PCDToCustomer");
        });

        modelBuilder.Entity<BsPcddetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDDetail");

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DispatchDeptDate).HasColumnType("datetime");
            entity.Property(e => e.DispatchLocation).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsPcddispatchDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDDispatchDetail", tb =>
                {
                    tb.HasTrigger("DelPCDDispatchDetailTR");
                    tb.HasTrigger("tr_BS_PCDDispatchDetail_Delete");
                    tb.HasTrigger("tr_BS_PCDDispatchDetail_Insert");
                    tb.HasTrigger("tr_BS_PCDDispatchDetail_Update");
                });

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDDispatchDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ConsoleId, "ix_BS_PCDDispatchDetail_ConsoleID_includes").HasFillFactor(90);

            entity.HasIndex(e => new { e.Pcdcustomer, e.DispatchDate }, "ix_BS_PCDDispatchDetail_PCDCustomer_DispatchDate_includes").HasFillFactor(100);

            entity.HasIndex(e => e.Pcdcustomer, "ix_BS_PCDDispatchDetail_PCDCustomer_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CarryingPerson).HasMaxLength(100);
            entity.Property(e => e.ConsoleId)
                .HasDefaultValue(0)
                .HasColumnName("ConsoleID");
            entity.Property(e => e.CourierName).HasMaxLength(100);
            entity.Property(e => e.CoveringLetter)
                .HasMaxLength(200)
                .HasColumnName("Covering_Letter");
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.DispatchDocPath).HasMaxLength(200);
            entity.Property(e => e.DispatchSignPath).HasMaxLength(200);
            entity.Property(e => e.DocketNo).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModuleId).HasDefaultValue(0);
            entity.Property(e => e.Pcdcustomer)
                .HasComment("0 false for Billing Dept Dispatch and 1 true for PCA To Customer Dispatch")
                .HasColumnName("PCDCustomer");
            entity.Property(e => e.PcddeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("PCDDeliveryDate");
            entity.Property(e => e.ReceivedBy).HasMaxLength(100);
            entity.Property(e => e.ReceivedIdproof)
                .HasMaxLength(200)
                .HasColumnName("ReceivedIDProof");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.TypeOfDelivery).HasComment("1 for Hand Delivery and 2 for  Courier");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcddispatchDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_PCDDispatchDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CarryingPerson).HasMaxLength(200);
            entity.Property(e => e.CourierName).HasMaxLength(200);
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.DispatchDocPath).HasMaxLength(400);
            entity.Property(e => e.DocketNo).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Pcdcustomer).HasColumnName("PCDCustomer");
            entity.Property(e => e.PcddeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("PCDDeliveryDate");
            entity.Property(e => e.ReceivedBy).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsPcddocFlowDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDDocFlowDetail", tb => tb.HasTrigger("DelPCDDocFlowDetailTR"));

            entity.HasIndex(e => e.JobId, "IX_BS_PCDDocFlowDetailJobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsCopy).HasDefaultValue(false);
            entity.Property(e => e.IsOriginal).HasDefaultValue(false);
            entity.Property(e => e.LTypeId)
                .HasComment("PCD Dcoument Type- BackOffice = 1, PCACustomer = 2, BillingAdvice = 3, BillingDispatch = 4")
                .HasColumnName("lTypeId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PcddocId).HasColumnName("PCDDocId");
        });

        modelBuilder.Entity<BsPcddocTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_PCDDocTypeMS");

            entity.ToTable("BS_PCDDocTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsPcddocumentDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PCDDocumentDetail", tb => tb.HasTrigger("DelPCDDocumentDetailTR"));

            entity.HasIndex(e => e.JobId, "CIX_BS_PCDDocumentDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.DocId, "ix_BS_PCDDocumentDetail_DocId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PcdtoCustomer).HasColumnName("PCDToCustomer");
            entity.Property(e => e.PcdtoScrutiny).HasColumnName("PCDToScrutiny");
        });

        modelBuilder.Entity<BsPcddocumentM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_PCDDocumentMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("(2 - PN Movement)")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<BsPcddraftInvoice>(entity =>
        {
            entity.HasKey(e => e.Lid).IsClustered(false);

            entity.ToTable("BS_PCDDraftInvoice");

            entity.HasIndex(e => e.Isactive, "Isactive_Includes").HasFillFactor(100);

            entity.HasIndex(e => e.JobId, "ix_BS_PCDDraftInvoice_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DraftInvoiceStartBy).HasMaxLength(400);
            entity.Property(e => e.DraftInvoiceStartdate).HasColumnType("datetime");
            entity.Property(e => e.DraftInvoicedate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FauserName)
                .HasMaxLength(400)
                .HasColumnName("FAUserName");
            entity.Property(e => e.Invamount).HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(50)
                .HasColumnName("INVNO");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcdfileRcvStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCDFileRcvStatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsPcdfileReceivedDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCDFileReceivedDetail", tb =>
                {
                    tb.HasTrigger("tr_BS_PCDFileReceivedDetail_Delete");
                    tb.HasTrigger("tr_BS_PCDFileReceivedDetail_Insert");
                    tb.HasTrigger("tr_BS_PCDFileReceivedDetail_Update");
                });

            entity.HasIndex(e => new { e.CompletedDate, e.Isactive, e.BDel, e.ReceivedTypeId }, "ix_BS_PCDFileReceivedDetail_CompletedDate_Isactive_bDel_ReceivedTypeId").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobId, e.ReceivedTypeId, e.ModuleId, e.BDel, e.Isactive }, "ix_BS_PCDFileReceivedDetail_JobId_ReceivedTypeId_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReceivedTypeId, e.Consolidatedjob }, "ix_BS_PCDFileReceivedDetail_ReceivedTypeId_Consolidatedjob_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReceivedTypeId, e.Isactive, e.BDel, e.ReceivedDate }, "ix_BS_PCDFileReceivedDetail_ReceivedTypeId_Isactive_bDel_ReceivedDate_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReceivedTypeId, e.ReceivedDate, e.BDel }, "ix_BS_PCDFileReceivedDetail_ReceivedTypeId_ReceivedDate_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.ReceivedTypeId, e.BDel, e.Consolidatedjob, e.ReceivedDate }, "ix_BS_PCDFileReceivedDetail_ReceivedTypeId_bDel_Consolidatedjob_ReceivedDate_includes").HasFillFactor(100);

            entity.HasIndex(e => e.ReceivedTypeId, "ix_BS_PCDFileReceivedDetail_ReceivedTypeId_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CrossRemark).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FreightjobNo).HasMaxLength(50);
            entity.Property(e => e.IsReject).HasDefaultValue(false);
            entity.Property(e => e.Isactive).HasComment("0 – Inactive, 1-active");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Onlinebill).HasMaxLength(1);
            entity.Property(e => e.ReceivedDate)
                .HasComment("File Received Date by Billing Scrutiny.")
                .HasColumnType("datetime");
            entity.Property(e => e.ReceivedTypeId).HasComment("1 - Billing Scrutiny (2-Draft Invoice,3-Draft Check,4-Final Type,5-Final Check), 6 -Bill Dispatch");
            entity.Property(e => e.SentDate)
                .HasComment("File Sent Date To Billing Scrutiny.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<BsPcdfileReceivedDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_PCDFileReceivedDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FreightjobNo).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Onlinebill).HasMaxLength(2);
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.SentDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsPcdfinalCheckingDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_PCDFinalCheckingDate");

            entity.HasIndex(e => e.JobId, "ix_BS_PCDFinalCheckingDate_JobId_includes").HasFillFactor(100);

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Correct).HasMaxLength(1);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinalCheckingDate).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcdfinalDispatch>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCDFinalDispatch");

            entity.HasIndex(e => e.JobId, "ix_BS_PCDFinalDispatch_JobId_includes").HasFillFactor(100);

            entity.HasIndex(e => e.ModuleId, "ix_ModuleId_Includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EbillDate)
                .HasColumnType("datetime")
                .HasColumnName("EBillDate");
            entity.Property(e => e.EbillStatus)
                .HasComment("0 - Pending, 1 Sent, 2 - NA")
                .HasColumnName("EBillStatus");
            entity.Property(e => e.FinalDispatchDate).HasColumnType("datetime");
            entity.Property(e => e.Isactive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PhysicalBillStatus).HasComment("0 - Pending, 1 Sent, 2 - NA");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcdfinalTypingDate>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCDFinalTypingDate");

            entity.HasIndex(e => e.Isactive, "ix_BS_PCDFinalTypingDate_Isactive_includes").HasFillFactor(100);

            entity.HasIndex(e => e.JobId, "ix_BS_PCDFinalTypingDate_JobId").HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FauserName)
                .HasMaxLength(400)
                .HasColumnName("FAUserName");
            entity.Property(e => e.FinalTypingDate).HasColumnType("datetime");
            entity.Property(e => e.Invamount).HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(50)
                .HasColumnName("INVNO");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPcdinvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.LId)
                .HasName("PK_PCDInvoiceDetail")
                .IsClustered(false);

            entity.ToTable("BS_PCDInvoiceDetail");

            entity.HasIndex(e => e.JobId, "CIX_PCDInvoiceDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CheckingDate).HasColumnType("datetime");
            entity.Property(e => e.DraftInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinalTypingDate).HasColumnType("datetime");
            entity.Property(e => e.GenerlisingDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsPcdscanDocDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_PCDScanDocDetail");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.JobId).HasColumnName("jobId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Pcddocid).HasColumnName("PCddocid");
        });

        modelBuilder.Entity<BsPcdscanDocumentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_PCDScanDocumentDetail");

            entity.HasIndex(e => new { e.JobId, e.Uploadby }, "ix_BS_PCDScanDocumentDetail_jobId_uploadby").HasFillFactor(100);

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Docpath).HasMaxLength(400);
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.JobId).HasColumnName("jobId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Uploadby).HasColumnName("uploadby");
        });

        modelBuilder.Entity<BsPcdscanDocumentM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_PCDScanDocumentMS");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<BsPcdscrutinyRejectDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PCDScrutinyRejectDetail", tb =>
                {
                    tb.HasTrigger("tr_BS_PCDScrutinyRejectDetail_Delete");
                    tb.HasTrigger("tr_BS_PCDScrutinyRejectDetail_Insert");
                    tb.HasTrigger("tr_BS_PCDScrutinyRejectDetail_Update");
                });

            entity.HasIndex(e => new { e.Isactive, e.BDel }, "ix_BS_PCDScrutinyRejectDetail_Isactive_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => e.JobId, "ix_BS_PCDScrutinyRejectDetail_JobId").HasFillFactor(100);

            entity.HasIndex(e => new { e.RejectId, e.JobId, e.Isactive, e.RejectDate }, "ix_BS_PCDScrutinyRejectDetail_RejectId_JobId_Isactive").HasFillFactor(100);

            entity.HasIndex(e => new { e.RejectTypeId, e.Isactive }, "ix_BS_PCDScrutinyRejectDetail_RejectTypeId_Isactive_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CategoryId)
                .HasDefaultValue(0)
                .HasComment("1 - Transport, 2 - CFS, 3 - KAM, 4 -DO, 10 Other");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FollowupRemark).HasMaxLength(100);
            entity.Property(e => e.Followupdate).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdctype)
                .HasMaxLength(50)
                .HasColumnName("LRDCType");
            entity.Property(e => e.RejectDate).HasColumnType("datetime");
            entity.Property(e => e.RejectRemark).HasMaxLength(200);
        });

        modelBuilder.Entity<BsPcdscrutinyRejectDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_PCDScrutinyRejectDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FollowupRemark).HasMaxLength(200);
            entity.Property(e => e.Followupdate).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Lrdctype)
                .HasMaxLength(100)
                .HasColumnName("LRDCType");
            entity.Property(e => e.RejectDate).HasColumnType("datetime");
            entity.Property(e => e.RejectRemark).HasMaxLength(400);
        });

        modelBuilder.Entity<BsPcdscrutinyStatusDetail>(entity =>
        {
            entity.HasKey(e => e.LId)
                .HasName("PK_PCDScrutinyStatusDetail")
                .IsClustered(false);

            entity.ToTable("BS_PCDScrutinyStatusDetail");

            entity.HasIndex(e => e.JobId, "CIX_PCDScrutinyStatusDetail_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.IsActive, "ix_BS_PCDScrutinyStatusDetail_IsActive_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.ScrutinyStatus, e.IsActive }, "ix_BS_PCDScrutinyStatusDetail_ScrutinyStatus_IsActive_includes").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AuthorRemark).HasMaxLength(200);
            entity.Property(e => e.AuthorisedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RequestRemark).HasMaxLength(200);
            entity.Property(e => e.RequestedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<BsPcdtransportDetail>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_PCDTransportDetail");

            entity.ToTable("BS_PCDTransportDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PersonName).HasMaxLength(50);
            entity.Property(e => e.TransportDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsPendingDocRequestDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_PendingDocRequestDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LastRequestDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsPinCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_PinCode");

            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.District).HasMaxLength(100);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.PostOfficeName).HasMaxLength(100);
            entity.Property(e => e.State).HasMaxLength(100);
        });

        modelBuilder.Entity<BsPortM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PortMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAccountName).HasMaxLength(200);
            entity.Property(e => e.IcePortName)
                .HasMaxLength(200)
                .HasColumnName("ICE_PortName");
            entity.Property(e => e.IcePortType)
                .HasComment("1 - Sea, 2 -Air, 3 ICD")
                .HasColumnName("ICE_PortType");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PortCode).HasMaxLength(50);
            entity.Property(e => e.PortHeadEmail).HasMaxLength(200);
            entity.Property(e => e.PortName).HasMaxLength(100);
        });

        modelBuilder.Entity<BsPortOfLoadingM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_PortOfLoadingMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CityName).HasMaxLength(100);
            entity.Property(e => e.CountryCode).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LoadingPortName).HasMaxLength(100);
            entity.Property(e => e.PortCode).HasMaxLength(100);
            entity.Property(e => e.TempCode).HasMaxLength(100);
        });

        modelBuilder.Entity<BsPreAlertDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PreAlertDoc", tb =>
                {
                    tb.HasTrigger("DeletePreAlert");
                    tb.HasTrigger("tr_BS_PreAlertDoc_Delete");
                    tb.HasTrigger("tr_BS_PreAlertDoc_Insert");
                    tb.HasTrigger("tr_BS_PreAlertDoc_Update");
                });

            entity.HasIndex(e => new { e.BabajiBranchId, e.BDel }, "ix_BS_PreAlertDoc_BabajiBranchId_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => e.CustomerId, "ix_BS_PreAlertDoc_CustomerId_includes").HasFillFactor(100);

            entity.HasIndex(e => e.JobId, "ix_BS_PreAlertDoc_JobId").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_BS_PreAlertDoc_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_BS_PreAlertDoc_bDel_includes1").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_BS_PreAlertDoc_bDel_includes2").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsigneeCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeIdOld).HasColumnName("ConsigneeID_Old");
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.CountryOfConsignment).HasMaxLength(50);
            entity.Property(e => e.CountryOfOrigin).HasMaxLength(50);
            entity.Property(e => e.CustInstruction).HasMaxLength(400);
            entity.Property(e => e.CustRefNo).HasMaxLength(100);
            entity.Property(e => e.CustomerId).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Etadate)
                .HasColumnType("datetime")
                .HasColumnName("ETADate");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.Kamid).HasColumnName("KAMId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LUserType).HasColumnName("lUserType");
            entity.Property(e => e.PortCode).HasMaxLength(20);
            entity.Property(e => e.PortOfLoadingCode).HasMaxLength(20);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPreAlertDocPath>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_PreAlertDocPath", tb => tb.HasTrigger("DeleteJobDocument"));

            entity.HasIndex(e => e.JobId, "CX_BS_PreAlertDocPath_JobId")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.FileName, e.BDel }, "ix_BS_PreAlertDocPath_FileName_bDel").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.IsMobile).HasDefaultValue(0);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPreAlertDocShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_PreAlertDoc_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsigneeCode).HasMaxLength(100);
            entity.Property(e => e.ConsigneeIdOld).HasColumnName("ConsigneeID_Old");
            entity.Property(e => e.ConsigneeName).HasMaxLength(500);
            entity.Property(e => e.CountryOfConsignment).HasMaxLength(40);
            entity.Property(e => e.CountryOfOrigin).HasMaxLength(40);
            entity.Property(e => e.CustInstruction).HasMaxLength(800);
            entity.Property(e => e.CustRefNo).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Etadate)
                .HasColumnType("datetime")
                .HasColumnName("ETADate");
            entity.Property(e => e.JobRefNo).HasMaxLength(100);
            entity.Property(e => e.Kamid).HasColumnName("KAMId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LUserType).HasColumnName("lUserType");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PortCode).HasMaxLength(40);
            entity.Property(e => e.PortOfLoadingCode).HasMaxLength(40);
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsPriorityM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_PriorityMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsProductInvoiceBalance>(entity =>
        {
            entity.HasKey(e => e.LId)
                .HasName("PK_BS_InvoiceDetail_TT")
                .IsClustered(false);

            entity.ToTable("BS_ProductInvoiceBalance", tb => tb.HasTrigger("ProductInvoiceBalance_IUD1"));

            entity.HasIndex(e => new { e.InvoiceId, e.JobId, e.ItemSrNo, e.BDel }, "InvoiceId_JobId_ItemSrNo_bDel");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_BS_ProductInvoiceBalance_JobId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BasicDutyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BasicDutyNotn).HasMaxLength(50);
            entity.Property(e => e.BasicDutyNotnSlNo).HasMaxLength(50);
            entity.Property(e => e.BasicDutyRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Cthno)
                .HasMaxLength(50)
                .HasColumnName("CTHNo");
            entity.Property(e => e.Description).HasMaxLength(800);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EduCessAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EduCessRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.GstdutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTDutyAmount");
            entity.Property(e => e.GstdutyRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("GSTDutyRate");
            entity.Property(e => e.GstexemptAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTExemptAmount");
            entity.Property(e => e.GstexemptRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("GSTExemptRate");
            entity.Property(e => e.Gstflag)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("GSTFlag");
            entity.Property(e => e.HighSecEduCessAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IgstExempDutyNotifNo).HasMaxLength(20);
            entity.Property(e => e.IgstExempDutyNotifSlNo).HasMaxLength(20);
            entity.Property(e => e.IgstLevyDutyNotifNo).HasMaxLength(50);
            entity.Property(e => e.IgstLevyDutyNotifSlNo).HasMaxLength(50);
            entity.Property(e => e.ItemAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ItemAssessableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ItemAssessableValueInr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ItemAssessableValueINR");
            entity.Property(e => e.ItemTotalDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LicenseAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LicenseNo).HasMaxLength(50);
            entity.Property(e => e.LicenseQtyDebited).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.Slno).HasColumnName("SLNo");
            entity.Property(e => e.SocialWelfareSurchargeAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SocialWelfareSurchargeRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitOfProduct).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasMaxLength(50);
        });

        modelBuilder.Entity<BsProductInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_InvoiceMS");

            entity.ToTable("BS_ProductInvoiceDetail");

            entity.HasIndex(e => e.BDel, "ix_BS_ProductInvoiceDetail_bDel_includes");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ixdProdInvoiceBDel").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExchangeRate).HasMaxLength(50);
            entity.Property(e => e.ExchangeRateDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAgencyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceAgencyCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceAgencyExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceDiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceDiscountCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceDiscountExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceFreightAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceFreightCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceFreightExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceHssCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceHssExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceInsuranceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceInsuranceCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceInsuranceExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceInsuranceRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceLoadingAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceLoadingCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceLoadingExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceMiscAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceMiscCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceMiscExRate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InvoiceMiscRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceNo).HasMaxLength(100);
            entity.Property(e => e.InvoiceQuantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceValue).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TermsOfInvoice).HasMaxLength(100);
        });

        modelBuilder.Entity<BsProductInvoiceDetailDeleted>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_ProductInvoiceDetail");

            entity.ToTable("BS_ProductInvoiceDetail_Deleted", tb => tb.HasTrigger("DeleteProductInvoiceDetail"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BalanceQuantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(100);
            entity.Property(e => e.LInvoiceDate).HasColumnName("lInvoiceDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ProductAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductDescription).HasMaxLength(800);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TermsOfInvoice).HasMaxLength(100);
            entity.Property(e => e.UnitOfProduct).HasMaxLength(50);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BsProductInvoiceLicense>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ProductInvoiceLicense");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenseCifvalueAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("LicenseCIFValueAmount");
            entity.Property(e => e.LicenseDutyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LicenseId).HasColumnName("LicenseID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsQueryFieldM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_QueryFieldMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.QueryName).HasMaxLength(50);
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsQuotationCategoryM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationCategoryMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(150)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsQuotationChargesM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationChargesMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SDescription).HasColumnName("sDescription");
            entity.Property(e => e.SName).HasColumnName("sName");
        });

        modelBuilder.Entity<BsQuotationDocDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationDocDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(250);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsQuotationModeDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationModeDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsQuotationRatesDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationRatesDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Charges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExtraCharges).HasMaxLength(1000);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LumpSumCharges).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BsQuotationStatusHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationStatusHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(250);
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsQuotationStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsQuotationTexture>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuotationTexture");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SDescription).HasColumnName("sDescription");
        });

        modelBuilder.Entity<BsQuoteApplicableField>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuoteApplicableFields");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(250)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsQuoteModeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_QuoteModeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(150)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsReasonforPendencyM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_ReasonforPendencyMS");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ReasonforPendency).HasMaxLength(50);
        });

        modelBuilder.Entity<BsReceivedTypeM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_ReceivedTypeMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Monthlytarget)
                .HasMaxLength(100)
                .HasColumnName("monthlytarget");
            entity.Property(e => e.Noofusers).HasColumnName("noofusers");
            entity.Property(e => e.ReceivedName).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(50);
        });

        modelBuilder.Entity<BsReminderCategoriesM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ReminderCategoriesMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(450)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsRmsdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Bs_RMSDetails");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Dtdate).HasColumnName("dtdate");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Luser)
                .ValueGeneratedOnAdd()
                .HasColumnName("luser");
            entity.Property(e => e.Sname).HasMaxLength(50);
        });

        modelBuilder.Entity<BsRoleDetail>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_RoleDetail");

            entity.ToTable("BS_RoleDetail");

            entity.HasIndex(e => e.LRoleId, "CIX_BS_RoleDetail_RoleId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Ctyp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LModuleId).HasColumnName("lModuleId");
            entity.Property(e => e.LRoleId).HasColumnName("lRoleId");
            entity.Property(e => e.LTaskId).HasColumnName("lTaskId");
            entity.Property(e => e.LTypId).HasColumnName("lTypId");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.STaskId)
                .HasMaxLength(255)
                .HasColumnName("sTaskId");
        });

        modelBuilder.Entity<BsRoleM>(entity =>
        {
            entity.HasKey(e => e.LRoleId);

            entity.ToTable("BS_RoleMS");

            entity.Property(e => e.LRoleId).HasColumnName("lRoleId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<BsRptBillBalance>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_rptBillBalance-1");

            entity.ToTable("BS_rptBillBalance");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.DeptName).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinYearName).HasMaxLength(20);
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.ModuleName).HasMaxLength(20);
            entity.Property(e => e.SubDeptName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsRptBillBalanceOld>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_rptBillBalance");

            entity.ToTable("BS_rptBillBalance_old");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DeptName).HasMaxLength(50);
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.SubDeptName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsRptBillSummary>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_rptBillSummary");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.DeptName).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinYearName).HasMaxLength(20);
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.ModuleName).HasMaxLength(20);
            entity.Property(e => e.SubDeptName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsSchemeTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_LicenceTypeMS");

            entity.ToTable("BS_SchemeTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("1 for License, 2 for Scheme, 3 For Certificate")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(200)
                .HasColumnName("sRemarks");
            entity.Property(e => e.SchemeType).HasMaxLength(50);
        });

        modelBuilder.Entity<BsServicesM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ServicesMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsShipCompDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ShipCompDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BDel)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("bDel");
            entity.Property(e => e.ContactName).HasMaxLength(200);
            entity.Property(e => e.ContactNo).HasMaxLength(100);
            entity.Property(e => e.DtDate).HasColumnName("dtDate");
            entity.Property(e => e.EmailId).HasMaxLength(400);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(100);
            entity.Property(e => e.Scode)
                .HasMaxLength(20)
                .HasColumnName("SCode");
            entity.Property(e => e.UpdDate).HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsShipCompMaster>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_ShipCompMaster");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("bDel");
            entity.Property(e => e.CompName).HasMaxLength(100);
            entity.Property(e => e.DtDate).HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Saddress)
                .HasMaxLength(400)
                .IsFixedLength()
                .HasColumnName("SAddress");
            entity.Property(e => e.Scode)
                .HasMaxLength(50)
                .HasColumnName("SCode");
            entity.Property(e => e.ShippingLineCode)
                .HasMaxLength(50)
                .HasColumnName("ShippingLIneCode");
            entity.Property(e => e.TestCode).HasMaxLength(50);
            entity.Property(e => e.UpdDate).HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsStampDutyDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_StampDutyDetail");

            entity.Property(e => e.AdministrationCharges).HasColumnType("decimal(32, 2)");
            entity.Property(e => e.Amount).HasColumnType("decimal(32, 2)");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillNo).HasMaxLength(20);
            entity.Property(e => e.ChallanCopy).HasMaxLength(200);
            entity.Property(e => e.ChallanDate).HasColumnType("datetime");
            entity.Property(e => e.ChallanNo).HasMaxLength(20);
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.Jobid).HasColumnName("jobid");
            entity.Property(e => e.KrishiKalaynRate).HasMaxLength(20);
            entity.Property(e => e.KrishiKalaynamt).HasColumnType("decimal(32, 2)");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.RequestedDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceTaxRate).HasMaxLength(20);
            entity.Property(e => e.Servicetaxamt).HasColumnType("decimal(32, 2)");
            entity.Property(e => e.SwachhBharatRate).HasMaxLength(20);
            entity.Property(e => e.SwachhBharatamt).HasColumnType("decimal(32, 2)");
        });

        modelBuilder.Entity<BsStatusM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_StatusMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<BsTermConditionDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TermConditionDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.STermCondition)
                .HasMaxLength(2000)
                .HasColumnName("sTermCondition");
        });

        modelBuilder.Entity<BsTermConditionM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TermConditionMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(150)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsTestAirBangl>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TestAirBangl");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenseType).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsTestSeaBanglore>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TestSeaBanglore");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerId).HasColumnName("ContainerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Port To Customer, 2 For Port To Warehouse");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LicenseType).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsTestSeaChennai>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_TestSeaChennai");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<BsTimestamp>(entity =>
        {
            entity.HasKey(e => e.ModuleId);

            entity.ToTable("BS_Timestamp", tb =>
                {
                    tb.HasTrigger("DelTimestampTR");
                    tb.HasTrigger("tr_BS_Timestamp_Delete");
                    tb.HasTrigger("tr_BS_Timestamp_Insert");
                    tb.HasTrigger("tr_BS_Timestamp_Update");
                });

            entity.Property(e => e.ModuleId)
                .ValueGeneratedNever()
                .HasComment("1 - CB- Import, 5 CB -Export");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Timestamp).HasMaxLength(50);
        });

        modelBuilder.Entity<BsTimestampShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("BS_Timestamp_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Timestamp).HasMaxLength(100);
        });

        modelBuilder.Entity<BsTrackContainerDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("BS_TrackContainerDetails");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ArrivalStatus).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNumber).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NormalizedShippingLine).HasMaxLength(100);
            entity.Property(e => e.Pod)
                .HasMaxLength(100)
                .HasColumnName("POD");
            entity.Property(e => e.PodarrivalDate)
                .HasColumnType("datetime")
                .HasColumnName("PODArrivalDate");
            entity.Property(e => e.Pol)
                .HasMaxLength(100)
                .HasColumnName("POL");
            entity.Property(e => e.Poo)
                .HasMaxLength(100)
                .HasColumnName("POO");
            entity.Property(e => e.ShippingLine).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VesselName).HasMaxLength(100);
            entity.Property(e => e.Voyage).HasMaxLength(100);
        });

        modelBuilder.Entity<BsTradeLaneM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_TradeLaneMaster");

            entity.ToTable("BS_TradeLaneMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Scode)
                .HasMaxLength(10)
                .HasColumnName("SCode");
            entity.Property(e => e.TradeLaneName).HasMaxLength(100);
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsTransBillCheckM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TransBillCheckMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.TransBillCheckDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsTransM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TransMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.TransMode).HasMaxLength(50);
        });

        modelBuilder.Entity<BsTransitType>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_TransitType");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsTransportationCharge>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TransportationCharges");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChargesApplicable).HasMaxLength(2000);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Particulars).HasMaxLength(2000);
        });

        modelBuilder.Entity<BsTransporterBankDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TransporterBankDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccountName).HasMaxLength(100);
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsTruncatePreventKey>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_TruncatePreventKey");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Doid).HasColumnName("DOId");
            entity.Property(e => e.FrbookingId).HasColumnName("FRBookingId");
            entity.Property(e => e.Igmid).HasColumnName("IGMId");

            entity.HasOne(d => d.Checklist).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.ChecklistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_CheckListDetail");

            entity.HasOne(d => d.Customer).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_CustomerMS");

            entity.HasOne(d => d.Delivery).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.DeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_JobDeliveryDetail");

            entity.HasOne(d => d.Do).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.Doid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_JobDOCollection");

            entity.HasOne(d => d.Duty).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.DutyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_DutyStatusDetail");

            entity.HasOne(d => d.Enquiry).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.EnquiryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_FR_Enquiry");

            entity.HasOne(d => d.Frbooking).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.FrbookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_FOP_Booking");

            entity.HasOne(d => d.Igm).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.Igmid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_IGMDetail");

            entity.HasOne(d => d.Invoice).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_ProductInvoice");

            entity.HasOne(d => d.Maintenance).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.MaintenanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_TR_MaintenanceWork");

            entity.HasOne(d => d.Noting).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.NotingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_JobNotingDetail");

            entity.HasOne(d => d.Passing).WithMany(p => p.BsTruncatePreventKeys)
                .HasForeignKey(d => d.PassingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BS_TruncatePreventKey_BS_JobPassingDetail");
        });

        modelBuilder.Entity<BsUserActivity>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_UserActivity");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OnetimePassword).HasMaxLength(50);
            entity.Property(e => e.ValidFromDate).HasColumnType("datetime");
            entity.Property(e => e.ValidTillDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BsUserBranch>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_User_Branch");

            entity.ToTable("BS_User_Branch");

            entity.HasIndex(e => e.UserId, "CIX_BS_User_Branch_UserId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsUserCustomer>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_User_Customer");

            entity.ToTable("BS_User_Customer");

            entity.HasIndex(e => e.UserId, "CIX_User_Customer_UserId").HasFillFactor(90);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<BsUserDetail>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_UserDetail");

            entity.ToTable("BS_UserDetail", tb => tb.HasTrigger("DelUserDetailTR"));

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Empcode)
                .HasMaxLength(50)
                .HasColumnName("EMPCode");
            entity.Property(e => e.FaLedgerCode)
                .HasMaxLength(20)
                .HasColumnName("FA_LedgerCode");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.MobileNo).HasMaxLength(100);
        });

        modelBuilder.Entity<BsUserLoginHistory>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_UserLoginHistory");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(400)
                .HasColumnName("IPAddress");
            entity.Property(e => e.IsMobile).HasComment("1- Login From Mobile, 0 - Login From Web");
            entity.Property(e => e.LoginDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModuleId).HasDefaultValue(0);
        });

        modelBuilder.Entity<BsUserM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_UserMS", tb => tb.HasTrigger("AppUser"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CodeValidTillDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IpAddress).HasMaxLength(400);
            entity.Property(e => e.IsAvailable).HasDefaultValue(false);
            entity.Property(e => e.LRoleId).HasColumnName("lRoleId");
            entity.Property(e => e.LType)
                .HasComment("lType -1 is for Super Admin , lType 1 is for Babaji Employee and 2 is for Customer Employee")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LastCodeResetDate).HasColumnType("datetime");
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.LoginActive).HasDefaultValue(true);
            entity.Property(e => e.ResetCode).HasDefaultValue(true);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SEmail)
                .HasMaxLength(100)
                .HasColumnName("sEmail");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SignImgPath).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<BsUserToken>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__BS_UserT__DE11596FA853275B");

            entity.ToTable("BS_UserTokens");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.BsUserTokens)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__BS_UserTo__UserI__35083766");
        });

        modelBuilder.Entity<BsVarientM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_CustomerVarientMS");

            entity.ToTable("BS_VarientMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<BsVehicleMaster>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_VehicleMaster");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .HasColumnName("sRemarks");
            entity.Property(e => e.Sname)
                .HasMaxLength(50)
                .HasColumnName("SName");
        });

        modelBuilder.Entity<BsVendorLogin>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_VendorLogin");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailId)
                .HasMaxLength(200)
                .HasColumnName("EmailID");
            entity.Property(e => e.LoginDate).HasColumnType("datetime");
            entity.Property(e => e.Passcode).HasMaxLength(50);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.VendorTypeId).HasColumnName("VendorTypeID");
        });

        modelBuilder.Entity<BsVendorRegistration>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_VendorRegistrationFOM1");

            entity.ToTable("BS_VendorRegistration");

            entity.Property(e => e.Lid).HasColumnName("LId");
            entity.Property(e => e.AccountName).HasMaxLength(200);
            entity.Property(e => e.AccountNumber).HasMaxLength(100);
            entity.Property(e => e.Addressr1).HasMaxLength(400);
            entity.Property(e => e.Addressr2).HasMaxLength(400);
            entity.Property(e => e.AnyOtherRemark).HasMaxLength(400);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankBranchDel)
                .HasMaxLength(100)
                .HasColumnName("BankBranch_del");
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BillingAddres).HasMaxLength(400);
            entity.Property(e => e.BillingCity)
                .HasMaxLength(100)
                .HasColumnName("billingCity");
            entity.Property(e => e.BillingEmail).HasMaxLength(400);
            entity.Property(e => e.BillingMobilNo).HasMaxLength(20);
            entity.Property(e => e.BillingName).HasMaxLength(100);
            entity.Property(e => e.BillingPinNo).HasMaxLength(10);
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.CompanyIncorporationNo).HasMaxLength(50);
            entity.Property(e => e.ContactPersonEmailAddressDel)
                .HasMaxLength(400)
                .HasColumnName("ContactPersonEmailAddress_del");
            entity.Property(e => e.ContactPersonNameDel)
                .HasMaxLength(200)
                .HasColumnName("ContactPersonName_del");
            entity.Property(e => e.ContactPersonNumberDel)
                .HasMaxLength(20)
                .HasColumnName("ContactPersonNumber_del");
            entity.Property(e => e.Cstnumber)
                .HasMaxLength(50)
                .HasColumnName("CSTNumber");
            entity.Property(e => e.CustomerEmailId)
                .HasMaxLength(200)
                .HasColumnName("CustomerEmailID");
            entity.Property(e => e.DateofIncorporation).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExciseCopyPath).HasMaxLength(400);
            entity.Property(e => e.ExciseRegistatNumber).HasMaxLength(50);
            entity.Property(e => e.FaxNo).HasMaxLength(50);
            entity.Property(e => e.FilAproveCopy).HasMaxLength(400);
            entity.Property(e => e.Gst).HasMaxLength(200);
            entity.Property(e => e.Gstdir)
                .HasMaxLength(400)
                .HasColumnName("GSTDir");
            entity.Property(e => e.Hodid).HasColumnName("HODId");
            entity.Property(e => e.Ieccode)
                .HasMaxLength(50)
                .HasColumnName("IECCode");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.KycFormCopy).HasMaxLength(400);
            entity.Property(e => e.Micrcode)
                .HasMaxLength(50)
                .HasColumnName("MICRCode");
            entity.Property(e => e.NameofVendor).HasMaxLength(200);
            entity.Property(e => e.Neftcode)
                .HasMaxLength(50)
                .HasColumnName("NEFTCode");
            entity.Property(e => e.NetProfitLastThreeFinancialYearsEnding).HasMaxLength(50);
            entity.Property(e => e.NoOfBranchDel)
                .HasMaxLength(50)
                .HasColumnName("NoOfBranch_del");
            entity.Property(e => e.OtherCopyPath).HasMaxLength(400);
            entity.Property(e => e.PancopyPath)
                .HasMaxLength(400)
                .HasColumnName("PANCopyPath");
            entity.Property(e => e.Pannumber)
                .HasMaxLength(50)
                .HasColumnName("PANNumber");
            entity.Property(e => e.PaymentsTerms).HasMaxLength(50);
            entity.Property(e => e.PinNo).HasMaxLength(10);
            entity.Property(e => e.PlaceOfIncorportaion).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Rtgsnumber)
                .HasMaxLength(50)
                .HasColumnName("RTGSNumber");
            entity.Property(e => e.ServiceTaxNumber).HasMaxLength(50);
            entity.Property(e => e.Ssinumber)
                .HasMaxLength(50)
                .HasColumnName("SSINumber");
            entity.Property(e => e.Tannumber)
                .HasMaxLength(50)
                .HasColumnName("TANNumber");
            entity.Property(e => e.TeliphonNo).HasMaxLength(20);
            entity.Property(e => e.TurnoverLastThreeFinancialYears).HasMaxLength(50);
            entity.Property(e => e.Uid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UID");
            entity.Property(e => e.Vatnumber)
                .HasMaxLength(50)
                .HasColumnName("VATNumber");
            entity.Property(e => e.WebSiteAddres).HasMaxLength(400);
        });

        modelBuilder.Entity<BsWareHouseM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("BS_WareHouseMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BStatus).HasColumnName("bStatus");
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.ContactName).HasMaxLength(100);
            entity.Property(e => e.ContactNumber).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailId).HasMaxLength(100);
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SAddress)
                .HasMaxLength(200)
                .HasColumnName("sAddress");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<BsWarehouseTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("BS_WarehouseTypeMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.TypeName).HasMaxLength(50);
        });

        modelBuilder.Entity<BsWhatsNew>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BS_Whats__3214EC2705EEBAAE");

            entity.ToTable("BS_WhatsNew", tb => tb.HasTrigger("SendNotify"));

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DDate)
                .HasColumnType("datetime")
                .HasColumnName("dDate");
            entity.Property(e => e.Heading).HasMaxLength(100);
        });

        modelBuilder.Entity<BsWhatsNewDoc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_WhatsNewDoc", tb => tb.HasTrigger("CopyImage"));

            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.Lid).HasColumnName("lid");
        });

        modelBuilder.Entity<BsXmljobextraDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BS_xmljobextra_detail");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.BrokerId)
                .HasMaxLength(50)
                .HasColumnName("BrokerID");
            entity.Property(e => e.BrokerName).HasMaxLength(100);
            entity.Property(e => e.ConsigneeId)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeID");
            entity.Property(e => e.Countryoforigin).HasMaxLength(10);
            entity.Property(e => e.CustomerId)
                .HasMaxLength(50)
                .HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExportCountry).HasMaxLength(10);
            entity.Property(e => e.ImporterId)
                .HasMaxLength(50)
                .HasColumnName("ImporterID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Preferencecode1).HasMaxLength(50);
            entity.Property(e => e.RelatedPartyFlag).HasMaxLength(10);
            entity.Property(e => e.WeightUom).HasMaxLength(10);
        });

        modelBuilder.Entity<CbBillingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CB_BillingDetail");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CapCriteriaId).HasColumnName("CapCriteriaID");
            entity.Property(e => e.CapMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CapMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ChargeCode).HasMaxLength(10);
            entity.Property(e => e.Cmid).HasColumnName("CMID");
            entity.Property(e => e.Condition).IsUnicode(false);
            entity.Property(e => e.ContainerTypeId).HasColumnName("ContainerTypeID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");
            entity.Property(e => e.FabookId)
                .HasMaxLength(5)
                .HasColumnName("FABookId");
            entity.Property(e => e.Heading).HasMaxLength(500);
            entity.Property(e => e.IsBillDone)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsMultiple)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsMultipleOnKg)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsMultipleOnKG");
            entity.Property(e => e.JobTypeId).HasColumnName("JobTypeID");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.LoadedDeStuffId).HasColumnName("LoadedDeStuffID");
            entity.Property(e => e.ModeId).HasColumnName("ModeID");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Quantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RangeCriteriaId).HasColumnName("RangeCriteriaID");
            entity.Property(e => e.RangeFrom).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RangeTo).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.RmsnonRmsid).HasColumnName("RMSNonRMSID");
            entity.Property(e => e.TypeOfBeid).HasColumnName("TypeOfBEID");
            entity.Property(e => e.TypeOfShipmentId).HasColumnName("TypeOfShipmentID");
            entity.Property(e => e.Uomid).HasColumnName("UOMID");
            entity.Property(e => e.Updatedate)
                .HasColumnType("datetime")
                .HasColumnName("updatedate");
            entity.Property(e => e.UserSystemId).HasColumnName("UserSystemID");
        });

        modelBuilder.Entity<CbBillingDetailUserDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__CB_Billi__DE105D079FF31AC5");

            entity.ToTable("CB_BillingDetail_UserDetails");

            entity.HasIndex(e => new { e.CbLid, e.Jobno }, "ix_CB_BillingDetail_UserDetails_cb_lid_jobno").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.CbLid).HasColumnName("cb_lid");
            entity.Property(e => e.ChargeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChargeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("chargeName");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createddate)
                .HasColumnType("datetime")
                .HasColumnName("createddate");
            entity.Property(e => e.Jobid).HasColumnName("jobid");
            entity.Property(e => e.Jobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("jobno");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CbCapCriteriaM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("CB_CapCriteriaMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.CapCriteriaName).HasMaxLength(100);
            entity.Property(e => e.Cccode)
                .HasMaxLength(6)
                .HasColumnName("CCCode");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Remarks).HasMaxLength(250);
        });

        modelBuilder.Entity<CbContractDoc>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("CB_ContractDoc");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cbid).HasColumnName("CBId");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CbDivisionM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("CB_DivisionMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DivisionCode).HasMaxLength(6);
            entity.Property(e => e.DivisionHodname)
                .HasMaxLength(100)
                .HasColumnName("DivisionHODName");
            entity.Property(e => e.DivisionManualId)
                .HasColumnType("numeric(9, 0)")
                .HasColumnName("Division_Manual_ID");
            entity.Property(e => e.DivisionName).HasMaxLength(100);
            entity.Property(e => e.DraftBookCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DraftBook_Code");
            entity.Property(e => e.Email).HasColumnType("text");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.SRemarks)
                .HasMaxLength(250)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<CbEntryMode>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CB_EntryMode");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EntryMode).HasMaxLength(100);
        });

        modelBuilder.Entity<CbFaBookM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__CB_FA_Bo__DE105D071D2D6B18");

            entity.ToTable("CB_FA_BookMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BookCode)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.BookName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatesDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CbRangeCriteriaM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("CB_RangeCriteriaMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.RangeCriteriaName).HasMaxLength(100);
            entity.Property(e => e.Rccode)
                .HasMaxLength(6)
                .HasColumnName("RCCode");
            entity.Property(e => e.Remarks).HasMaxLength(250);
        });

        modelBuilder.Entity<CcUom>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_CB_UOM");

            entity.ToTable("CC_UOM");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CiCommodityM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CI_CommodityMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Isocode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ISOCode");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CiContainerDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("CI_ContainerDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(20);
            entity.Property(e => e.ContainerSize).HasMaxLength(20);
            entity.Property(e => e.ContainerType).HasMaxLength(20);
            entity.Property(e => e.ContainerValue).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CiInsuranceDocument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CI_InsuranceDocuments");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.FilePath).HasMaxLength(100);
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CiInsuranceHistory>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("CI_InsuranceHistory");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(250);
        });

        modelBuilder.Entity<CiInsuranceRequest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CI_InsuranceRequest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdditionalInfo).HasMaxLength(2000);
            entity.Property(e => e.Address).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillingAddress).HasMaxLength(100);
            entity.Property(e => e.BillingCity).HasMaxLength(50);
            entity.Property(e => e.BillingGstin)
                .HasMaxLength(15)
                .HasColumnName("BillingGSTIN");
            entity.Property(e => e.BillingName).HasMaxLength(100);
            entity.Property(e => e.BillingPincode).HasMaxLength(10);
            entity.Property(e => e.BillingState).HasMaxLength(50);
            entity.Property(e => e.Buyer).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Commodity).HasMaxLength(100);
            entity.Property(e => e.ContainerNo).HasMaxLength(20);
            entity.Property(e => e.ContainerSize).HasMaxLength(200);
            entity.Property(e => e.ContainerValue).HasColumnType("decimal(12, 4)");
            entity.Property(e => e.CoverageFrom).HasMaxLength(100);
            entity.Property(e => e.CoverageStartDt).HasColumnType("datetime");
            entity.Property(e => e.CoverageTo).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.InsuredName).HasMaxLength(100);
            entity.Property(e => e.IsConditionsAccepted).HasMaxLength(5);
            entity.Property(e => e.IsbillTo).HasColumnName("ISBillTo");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NetPremium).HasMaxLength(20);
            entity.Property(e => e.Pincode).HasMaxLength(10);
            entity.Property(e => e.ReferenceNo).HasMaxLength(100);
            entity.Property(e => e.Seller).HasMaxLength(100);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.TransitMode).HasMaxLength(10);
            entity.Property(e => e.TransitType).HasMaxLength(10);
            entity.Property(e => e.UniqueId).HasMaxLength(30);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CiInsuranceResponse>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CI_InsuranceResponse");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CertificateNo).HasMaxLength(50);
            entity.Property(e => e.CertificateUrl).HasMaxLength(500);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gst)
                .HasMaxLength(50)
                .HasColumnName("GST");
            entity.Property(e => e.InvoiceUrl).HasMaxLength(500);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Msg).HasMaxLength(100);
            entity.Property(e => e.NetPremium).HasMaxLength(50);
            entity.Property(e => e.PolicyNo).HasMaxLength(100);
            entity.Property(e => e.Premium).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<CiStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CI_StatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CiTransModeM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CI_TransModeMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CmBackOfficeDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_BackOfficeDocument");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(250);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmConsolidateJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_ConsolidateJobDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BsjobId).HasColumnName("BSJobId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmContRecdCfsdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_ContRecdCFSDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContRecdAtCfsdate).HasColumnName("ContRecdAtCFSDate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_Documents");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmJobCfsrefundStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_JobCFSRefundStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FollowUpDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_JobDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(250);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmMovementDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_MovementDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CfscontainerCount).HasColumnName("CFSContainerCount");
            entity.Property(e => e.Cfsid).HasColumnName("CFSId");
            entity.Property(e => e.ContCfsreceivedDate).HasColumnName("ContCFSReceivedDate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NominatedCfsid).HasColumnName("NominatedCFSId");
            entity.Property(e => e.ProcessedOn).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(350);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CmUnprocessJobHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CM_UnprocessJobHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsProcessed).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(350);
        });

        modelBuilder.Entity<ContractMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ContractMaster");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContractEndDate).HasColumnType("datetime");
            entity.Property(e => e.ContractName).HasMaxLength(500);
            entity.Property(e => e.ContractStartDate).HasColumnType("datetime");
            entity.Property(e => e.ContractUid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ContractUID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DivisionId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<Contractdataentry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("contractdataentry");

            entity.Property(e => e.BDel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CapCriteriaId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CapCriteriaID");
            entity.Property(e => e.CapMax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CapMin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChargeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cmid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CMID");
            entity.Property(e => e.ContainerTypeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ContainerTypeID");
            entity.Property(e => e.CreatedDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DivisionId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Heading)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JobTypeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("JobTypeID");
            entity.Property(e => e.Lid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lid");
            entity.Property(e => e.LoadedDeStuffId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LoadedDeStuffID");
            entity.Property(e => e.ModeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ModeID");
            entity.Property(e => e.PortId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PortID");
            entity.Property(e => e.RangeCriteriaId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RangeCriteriaID");
            entity.Property(e => e.RangeFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RangeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RmsnonRmsid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSNonRMSID");
            entity.Property(e => e.TypeOfBeid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TypeOfBEID");
            entity.Property(e => e.TypeOfShipmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TypeOfShipmentID");
            entity.Property(e => e.Uomid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOMID");
            entity.Property(e => e.UserSystemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserSystemID");
        });

        modelBuilder.Entity<CrmActivityLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_ActivityLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Description).HasMaxLength(850);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LType)
                .HasComment("1 => Lead, 2 => Opportunity, 3 => Enquiry")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmBudgetM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_Table_1");

            entity.ToTable("CRM_BudgetMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmBudgetUnitM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_BudgetUnitMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmBusinessCategoryM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_BusinessCategoryMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmCategoryM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_CategoryMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmCharequirement>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_CHARequirement");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Commodity).HasMaxLength(150);
            entity.Property(e => e.ContainerTypeId).HasComment("");
            entity.Property(e => e.Dpd)
                .HasDefaultValue(true)
                .HasComment("0 - No, 1 - Yes")
                .HasColumnName("DPD");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModeId).HasComment("1 - Air, 2- Sea");
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.PortName).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmCompanyM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_CompanyMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(450);
            entity.Property(e => e.AddressLine1).HasMaxLength(450);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.AddressLine3).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContactNo).HasMaxLength(100);
            entity.Property(e => e.ContactPerson).HasMaxLength(100);
            entity.Property(e => e.CustomerId).HasComment("Displays the id for customer if entry exists in babaji table BS_CustomerMS");
            entity.Property(e => e.Description).HasMaxLength(450);
            entity.Property(e => e.DocFolder).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsMaster).HasComment("Denotes whther this customer has entry in babaji master table BS_CustomerMS or not.");
            entity.Property(e => e.LType)
                .HasDefaultValue(1)
                .HasComment("1 => Prospect, 2 => Customer")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(100);
            entity.Property(e => e.OfficeLocation).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.StatusId)
                .HasDefaultValue(true)
                .HasComment("0 => Inactive, 1 => Active");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.Website).HasMaxLength(100);
        });

        modelBuilder.Entity<CrmCompanyTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_CompanyTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmContactDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_CRM_Conat");

            entity.ToTable("CRM_ContactDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(450);
            entity.Property(e => e.AlternatePhone).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContactName).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(450);
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmContactDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_ContactDocs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocName).HasMaxLength(150);
            entity.Property(e => e.DocPath).HasMaxLength(250);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmContainerTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_ContainerTypeMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmCurrentStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_CurrentStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.StatusName).HasMaxLength(500);
        });

        modelBuilder.Entity<CrmCustomerUser>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Customer_User");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmCustomerVisitReport>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_CustomerVisitReport");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Latitude).HasMaxLength(450);
            entity.Property(e => e.Longitude).HasMaxLength(450);
            entity.Property(e => e.Remark).HasMaxLength(850);
            entity.Property(e => e.VisitDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CrmEnquiry>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Enquiry");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CompanyType).HasComment("1. Corporate, 2. Partnership , 3. LLP");
            entity.Property(e => e.CustRef).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EnquiryNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Notes).HasMaxLength(4000);
            entity.Property(e => e.PaymentTerms).HasMaxLength(50);
            entity.Property(e => e.TotalEmp).HasMaxLength(50);
            entity.Property(e => e.Turnover).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VolumeExpected).HasMaxLength(50);
            entity.Property(e => e.YearsInService).HasMaxLength(50);
        });

        modelBuilder.Entity<CrmEnquiryDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_EnquiryDocs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(350);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(150);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmEnquiryHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_EnquiryHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
            entity.Property(e => e.StatusId).HasComment("0 =>Sent for approval, 1=> approved, 2=> rejected ");
        });

        modelBuilder.Entity<CrmEnquiryService>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Enquiry_Services");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmEnquiryStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_EnquiryStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(250);
        });

        modelBuilder.Entity<CrmFollowupHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_FollowupHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsCompleted).HasComment("1 => Completed, 0 => Cancelled, null => Pending");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmFreightPortRequirement>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_FreightPortRequirement");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PortName).HasMaxLength(50);
            entity.Property(e => e.TypeId)
                .HasDefaultValue(false)
                .HasComment("0 - POL, 1 - POD");
        });

        modelBuilder.Entity<CrmFreightRequirement>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_FreightRequirement");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Commodity).HasMaxLength(150);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModeId).HasComment("1- Air, 2- Sea");
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.TypeId).HasComment("0 - Import, 1 - Export");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmLead>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_CRM_LeadMS");

            entity.ToTable("CRM_Leads");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(450);
            entity.Property(e => e.AlternatePhone).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BusinessCategoryId).HasColumnName("BusinessCategoryID");
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.CompanyTypeId).HasColumnName("CompanyTypeID");
            entity.Property(e => e.ContactName).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(450);
            entity.Property(e => e.Designation).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.EmployeeCount).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LeadRefNo).HasMaxLength(50);
            entity.Property(e => e.LeadSourceValue).HasMaxLength(50);
            entity.Property(e => e.MobileNo).HasMaxLength(50);
            entity.Property(e => e.SectorId).HasColumnName("SectorID");
            entity.Property(e => e.Turnover).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmLeadEnquiry>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_LeadEnquiry");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EnquiryNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Notes).HasMaxLength(850);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmLeadService>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Lead_Service");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpectedCloseDate).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Requirement).HasMaxLength(1000);
            entity.Property(e => e.SubProductId).HasColumnName("SubProductID");
            entity.Property(e => e.Uomid).HasColumnName("UOMId");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VolumeExpected).HasMaxLength(50);
        });

        modelBuilder.Entity<CrmLeadSourceM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_LeadSourceMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmLeadStageHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_LeadStageHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CrmLeadStageM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_CRM_LeadStageMS_1");

            entity.ToTable("CRM_LeadStageMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmLeadStageMsOld>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_CRM_LeadStageMS");

            entity.ToTable("CRM_LeadStageMS_old");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmLeadStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_LeadStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Kyc).HasColumnName("KYC");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmLeadUser>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Lead_User");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmMailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CRM_MailLog");

            entity.Property(e => e.EmailBcc).HasMaxLength(550);
            entity.Property(e => e.EmailBody).HasMaxLength(4000);
            entity.Property(e => e.EmailCc).HasMaxLength(550);
            entity.Property(e => e.EmailTo).HasMaxLength(550);
            entity.Property(e => e.Lid).HasColumnName("lid");
        });

        modelBuilder.Entity<CrmMomAgendum>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_MOM_Agenda");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PersonName).HasMaxLength(1250);
            entity.Property(e => e.Topic).HasMaxLength(2500);
        });

        modelBuilder.Entity<CrmMomAttendee>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_MOM_Attendee");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UserEmail).HasMaxLength(50);
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<CrmOpportunity>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Opportunities");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(450);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContactName).HasMaxLength(50);
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OpportunityRefNo).HasMaxLength(50);
            entity.Property(e => e.StageId).HasColumnName("StageID");
            entity.Property(e => e.UpdBartdate)
                .HasColumnType("datetime")
                .HasColumnName("updBARTDate");
            entity.Property(e => e.UpdBartuser).HasColumnName("updBARTUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmOpportunityBudget>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Opportunity_Budget");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BudgetValue).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmOpportunityMom>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Opportunity_MOM");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Observers).HasMaxLength(450);
            entity.Property(e => e.Resources).HasMaxLength(450);
            entity.Property(e => e.SpecialNotes).HasMaxLength(450);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmOpportunityStageHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_OpportunityStageHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmOpportunityStageM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_OpportunityStageMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmPlanningEvent>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_PlanningEvent");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CompanyName).HasMaxLength(250);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsReminded).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Notes).HasMaxLength(650);
            entity.Property(e => e.PersonName).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmRequirement>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Requirement");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Notes).HasMaxLength(550);
        });

        modelBuilder.Entity<CrmRoleM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_RoleMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmShareLead>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Share_Lead");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(350);
        });

        modelBuilder.Entity<CrmSubProductM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_SubProductMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.Scode)
                .HasMaxLength(10)
                .HasColumnName("SCode");
            entity.Property(e => e.SubProductName).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmTask>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_CRM_Activities");

            entity.ToTable("CRM_Task");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ActivityTypeId).HasComment("1=>Task,2=>MOM");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.DueTime).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Notes).HasMaxLength(450);
            entity.Property(e => e.ReferenceLink).HasMaxLength(250);
            entity.Property(e => e.RemindTime).HasColumnType("datetime");
            entity.Property(e => e.Subject).HasMaxLength(250);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmTaskFollowup>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_TaskFollowup");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
        });

        modelBuilder.Entity<CrmTaskHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_TaskHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmTaskNotification>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Task_Notification");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NotificationId).HasComment("1=> Email, 2=>SMS, 3=> Popup");
        });

        modelBuilder.Entity<CrmTaskRelatedToM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_TaskRelatedToMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmTaskStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_TaskStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CrmTaskUser>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_Task_User");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmUserCompany>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_User_Company");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmUserLocation>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_UserLocation");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmUserM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CRM_UserMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.LoginAllowTo).HasComment("1 => All, 2 =>Web, 3 => Mobile");
            entity.Property(e => e.PhoneNo).HasMaxLength(50);
            entity.Property(e => e.Profile).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.StatusId)
                .HasDefaultValue(true)
                .HasComment("0 => inactive, 1 => active");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<CrmUserReporting>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_UserReporting");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<CrmVisitCategory>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("CRM_VisitCategory");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.CategoryName).HasMaxLength(100);
        });

        modelBuilder.Entity<CrmVisitReport>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_VisitReport");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Latitude).HasMaxLength(450);
            entity.Property(e => e.Longitude).HasMaxLength(450);
            entity.Property(e => e.Remark).HasMaxLength(450);
            entity.Property(e => e.VisitDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CrmWarehouseRequirement>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_WarehouseRequirement");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ActivityTypeId).HasComment("0  - Bonded, 1 - General");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Commodity).HasMaxLength(150);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Location).HasMaxLength(250);
            entity.Property(e => e.RequirementUnit1).HasComment("1 - sq.ft, 2 - sq.mt");
            entity.Property(e => e.SpaceRequirement1).HasMaxLength(50);
            entity.Property(e => e.SpaceRequirement2).HasMaxLength(50);
            entity.Property(e => e.Specification).HasMaxLength(350);
            entity.Property(e => e.StorageTypeId)
                .HasDefaultValue(false)
                .HasComment("0 - Dedicated, 1 - Value Added");
            entity.Property(e => e.Tenure).HasMaxLength(150);
            entity.Property(e => e.TypeId)
                .HasDefaultValue(true)
                .HasComment("0 - Closed, 1 - Open");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.ValueAddedServices).HasMaxLength(350);
        });

        modelBuilder.Entity<CrmWarehouseStructureTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("CRM_WarehouseStructureTypeMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<CustomerImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CustomerImport");

            entity.Property(e => e.Code).HasMaxLength(255);
            entity.Property(e => e.CustomeName).HasMaxLength(255);
            entity.Property(e => e.Designation)
                .HasMaxLength(255)
                .HasColumnName("Designation ");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("Email ");
            entity.Property(e => e.EmployeeName).HasMaxLength(255);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.SrNo)
                .HasMaxLength(255)
                .HasColumnName("Sr#No");
        });

        modelBuilder.Entity<DataRate>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("dataRates");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Employee1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee1");

            entity.Property(e => e.EmployeeId).ValueGeneratedOnAdd();
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Test)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("test");
        });

        modelBuilder.Entity<ExAutoAirExpenseRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoAirExpenseRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CustomerId)
                .HasDefaultValue(0)
                .HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobAirExpense>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobAirExpense", tb => tb.HasTrigger("EX_AutoJobAirExpense_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransportBy).HasComment("1 For Babaji 2 For Customer");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaAhmedExp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaAhmedExp");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaAnklExp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaAnklExp", tb => tb.HasTrigger("EX_AutoJobSeaAnkl_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaChennaiExp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaChennaiExp");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaExpense>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaExpense", tb => tb.HasTrigger("EX_AutoJobSeaExpense_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransportBy).HasComment("1 For Babaji 2 For Customer");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaHaziraExp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaHaziraExp", tb => tb.HasTrigger("EX_AutoJobSeaHazira_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaJaipurExp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaJaipurExp", tb => tb.HasTrigger("EX_AutoJobSeaJaipur_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoJobSeaKolkExp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("EX_AutoJobSeaKolkExp");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaAhmedRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaAhmedRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaAnklRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaAnklRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaChennaiRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaChennaiRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaExpenseRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaExpenseRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaHaziraRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaHaziraRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaJaipurRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaJaipurRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExAutoSeaKolkRule>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_AutoSeaKolkRule");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.PayPerCont).HasDefaultValue(false);
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExBillingInstruction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EX_BillingInstruction");

            entity.Property(e => e.AlliedAgencyRemark).HasMaxLength(200);
            entity.Property(e => e.AlliedAgencyService).HasMaxLength(100);
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Instruction).HasMaxLength(200);
            entity.Property(e => e.Instruction1).HasMaxLength(200);
            entity.Property(e => e.Instruction2).HasMaxLength(200);
            entity.Property(e => e.Instruction3).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy1).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy2).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy3).HasMaxLength(200);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.OtherService).HasMaxLength(100);
            entity.Property(e => e.OtherServiceRemark).HasMaxLength(200);
        });

        modelBuilder.Entity<ExChecklistStatusDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ChecklistStatusDetail");

            entity.HasIndex(e => new { e.IsActive, e.BDel }, "<Name of Missing Index, sysname,>");

            entity.HasIndex(e => new { e.JobId, e.IsActive, e.BDel }, "IX_EX_ChecklistStatusDetail_JobId");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AuthorRemark).HasMaxLength(400);
            entity.Property(e => e.AuthorisedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.RequestRemark).HasMaxLength(400);
            entity.Property(e => e.RequestedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExChecklistStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ChecklistStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(250)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<ExContainerCount>(entity =>
        {
            entity.HasKey(e => e.JobId);

            entity.ToTable("EX_ContainerCount");

            entity.Property(e => e.JobId).ValueGeneratedNever();
            entity.Property(e => e.Count20).HasDefaultValue(0);
            entity.Property(e => e.Count40).HasDefaultValue(0);
            entity.Property(e => e.CountLcl)
                .HasDefaultValue(0)
                .HasColumnName("CountLCL");
            entity.Property(e => e.CountTotal).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.Teu)
                .HasComment("Twenty Equivalent Unit")
                .HasColumnName("TEU");
        });

        modelBuilder.Entity<ExContainerDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ContainerDetail", tb =>
                {
                    tb.HasTrigger("EX_ContainerDetail_IUD");
                    tb.HasTrigger("tr_EX_ContainerDetail_Delete");
                    tb.HasTrigger("tr_EX_ContainerDetail_Insert");
                    tb.HasTrigger("tr_EX_ContainerDetail_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SealNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExContainerDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("EX_ContainerDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.SealNo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExContainerSizeM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EX_ContainerSizeMs");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Sname).HasMaxLength(50);
        });

        modelBuilder.Entity<ExEmailHouse>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_EmailHouse");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.EmailTo).HasMaxLength(250);
        });

        modelBuilder.Entity<ExExportTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ExportTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<ExFieldGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EX_FieldGroup");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<ExHoldBillingAdvice>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_HoldBillingAdvice");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsHolded).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
        });

        modelBuilder.Entity<ExJobAdtnlDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobAdtnlDetail");

            entity.HasIndex(e => e.JobId, "ix_EX_JobAdtnlDetail_JobId_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustomClearedOn).HasColumnType("datetime");
            entity.Property(e => e.Dimension).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Form13ClearedOn).HasColumnType("datetime");
            entity.Property(e => e.Hawbdate).HasColumnName("HAWBDate");
            entity.Property(e => e.Hawbno)
                .HasMaxLength(50)
                .HasColumnName("HAWBNo");
            entity.Property(e => e.IsAdc)
                .HasDefaultValue(false)
                .HasColumnName("IsADC");
            entity.Property(e => e.IsHaze).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mawbdate).HasColumnName("MAWBDate");
            entity.Property(e => e.Mawbno)
                .HasMaxLength(50)
                .HasColumnName("MAWBNo");
            entity.Property(e => e.PickupPersonName).HasMaxLength(100);
            entity.Property(e => e.PickupPhoneNo).HasMaxLength(50);
            entity.Property(e => e.SbfiledBy).HasColumnName("SBFiledBy");
            entity.Property(e => e.SbfiledDate)
                .HasColumnType("datetime")
                .HasColumnName("SBFiledDate");
            entity.Property(e => e.ShipmentClearedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExJobCancelDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__EX_JobCa__DE105D07F4232F14");

            entity.ToTable("EX_JobCancelDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Reason).HasMaxLength(250);
            entity.Property(e => e.Remark).HasMaxLength(250);
        });

        modelBuilder.Entity<ExJobDeliveryDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("EX_JobDeliveryDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(200);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(100);
            entity.Property(e => e.CargoReceivedBy).HasMaxLength(50);
            entity.Property(e => e.ConsolidateId).HasDefaultValue(0L);
            entity.Property(e => e.DamagedImage).HasMaxLength(400);
            entity.Property(e => e.DeliveryPoint).HasMaxLength(200);
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DriverPhone).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.NclosingDate).HasColumnName("NClosingDate");
            entity.Property(e => e.NformDate).HasColumnName("NFormDate");
            entity.Property(e => e.NformNo)
                .HasMaxLength(50)
                .HasColumnName("NFormNo");
            entity.Property(e => e.OctroiAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OctroiReceiptNo).HasMaxLength(100);
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(200)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(50);
            entity.Property(e => e.SclosingDate).HasColumnName("SClosingDate");
            entity.Property(e => e.SformDate).HasColumnName("SFormDate");
            entity.Property(e => e.SformNo)
                .HasMaxLength(50)
                .HasColumnName("SFormNo");
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransportByBabaji).HasDefaultValue(false);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<ExJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobDetail", tb =>
                {
                    tb.HasTrigger("tr_EX_JobDetail_Delete");
                    tb.HasTrigger("tr_EX_JobDetail_Insert");
                    tb.HasTrigger("tr_EX_JobDetail_Update");
                });

            entity.HasIndex(e => new { e.AlertId, e.FinYear, e.BDel }, "IX_EX_JobDetail_AlertId");

            entity.HasIndex(e => new { e.FinYear, e.BDel }, "IX_EX_JobDetail_FnYear");

            entity.HasIndex(e => new { e.FinYear, e.BDel }, "ix_EX_JobDetail_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.FinYear, e.BDel }, "ix_EX_JobDetail_FinYear_bDel_includess");

            entity.HasIndex(e => new { e.BDel, e.JobRefNo }, "ix_EX_JobDetail_bDel_JobRefNo_includes").HasFillFactor(100);

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BackOfficeStatus).HasDefaultValue(false);
            entity.Property(e => e.BuyerName).HasMaxLength(200);
            entity.Property(e => e.ChecklistDate).HasColumnType("datetime");
            entity.Property(e => e.ChecklistDocPath).HasMaxLength(200);
            entity.Property(e => e.Cifvalue)
                .HasMaxLength(50)
                .HasColumnName("CIFValue");
            entity.Property(e => e.CustomCleared).HasDefaultValue(false);
            entity.Property(e => e.DeliveryStatus).HasDefaultValue(false);
            entity.Property(e => e.Destination).HasMaxLength(250);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExamineStatus).HasDefaultValue(false);
            entity.Property(e => e.FabillStatusCheckDate)
                .HasColumnType("datetime")
                .HasColumnName("FABillStatusCheckDate");
            entity.Property(e => e.FileDirName).HasMaxLength(100);
            entity.Property(e => e.FilingStatus).HasDefaultValue(false);
            entity.Property(e => e.Fobvalue)
                .HasMaxLength(50)
                .HasColumnName("FOBValue");
            entity.Property(e => e.Form13Cleared).HasDefaultValue(false);
            entity.Property(e => e.Form13Required).HasDefaultValue(false);
            entity.Property(e => e.ForwarderName).HasMaxLength(100);
            entity.Property(e => e.FreightEnqId).HasDefaultValue(0);
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.IsBjvcreated).HasColumnName("IsBJVcreated");
            entity.Property(e => e.IsFundAllowed).HasDefaultValue(false);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.JobRemark).HasMaxLength(450);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.NetWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("NetWT");
            entity.Property(e => e.NoOfPackages).HasDefaultValue(0);
            entity.Property(e => e.PackageType).HasDefaultValue(0);
            entity.Property(e => e.PickUpFrom).HasMaxLength(250);
            entity.Property(e => e.ProductDesc).HasMaxLength(300);
            entity.Property(e => e.SbsyncDate)
                .HasColumnType("datetime")
                .HasColumnName("SBSyncDate");
            entity.Property(e => e.SealNo).HasMaxLength(50);
            entity.Property(e => e.ShipperGstin)
                .HasMaxLength(20)
                .HasColumnName("ShipperGSTIN");
            entity.Property(e => e.ShippingBillType).HasDefaultValue(0);
            entity.Property(e => e.StatusId).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExJobDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("EX_JobDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BuyerName).HasMaxLength(900);
            entity.Property(e => e.ChecklistDate).HasColumnType("datetime");
            entity.Property(e => e.ChecklistDocPath).HasMaxLength(400);
            entity.Property(e => e.Cifvalue)
                .HasMaxLength(100)
                .HasColumnName("CIFValue");
            entity.Property(e => e.Destination).HasMaxLength(500);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileDirName).HasMaxLength(200);
            entity.Property(e => e.Fobvalue)
                .HasMaxLength(100)
                .HasColumnName("FOBValue");
            entity.Property(e => e.ForwarderName).HasMaxLength(500);
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.JobRefNo).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.NetWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("NetWT");
            entity.Property(e => e.PickUpFrom).HasMaxLength(500);
            entity.Property(e => e.ProductDesc).HasMaxLength(1100);
            entity.Property(e => e.SealNo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExJobDocsDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobDocsDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExJobExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("EX_JobExpenseDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovalRemark).HasMaxLength(200);
            entity.Property(e => e.ApprovalStatusId)
                .HasDefaultValue(1)
                .HasComment("1-Pending, 2 Approved, 3 Hold, 4 Rejected");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillableAmount).HasMaxLength(100);
            entity.Property(e => e.ChequeNo).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hodid)
                .HasDefaultValue(0)
                .HasColumnName("HODID");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jbnumber)
                .HasMaxLength(50)
                .HasColumnName("JBNumber");
            entity.Property(e => e.LStatus)
                .HasDefaultValue(0)
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.ModuleId).HasDefaultValue(1);
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.PayeeName).HasMaxLength(100);
            entity.Property(e => e.ReceiptAmount).HasMaxLength(100);
            entity.Property(e => e.ReceiptNo).HasMaxLength(100);
            entity.Property(e => e.ReceiptType).HasComment("1- Receipts, 2 - Non-Receipted");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExJobExpenseHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobExpenseHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<ExJobFilingDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobFilingDetail");

            entity.HasIndex(e => e.BDel, "IX_EX_JobFilingDetail_bDel");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_EX_JobFilingDetail_JobId_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Leodate).HasColumnName("LEODate");
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.Sbdate).HasColumnName("SBDate");
            entity.Property(e => e.Sbno)
                .HasMaxLength(50)
                .HasColumnName("SBNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExJobForm13Detail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobForm13Details");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<ExJobInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobInvoiceDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Dbkamount)
                .HasMaxLength(50)
                .HasColumnName("DBKAmount");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FreightAmount).HasMaxLength(50);
            entity.Property(e => e.InsuranceAmount).HasMaxLength(50);
            entity.Property(e => e.InvoiceCurrency).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(200);
            entity.Property(e => e.InvoiceValue).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LicenseNo).HasMaxLength(200);
        });

        modelBuilder.Entity<ExJobStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_JobStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.StatusName).HasMaxLength(50);
        });

        modelBuilder.Entity<ExProductInvoiceBalance>(entity =>
        {
            entity.HasKey(e => e.LId)
                .HasName("PK_EX_InvoiceDetail_TT")
                .IsClustered(false);

            entity.ToTable("EX_ProductInvoiceBalance");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AmountInr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AmountINR");
            entity.Property(e => e.ApplicableExpSchemes).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CountryDestination).HasMaxLength(50);
            entity.Property(e => e.DbkSchNo)
                .HasMaxLength(50)
                .HasColumnName("DBK_SchNo");
            entity.Property(e => e.Dbkdescription)
                .HasMaxLength(800)
                .HasColumnName("DBKDescription");
            entity.Property(e => e.Dbkqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DBKQty");
            entity.Property(e => e.Dbkunit)
                .HasMaxLength(50)
                .HasColumnName("DBKUnit");
            entity.Property(e => e.Description).HasMaxLength(800);
            entity.Property(e => e.DrawbackAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExciseDbkrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ExciseDBKRate");
            entity.Property(e => e.Fobvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FOBValue");
            entity.Property(e => e.Ftacode)
                .HasMaxLength(50)
                .HasColumnName("FTACode");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST_Amount");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Pmvvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PMVValue");
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.QuantityUnit).HasMaxLength(50);
            entity.Property(e => e.Ritccode).HasColumnName("RITCCode");
            entity.Property(e => e.RoDtepamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RoDTEPAmount");
            entity.Property(e => e.RoDtepqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RoDTEPQty");
            entity.Property(e => e.RoDtepuqc)
                .HasMaxLength(50)
                .HasColumnName("RoDTEPUQC");
            entity.Property(e => e.Rodtep)
                .HasMaxLength(50)
                .HasColumnName("RODTEP");
            entity.Property(e => e.Roslamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROSLAmount");
            entity.Property(e => e.RoslcapValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROSLCapValue");
            entity.Property(e => e.RoslcentralAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROSLCentralAmount");
            entity.Property(e => e.RoslcentralCapValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROSLCentralCapValue");
            entity.Property(e => e.RoslcentralRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROSLCentralRate");
            entity.Property(e => e.Roslrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROSLRate");
            entity.Property(e => e.Slno).HasColumnName("SLNo");
            entity.Property(e => e.Sqcqty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SQCQTY");
            entity.Property(e => e.Sqcunit)
                .HasMaxLength(50)
                .HasColumnName("SQCUnit");
            entity.Property(e => e.TaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Taxable_Value");
            entity.Property(e => e.UnitPrice).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ExSbdocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_SBDocument");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DirPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Sbdate)
                .HasColumnType("datetime")
                .HasColumnName("SBDate");
            entity.Property(e => e.Sbno).HasColumnName("SBNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<ExShipmentGetInDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ShipmentGetInDetail");

            entity.HasIndex(e => e.BDel, "<Name of Missing Index, sysname,>");

            entity.HasIndex(e => new { e.JobId, e.BDel }, "ix_EX_ShipmentGetInDetail_JobId_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExporterCopyPath).HasMaxLength(200);
            entity.Property(e => e.ForwarderPersonName).HasMaxLength(250);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VgmcopyPath)
                .HasMaxLength(200)
                .HasColumnName("VGMCopyPath");
        });

        modelBuilder.Entity<ExShipmentTermM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ShipmentTermMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(450)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<ExShippingBillTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("EX_ShippingBillTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(150)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FaChargesM>(entity =>
        {
            entity.HasKey(e => e.Charge).HasName("PK__charges__3D7E1B63");

            entity.ToTable("FA_chargesMS");

            entity.Property(e => e.Charge)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("charge");
            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Chtype)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("CHTYPE");
            entity.Property(e => e.Createdby)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("createdby");
            entity.Property(e => e.Createdtime)
                .HasColumnType("smalldatetime")
                .HasColumnName("createdtime");
            entity.Property(e => e.Group)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("group");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HSN_SC");
            entity.Property(e => e.Locked).HasColumnName("locked");
            entity.Property(e => e.Modifiedby)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("modifiedby");
            entity.Property(e => e.Modifiedtime)
                .HasColumnType("smalldatetime")
                .HasColumnName("modifiedtime");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Shrtname1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("shrtname1");
            entity.Property(e => e.Shrtname2)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("shrtname2");
        });

        modelBuilder.Entity<FaqContactPersonDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FAQ_ContactPersonDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContactPerEmailId).HasMaxLength(400);
            entity.Property(e => e.ContactPerName).HasMaxLength(100);
            entity.Property(e => e.ContactPerPhoneNo).HasMaxLength(15);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Faqid).HasColumnName("FAQId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FaqFaqdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FAQ_FAQDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DelDocFormPath2).HasColumnName("delDocFormPath2");
            entity.Property(e => e.DelDocFormPath3).HasColumnName("delDocFormPath3");
            entity.Property(e => e.DelDocPath2).HasColumnName("delDocPath2");
            entity.Property(e => e.DelDocPath3).HasColumnName("delDocPath3");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdlUser).HasColumnName("updlUser");
        });

        modelBuilder.Entity<FileUpload>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FileUplo__DE11596F4F1053A7");

            entity.ToTable("FileUpload");

            entity.Property(e => e.UploadDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FopAgentInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_AgentInvoiceDetail", tb =>
                {
                    tb.HasTrigger("DelAgentInvoiceDetailTR");
                    tb.HasTrigger("tr_FOP_AgentInvoiceDetail_Delete");
                    tb.HasTrigger("tr_FOP_AgentInvoiceDetail_Insert");
                    tb.HasTrigger("tr_FOP_AgentInvoiceDetail_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AgentId).HasColumnName("AgentID");
            entity.Property(e => e.AgentName).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bjvamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BJVAmount");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Inrvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INRValue");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(100);
            entity.Property(e => e.InvoiceReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.Jbdate)
                .HasColumnType("datetime")
                .HasColumnName("JBDate");
            entity.Property(e => e.Jbnumber)
                .HasMaxLength(100)
                .HasColumnName("JBNumber");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopAgentInvoiceDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_AgentInvoiceDetail_shadow");

            entity.Property(e => e.AgentId).HasColumnName("AgentID");
            entity.Property(e => e.AgentName).HasMaxLength(200);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bjvamount)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("BJVAmount");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Inrvalue)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("INRValue");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(200);
            entity.Property(e => e.InvoiceReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.Jbdate)
                .HasColumnType("datetime")
                .HasColumnName("JBDate");
            entity.Property(e => e.Jbnumber)
                .HasMaxLength(200)
                .HasColumnName("JBNumber");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopAgentPreAlert>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_FR_AgentPreAlert");

            entity.ToTable("FOP_AgentPreAlert", tb =>
                {
                    tb.HasTrigger("DelAgentPreAlertTR");
                    tb.HasTrigger("tr_FOP_AgentPreAlert_Delete");
                    tb.HasTrigger("tr_FOP_AgentPreAlert_Insert");
                    tb.HasTrigger("tr_FOP_AgentPreAlert_Update");
                });

            entity.HasIndex(e => e.EnqId, "ix_FOP_AgentPreAlert_EnqId").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.Etd)
                .HasColumnType("datetime")
                .HasColumnName("ETD");
            entity.Property(e => e.FinalAgent).HasMaxLength(100);
            entity.Property(e => e.FinalAgentId).HasColumnName("FinalAgentID");
            entity.Property(e => e.Hbldate)
                .HasColumnType("datetime")
                .HasColumnName("HBLDate");
            entity.Property(e => e.Hblno)
                .HasMaxLength(100)
                .HasColumnName("HBLNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mbldate)
                .HasColumnType("datetime")
                .HasColumnName("MBLDate");
            entity.Property(e => e.Mblno)
                .HasMaxLength(100)
                .HasColumnName("MBLNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VesselName).HasMaxLength(100);
            entity.Property(e => e.VesselNumber).HasMaxLength(100);
        });

        modelBuilder.Entity<FopAgentPreAlertOld>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_FR_AgentPreAlert_Old");

            entity.ToTable("FOP_AgentPreAlert_Old");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.Etd)
                .HasColumnType("datetime")
                .HasColumnName("ETD");
            entity.Property(e => e.FinalAgent).HasMaxLength(100);
            entity.Property(e => e.Hbldate)
                .HasColumnType("datetime")
                .HasColumnName("HBLDate");
            entity.Property(e => e.Hblno)
                .HasMaxLength(100)
                .HasColumnName("HBLNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mbldate)
                .HasColumnType("datetime")
                .HasColumnName("MBLDate");
            entity.Property(e => e.Mblno)
                .HasMaxLength(100)
                .HasColumnName("MBLNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VesselName).HasMaxLength(100);
            entity.Property(e => e.VesselNumber).HasMaxLength(100);
        });

        modelBuilder.Entity<FopAgentPreAlertShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_AgentPreAlert_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.Etd)
                .HasColumnType("datetime")
                .HasColumnName("ETD");
            entity.Property(e => e.FinalAgent).HasMaxLength(200);
            entity.Property(e => e.Hbldate)
                .HasColumnType("datetime")
                .HasColumnName("HBLDate");
            entity.Property(e => e.Hblno)
                .HasMaxLength(200)
                .HasColumnName("HBLNo");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mbldate)
                .HasColumnType("datetime")
                .HasColumnName("MBLDate");
            entity.Property(e => e.Mblno)
                .HasMaxLength(200)
                .HasColumnName("MBLNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VesselName).HasMaxLength(200);
            entity.Property(e => e.VesselNumber).HasMaxLength(200);
        });

        modelBuilder.Entity<FopBillingAdvice>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_BillingAdvice", tb => tb.HasTrigger("DelBillingAdviceTR"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AgentInvoiceRcvdDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsAgentInvoiceRcvd).HasDefaultValue(false);
            entity.Property(e => e.IsFileSentToBilling).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopBillingDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_BillingDetail", tb =>
                {
                    tb.HasTrigger("DelBillingDetailTR");
                    tb.HasTrigger("tr_FOP_BillingDetail_Delete");
                    tb.HasTrigger("tr_FOP_BillingDetail_Insert");
                    tb.HasTrigger("tr_FOP_BillingDetail_Update");
                });

            entity.HasIndex(e => new { e.EnqId, e.FileReceiveStatus }, "EnqId_FileReceiveStatus").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AgentInvoiceStatus).HasDefaultValue(false);
            entity.Property(e => e.AgentName).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillNumber).HasMaxLength(100);
            entity.Property(e => e.BillingCompleted).HasDefaultValue(true);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopBillingDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_BillingDetail_shadow");

            entity.Property(e => e.AgentName).HasMaxLength(100);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillNumber).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopBooking>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_Booking", tb =>
                {
                    tb.HasTrigger("DelFOP_BookingTR");
                    tb.HasTrigger("tr_FOP_Booking_Delete");
                    tb.HasTrigger("tr_FOP_Booking_Insert");
                    tb.HasTrigger("tr_FOP_Booking_Update");
                });

            entity.HasIndex(e => new { e.EnqId, e.FinYear, e.BDel }, "ix_FOP_Booking_EnqId_FinYear_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_FOP_Booking_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_FOP_Booking_bDel_includes1").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BookingDate).HasColumnType("datetime");
            entity.Property(e => e.Canstatus).HasColumnName("CANStatus");
            entity.Property(e => e.DebitNoteAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebitNoteRemark).HasMaxLength(200);
            entity.Property(e => e.Dostatus).HasColumnName("DOStatus");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpBlreleasedStatus).HasColumnName("ExpBLReleasedStatus");
            entity.Property(e => e.ExpVgmstatus).HasColumnName("ExpVGMStatus");
            entity.Property(e => e.FrjobNo)
                .HasMaxLength(50)
                .HasColumnName("FRJobNo");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(200);
            entity.Property(e => e.LStatusDeleted).HasColumnName("lStatus_Deleted");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(200)
                .HasColumnName("PONumber");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.ShippingLineName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopBookingDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("Fop_BookingDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopBookingShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_Booking_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BookingDate).HasColumnType("datetime");
            entity.Property(e => e.Canstatus).HasColumnName("CANStatus");
            entity.Property(e => e.Dostatus).HasColumnName("DOStatus");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FrjobNo)
                .HasMaxLength(200)
                .HasColumnName("FRJobNo");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(1600);
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LStatusDeleted).HasColumnName("lStatus_Deleted");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(1600)
                .HasColumnName("PONumber");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopCargoArrivalDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_CargoArrivalDetail", tb =>
                {
                    tb.HasTrigger("DelCargoArrivalTR");
                    tb.HasTrigger("tr_FOP_CargoArrivalDetail_Delete");
                    tb.HasTrigger("tr_FOP_CargoArrivalDetail_Insert");
                    tb.HasTrigger("tr_FOP_CargoArrivalDetail_Update");
                });

            entity.HasIndex(e => e.EnqId, "ix_FOP_CargoArrivalDetail_EnqId").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Atadate)
                .HasColumnType("datetime")
                .HasColumnName("ATADate");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CancopyUploaded)
                .HasDefaultValue(false)
                .HasColumnName("CANCopyUploaded");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailSentDate).HasColumnType("datetime");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(400)
                .HasColumnName("EMailTo");
            entity.Property(e => e.Igmdate)
                .HasColumnType("datetime")
                .HasColumnName("IGMDate");
            entity.Property(e => e.Igmno)
                .HasMaxLength(100)
                .HasColumnName("IGMNo");
            entity.Property(e => e.IsGst)
                .HasDefaultValue(true)
                .HasColumnName("IsGST");
            entity.Property(e => e.ItemNo).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.Tax)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopCargoArrivalDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_CargoArrivalDetail_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Atadate)
                .HasColumnType("datetime")
                .HasColumnName("ATADate");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CancopyUploaded).HasColumnName("CANCopyUploaded");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailSentDate).HasColumnType("datetime");
            entity.Property(e => e.EmailTo)
                .HasMaxLength(800)
                .HasColumnName("EMailTo");
            entity.Property(e => e.Igmdate)
                .HasColumnType("datetime")
                .HasColumnName("IGMDate");
            entity.Property(e => e.Igmno)
                .HasMaxLength(200)
                .HasColumnName("IGMNo");
            entity.Property(e => e.IsGst).HasColumnName("IsGST");
            entity.Property(e => e.ItemNo).HasMaxLength(200);
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.Tax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopConsigneeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_ConsigneeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SAddress)
                .HasMaxLength(400)
                .HasColumnName("sAddress");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FopContainerCount>(entity =>
        {
            entity.HasKey(e => e.EnqId);

            entity.ToTable("FOP_ContainerCount");

            entity.Property(e => e.EnqId).ValueGeneratedNever();
            entity.Property(e => e.Count20).HasDefaultValue(0);
            entity.Property(e => e.Count40).HasDefaultValue(0);
            entity.Property(e => e.Count45).HasDefaultValue(0);
            entity.Property(e => e.CountLcl)
                .HasDefaultValue(0)
                .HasColumnName("CountLCL");
            entity.Property(e => e.CountTotal).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.Teu)
                .HasComment("Twenty Equivalent Unit")
                .HasColumnName("TEU");
        });

        modelBuilder.Entity<FopContainerDetailExport>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("FOP_ContainerDetailExport");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasComment("1 For FCL, 2 For LCL");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopContainerM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_ContainerMS", tb => tb.HasTrigger("FR_ContainerDetail_IUD"));

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.CustomSealNo).HasMaxLength(20);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LineSealNo).HasMaxLength(20);
            entity.Property(e => e.RfidsealNo)
                .HasMaxLength(20)
                .HasColumnName("RFIDSealNo");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopCustomerM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_CustomerMS", tb =>
                {
                    tb.HasTrigger("tr_FOP_CustomerMS_Delete");
                    tb.HasTrigger("tr_FOP_CustomerMS_Insert");
                    tb.HasTrigger("tr_FOP_CustomerMS_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SAddress)
                .HasMaxLength(400)
                .HasColumnName("sAddress");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FopCustomerMsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_CustomerMS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.SAddress)
                .HasMaxLength(800)
                .HasColumnName("sAddress");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FopCustomerPreAlert>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_FOP_PreAlertCustomer");

            entity.ToTable("FOP_CustomerPreAlert", tb =>
                {
                    tb.HasTrigger("tr_FOP_CustomerPreAlert_Delete");
                    tb.HasTrigger("tr_FOP_CustomerPreAlert_Insert");
                    tb.HasTrigger("tr_FOP_CustomerPreAlert_Update");
                });

            entity.HasIndex(e => e.EnqId, "ix_FOP_CustomerPreAlert_EnqId").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AlertEmailDate).HasColumnType("datetime");
            entity.Property(e => e.AlertEmailSent).HasDefaultValue(false);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PreAlertToCustDate).HasColumnType("datetime");
            entity.Property(e => e.ShippedOnBoardDate).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopCustomerPreAlertShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_CustomerPreAlert_shadow");

            entity.Property(e => e.AlertEmailDate).HasColumnType("datetime");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PreAlertToCustDate).HasColumnType("datetime");
            entity.Property(e => e.ShippedOnBoardDate).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopDailyActivity>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_DailyActivity");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocumentPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopDebitNote>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_DebitNote");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AgentId).HasColumnName("AgentID");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DebitNoteAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebitNoteRemark).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EnqId).HasColumnName("EnqID");
            entity.Property(e => e.Gstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTAmount");
            entity.Property(e => e.Gstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("GSTRate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopDodetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_DODetail", tb =>
                {
                    tb.HasTrigger("DelFOP_DODetailTR");
                    tb.HasTrigger("tr_FOP_DODetail_Delete");
                    tb.HasTrigger("tr_FOP_DODetail_Insert");
                    tb.HasTrigger("tr_FOP_DODetail_Update");
                });

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Chaname)
                .HasMaxLength(100)
                .HasColumnName("CHAName");
            entity.Property(e => e.ChequeNo).HasMaxLength(100);
            entity.Property(e => e.Doamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOAmount");
            entity.Property(e => e.DoissuedTo)
                .HasMaxLength(100)
                .HasColumnName("DOIssuedTo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopDodetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_DODetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Chaname)
                .HasMaxLength(200)
                .HasColumnName("CHAName");
            entity.Property(e => e.ChequeNo).HasMaxLength(200);
            entity.Property(e => e.Doamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOAmount");
            entity.Property(e => e.DoissuedTo)
                .HasMaxLength(200)
                .HasColumnName("DOIssuedTo");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_InvoiceDetail", tb =>
                {
                    tb.HasTrigger("DelFOP_InvoiceDetailTR");
                    tb.HasTrigger("FOP_CANAmount_IUD");
                    tb.HasTrigger("tr_FOP_InvoiceDetail_Delete");
                    tb.HasTrigger("tr_FOP_InvoiceDetail_Insert");
                    tb.HasTrigger("tr_FOP_InvoiceDetail_Update");
                });

            entity.HasIndex(e => new { e.EnqId, e.BDel }, "ix_FOP_InvoiceDetail_EnqId_bDel").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CgstTax)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("CGstTax");
            entity.Property(e => e.CgstTaxAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGstTaxAmt");
            entity.Property(e => e.ContainerType).HasMaxLength(5);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IgstTax)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("IGstTax");
            entity.Property(e => e.IgstTaxAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGstTaxAmt");
            entity.Property(e => e.Iscan).HasColumnName("ISCAN");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinUnit).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SgstTax)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SGstTax");
            entity.Property(e => e.SgstTaxAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGstTaxAmt");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxPercentage).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.Uomid).HasColumnName("UOMId");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopInvoiceDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_InvoiceDetail_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CgstTax)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("CGstTax");
            entity.Property(e => e.CgstTaxAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGstTaxAmt");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.IgstTax)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("IGstTax");
            entity.Property(e => e.IgstTaxAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGstTaxAmt");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinUnit).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SgstTax)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SGstTax");
            entity.Property(e => e.SgstTaxAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGstTaxAmt");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxPercentage).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.Uomid).HasColumnName("UOMId");
        });

        modelBuilder.Entity<FopInvoiceFieldM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_InvoiceFieldMS", tb =>
                {
                    tb.HasTrigger("tr_FOP_InvoiceFieldMS_Delete");
                    tb.HasTrigger("tr_FOP_InvoiceFieldMS_Insert");
                    tb.HasTrigger("tr_FOP_InvoiceFieldMS_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FieldName).HasMaxLength(100);
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PercentOfFieldIdDeleted).HasColumnName("PercentOfFieldId_deleted");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeader).HasMaxLength(100);
            entity.Property(e => e.Saccode)
                .HasMaxLength(50)
                .HasColumnName("SACCode");
            entity.Property(e => e.TaxRate)
                .HasComment("GST Tax Rate")
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxRateOld)
                .HasComment("GST Tax Rate")
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("TaxRate_Old");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopInvoiceFieldMsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_InvoiceFieldMS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FieldName).HasMaxLength(200);
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PercentOfFieldIdDeleted).HasColumnName("PercentOfFieldId_deleted");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.ReportHeader).HasMaxLength(200);
            entity.Property(e => e.Saccode)
                .HasMaxLength(100)
                .HasColumnName("SACCode");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxRateOld)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("TaxRate_Old");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FopInvoicePercentItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FOP_InvoicePercentItem", tb =>
                {
                    tb.HasTrigger("tr_FOP_InvoicePercentItem_Delete");
                    tb.HasTrigger("tr_FOP_InvoicePercentItem_Insert");
                    tb.HasTrigger("tr_FOP_InvoicePercentItem_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FopInvoicePercentItemShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FOP_InvoicePercentItem_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
        });

        modelBuilder.Entity<FopJobDeliveryM>(entity =>
        {
            entity.HasKey(e => e.EnqId);

            entity.ToTable("FOP_JobDeliveryMS");

            entity.Property(e => e.EnqId).ValueGeneratedNever();
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DeliveryAddress).HasMaxLength(200);
            entity.Property(e => e.DeliveryDestination).HasMaxLength(200);
            entity.Property(e => e.DeliveryInstruction).HasMaxLength(200);
            entity.Property(e => e.Dimension).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PkgDimensions).HasMaxLength(200);
            entity.Property(e => e.TransportationByBabaji).HasDefaultValue(true);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehiclePlaceDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FopShipperM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_ShipperMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SAddress)
                .HasMaxLength(400)
                .HasColumnName("sAddress");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FopUnitOfMeasureM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FOP_UnitOfMeasureMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.UnitOfMeasurement).HasMaxLength(50);
        });

        modelBuilder.Entity<FopVwFreightDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FOP_vwFreightDetail");

            entity.Property(e => e.Agent).HasMaxLength(100);
            entity.Property(e => e.AgentInvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Agent Invoice Amount");
            entity.Property(e => e.AgentInvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Agent Invoice Currency");
            entity.Property(e => e.AgentInvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Agent Invoice Date");
            entity.Property(e => e.AgentInvoiceName).HasMaxLength(100);
            entity.Property(e => e.AgentInvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Agent Invoice No");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.AtaAtDestination)
                .HasMaxLength(10)
                .HasColumnName("ATA at Destination");
            entity.Property(e => e.AwardDate)
                .HasMaxLength(10)
                .HasColumnName("Award Date");
            entity.Property(e => e.BillAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Bill Amount");
            entity.Property(e => e.BillCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Created Date");
            entity.Property(e => e.BillDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Date");
            entity.Property(e => e.BillNumber)
                .HasMaxLength(100)
                .HasColumnName("Bill Number");
            entity.Property(e => e.BillingAdviceDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Advice Date");
            entity.Property(e => e.BillingDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Dispatch Date");
            entity.Property(e => e.BillingFileRcvdOn)
                .HasMaxLength(10)
                .HasColumnName("Billing File Rcvd On");
            entity.Property(e => e.BillingRemark).HasColumnName("Billing Remark");
            entity.Property(e => e.BookingDetails).HasColumnName("Booking Details");
            entity.Property(e => e.BookingMonth)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Booking Month");
            entity.Property(e => e.BranchName)
                .HasMaxLength(100)
                .HasColumnName("Branch Name");
            entity.Property(e => e.CanAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAN AMOUNT");
            entity.Property(e => e.CanCreatedBy)
                .HasMaxLength(50)
                .HasColumnName("CAN Created By");
            entity.Property(e => e.CanCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("CAN Created Date");
            entity.Property(e => e.CanTax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAN TAX");
            entity.Property(e => e.CanTotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAN TOTAL AMOUNT");
            entity.Property(e => e.CargoDescription)
                .HasMaxLength(200)
                .HasColumnName("Cargo Description");
            entity.Property(e => e.ChaName)
                .HasMaxLength(100)
                .HasColumnName("CHA Name");
            entity.Property(e => e.ChargeableWeight).HasColumnName("Chargeable Weight");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsigneeAddress)
                .HasMaxLength(400)
                .HasColumnName("Consignee Address");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOf20).HasColumnName("Count of 20");
            entity.Property(e => e.CountOf40).HasColumnName("Count of 40");
            entity.Property(e => e.CountOfLcl).HasColumnName("COUNT OF LCL");
            entity.Property(e => e.Country).HasMaxLength(400);
            entity.Property(e => e.CustRefNo)
                .HasMaxLength(400)
                .HasColumnName("Cust Ref No");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.DoAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DO Amount");
            entity.Property(e => e.DoChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Cheque Date");
            entity.Property(e => e.DoChequeNo)
                .HasMaxLength(100)
                .HasColumnName("DO Cheque No");
            entity.Property(e => e.DoCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("DO Created Date");
            entity.Property(e => e.DoIssuedTo)
                .HasMaxLength(100)
                .HasColumnName("DO Issued To");
            entity.Property(e => e.DoPaymentTerm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DO Payment Term");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoRemark)
                .HasMaxLength(400)
                .HasColumnName("DO Remark");
            entity.Property(e => e.EnqCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Enq Created Date");
            entity.Property(e => e.EnqDate)
                .HasMaxLength(10)
                .HasColumnName("ENQ Date");
            entity.Property(e => e.EnqRefNo)
                .HasMaxLength(50)
                .HasColumnName("ENQ Ref No");
            entity.Property(e => e.EnqUser)
                .HasMaxLength(50)
                .HasColumnName("Enq User");
            entity.Property(e => e.EnqUserId).HasColumnName("EnqUserID");
            entity.Property(e => e.EnquiryValue).HasColumnName("Enquiry Value");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.EtaAtTranshipment)
                .HasMaxLength(10)
                .HasColumnName("ETA at Transhipment");
            entity.Property(e => e.Etd)
                .HasMaxLength(10)
                .HasColumnName("ETD");
            entity.Property(e => e.EtdFromTranshipment)
                .HasMaxLength(10)
                .HasColumnName("ETD from Transhipment");
            entity.Property(e => e.FinalAgent)
                .HasMaxLength(100)
                .HasColumnName("Final Agent");
            entity.Property(e => e.Form13Date)
                .HasMaxLength(10)
                .HasColumnName("Form 13 Date");
            entity.Property(e => e.FreightActivity).HasColumnName("Freight Activity");
            entity.Property(e => e.FreightMode)
                .HasMaxLength(50)
                .HasColumnName("Freight Mode");
            entity.Property(e => e.FreightType)
                .HasMaxLength(50)
                .HasColumnName("Freight Type");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross Weight");
            entity.Property(e => e.HblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL Date");
            entity.Property(e => e.HblNumber)
                .HasMaxLength(100)
                .HasColumnName("HBL Number");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmNumber)
                .HasMaxLength(100)
                .HasColumnName("IGM Number");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(200)
                .HasColumnName("Invoice No");
            entity.Property(e => e.IsDangerousGood)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Is Dangerous Good");
            entity.Property(e => e.ItemNo)
                .HasMaxLength(100)
                .HasColumnName("Item No");
            entity.Property(e => e.JbDate)
                .HasMaxLength(10)
                .HasColumnName("JB Date");
            entity.Property(e => e.JbNumber)
                .HasMaxLength(100)
                .HasColumnName("JB Number");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobNo)
                .HasMaxLength(50)
                .HasColumnName("Job No");
            entity.Property(e => e.LclVolume).HasColumnName("LCL Volume");
            entity.Property(e => e.LeoDate)
                .HasMaxLength(10)
                .HasColumnName("Leo Date");
            entity.Property(e => e.LostDate)
                .HasMaxLength(10)
                .HasColumnName("Lost Date");
            entity.Property(e => e.LostReason)
                .HasMaxLength(50)
                .HasColumnName("Lost Reason");
            entity.Property(e => e.MblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL Date");
            entity.Property(e => e.MblNumber)
                .HasMaxLength(100)
                .HasColumnName("MBL Number");
            entity.Property(e => e.NoOfPkg).HasColumnName("No of Pkg");
            entity.Property(e => e.OperationUser)
                .HasMaxLength(50)
                .HasColumnName("Operation User");
            entity.Property(e => e.OperationUserId).HasColumnName("OperationUserID");
            entity.Property(e => e.PkgType)
                .HasMaxLength(50)
                .HasColumnName("Pkg Type");
            entity.Property(e => e.PoNumber)
                .HasMaxLength(200)
                .HasColumnName("PO Number");
            entity.Property(e => e.PortCity).HasMaxLength(100);
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port of Loading");
            entity.Property(e => e.PreAlertEmailTo).HasColumnName("Pre-Alert Email To");
            entity.Property(e => e.QuoteDate)
                .HasMaxLength(10)
                .HasColumnName("Quote Date");
            entity.Property(e => e.SalesRep)
                .HasMaxLength(50)
                .HasColumnName("Sales Rep");
            entity.Property(e => e.SbDate)
                .HasMaxLength(10)
                .HasColumnName("SB DATE");
            entity.Property(e => e.SbNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SB NO");
            entity.Property(e => e.ShippedOnBoardDate)
                .HasMaxLength(10)
                .HasColumnName("Shipped On Board Date");
            entity.Property(e => e.Shipper).HasMaxLength(100);
            entity.Property(e => e.ShipperAddress)
                .HasMaxLength(400)
                .HasColumnName("Shipper Address");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Terms).HasMaxLength(50);
            entity.Property(e => e.TypeOfExport)
                .HasMaxLength(50)
                .HasColumnName("Type Of Export");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.VesselFlightNumber)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Number");
            entity.Property(e => e.VgmDate)
                .HasMaxLength(10)
                .HasColumnName("VGM Date");
        });

        modelBuilder.Entity<FrAdhocReportCondition>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_AdhocReportCondition");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ColumnDataType).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FrAdhocReportDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_AdhocReportDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FrAdhocReportM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_AdhocReportMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LastReportGeneratedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportName).HasMaxLength(100);
        });

        modelBuilder.Entity<FrAirrateChart>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_AIRRateChart");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Agent).HasMaxLength(100);
            entity.Property(e => e.Airline).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Fsccharge)
                .HasMaxLength(50)
                .HasColumnName("FSCCharge");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Mincharge)
                .HasMaxLength(50)
                .HasColumnName("MINCharge");
            entity.Property(e => e.OtherCharge).HasMaxLength(50);
            entity.Property(e => e.Pod)
                .HasMaxLength(100)
                .HasColumnName("POD");
            entity.Property(e => e.Pol)
                .HasMaxLength(100)
                .HasColumnName("POL");
            entity.Property(e => e.RateValidityDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Ssccharge)
                .HasMaxLength(50)
                .HasColumnName("SSCCharge");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e._1000kg)
                .HasMaxLength(50)
                .HasColumnName("1000kg");
            entity.Property(e => e._100kg)
                .HasMaxLength(50)
                .HasColumnName("100kg");
            entity.Property(e => e._300kg)
                .HasMaxLength(50)
                .HasColumnName("300kg");
            entity.Property(e => e._45kg)
                .HasMaxLength(50)
                .HasColumnName("45kg");
            entity.Property(e => e._500kg)
                .HasMaxLength(50)
                .HasColumnName("500kg");
        });

        modelBuilder.Entity<FrDocument>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_Documents", tb => tb.HasTrigger("DelFR_DocumentsTR"));

            entity.HasIndex(e => new { e.EnqId, e.BDel }, "EnqId_bDel_Includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocName).HasMaxLength(200);
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FrDocumentType>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_DocumentType");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OperationMode).HasMaxLength(10);
            entity.Property(e => e.OperationType).HasMaxLength(10);
            entity.Property(e => e.SName)
                .HasMaxLength(500)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FrEnquiry>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_Enquiry", tb =>
                {
                    tb.HasTrigger("DeleteFreightEnqiury");
                    tb.HasTrigger("tr_FR_Enquiry_Delete");
                    tb.HasTrigger("tr_FR_Enquiry_Insert");
                    tb.HasTrigger("tr_FR_Enquiry_Update");
                });

            entity.HasIndex(e => e.ChajobId, "CHAJobId_Includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.FinYear, e.LUser }, "CNI_EnqID").HasFillFactor(90);

            entity.HasIndex(e => new { e.SalesRepId, e.FinYear, e.BDel }, "SalesRepId_FinYear_bDel_Includes");

            entity.HasIndex(e => new { e.FrjobNo, e.BDel }, "ix_FR_Enquiry_FRJobNo_bDel").HasFillFactor(100);

            entity.HasIndex(e => e.LType, "ix_FR_Enquiry_lType_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.BDel, e.FinYear }, "ix_bDelFinYear_Includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChajobId)
                .HasDefaultValue(0)
                .HasColumnName("CHAJobId");
            entity.Property(e => e.CustRefNo).HasMaxLength(400);
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.DocDir).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Enqdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("ENQDate");
            entity.Property(e => e.EnqrefNo)
                .HasMaxLength(50)
                .HasColumnName("ENQRefNo");
            entity.Property(e => e.FabillStatusCheckDate)
                .HasColumnType("datetime")
                .HasColumnName("FABillStatusCheckDate");
            entity.Property(e => e.FrjobNo)
                .HasMaxLength(50)
                .HasColumnName("FRJobNo");
            entity.Property(e => e.IsAlibabaEnq).HasDefaultValue(false);
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LostStatusId)
                .HasDefaultValue(0)
                .HasColumnName("LostStatusID");
            entity.Property(e => e.OldRefNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FrEnquiryAgent>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_EnquiryAgent", tb => tb.HasTrigger("DelEnquiryAgentTR"));

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AgentId).HasColumnName("AgentID");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EnqId).HasColumnName("EnqID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FrEnquiryChat>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_EnquiryChat");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SMessage).HasColumnName("sMessage");
        });

        modelBuilder.Entity<FrEnquiryDetail>(entity =>
        {
            entity.HasKey(e => e.EnqId);

            entity.ToTable("FR_EnquiryDetail", tb =>
                {
                    tb.HasTrigger("DeleteFreightEnquiryDetail");
                    tb.HasTrigger("tr_FR_EnquiryDetail_Delete");
                    tb.HasTrigger("tr_FR_EnquiryDetail_Insert");
                    tb.HasTrigger("tr_FR_EnquiryDetail_Update");
                });

            entity.HasIndex(e => new { e.BranchId, e.Chaby }, "ix_FR_EnquiryDetail_BranchId_CHABy_includes");

            entity.Property(e => e.EnqId).ValueGeneratedNever();
            entity.Property(e => e.AgentName).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CargoDescription).HasMaxLength(200);
            entity.Property(e => e.CartingPoint).HasMaxLength(100);
            entity.Property(e => e.Chaby).HasColumnName("CHABy");
            entity.Property(e => e.ChajobNo)
                .HasMaxLength(50)
                .HasColumnName("CHAJobNo");
            entity.Property(e => e.Chaname)
                .HasMaxLength(200)
                .HasColumnName("CHAName");
            entity.Property(e => e.ChargeableWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Commodity).HasMaxLength(400);
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsigneeAddress).HasMaxLength(400);
            entity.Property(e => e.ConsigneeGstn)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeGSTN");
            entity.Property(e => e.ConsigneeId).HasColumnName("ConsigneeID");
            entity.Property(e => e.ConsigneeStateId).HasColumnName("ConsigneeStateID");
            entity.Property(e => e.ContainerSubType).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasComment("1 For FCL, 2 For LCL");
            entity.Property(e => e.DeliveryAddPincode).HasMaxLength(50);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(450);
            entity.Property(e => e.DeliveryInstruction).HasMaxLength(200);
            entity.Property(e => e.DimensionHeight).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DimensionLength).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DimensionWidth).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GrossWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.HsCode).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Iec)
                .HasDefaultValue(false)
                .HasColumnName("IEC");
            entity.Property(e => e.InvoiceValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LastDispatchDate).HasColumnType("datetime");
            entity.Property(e => e.Lclvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("LCLVolume");
            entity.Property(e => e.OptionId)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.ProductLink).HasMaxLength(150);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.QuoteRemark).HasMaxLength(50);
            entity.Property(e => e.Remarks).HasMaxLength(800);
            entity.Property(e => e.Shipper).HasMaxLength(100);
            entity.Property(e => e.ShipperAddress).HasMaxLength(400);
            entity.Property(e => e.ShipperId).HasColumnName("ShipperID");
            entity.Property(e => e.ShipperPinCode).HasMaxLength(50);
            entity.Property(e => e.TransportName).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");

            entity.HasOne(d => d.Enq).WithOne(p => p.FrEnquiryDetail)
                .HasForeignKey<FrEnquiryDetail>(d => d.EnqId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FR_EnquiryDetail_FR_Enquiry");
        });

        modelBuilder.Entity<FrEnquiryDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FR_EnquiryDetail_shadow");

            entity.Property(e => e.AgentName).HasMaxLength(200);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CargoDescription).HasMaxLength(400);
            entity.Property(e => e.ChargeableWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Commodity).HasMaxLength(800);
            entity.Property(e => e.Consignee).HasMaxLength(200);
            entity.Property(e => e.ConsigneeAddress).HasMaxLength(800);
            entity.Property(e => e.ConsigneeGstn)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeGSTN");
            entity.Property(e => e.ConsigneeId).HasColumnName("ConsigneeID");
            entity.Property(e => e.ConsigneeStateId).HasColumnName("ConsigneeStateID");
            entity.Property(e => e.ContainerSubType).HasMaxLength(100);
            entity.Property(e => e.DeliveryAddPincode).HasMaxLength(100);
            entity.Property(e => e.DeliveryAddress).HasMaxLength(900);
            entity.Property(e => e.DimensionHeight).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DimensionLength).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DimensionWidth).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GrossWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.HsCode).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Iec).HasColumnName("IEC");
            entity.Property(e => e.InvoiceValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lclvolume)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("LCLVolume");
            entity.Property(e => e.ProductLink).HasMaxLength(300);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Remarks).HasMaxLength(1600);
            entity.Property(e => e.Shipper).HasMaxLength(200);
            entity.Property(e => e.ShipperAddress).HasMaxLength(800);
            entity.Property(e => e.ShipperId).HasColumnName("ShipperID");
            entity.Property(e => e.ShipperPinCode).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FrEnquiryMailAttachPath>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FR_EnquiryMailAttachPath");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(50);
            entity.Property(e => e.GraphMessageKey).HasMaxLength(300);
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<FrEnquiryMailsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FR_EnquiryMailsDetail");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EnqrefNo)
                .HasMaxLength(50)
                .HasColumnName("ENQRefNo");
            entity.Property(e => e.GraphConversationKey).HasMaxLength(300);
            entity.Property(e => e.GraphMessageKey).HasMaxLength(300);
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.MailSentDate).HasColumnType("datetime");
            entity.Property(e => e.MailSubject).HasMaxLength(100);
            entity.Property(e => e.RecipientCc)
                .HasMaxLength(100)
                .HasColumnName("RecipientCC");
            entity.Property(e => e.RecipientTo).HasMaxLength(100);
            entity.Property(e => e.SenderAddress).HasMaxLength(250);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<FrEnquiryQuote>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_EnquiryQuote");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasMaxLength(50);
            entity.Property(e => e.AmtInr)
                .HasMaxLength(100)
                .HasColumnName("AmtINR");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerType).HasMaxLength(5);
            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EnqId).HasColumnName("EnqID");
            entity.Property(e => e.ExchangeRate).HasMaxLength(50);
            entity.Property(e => e.HeadingId).HasColumnName("HeadingID");
            entity.Property(e => e.IsCan)
                .HasDefaultValue(false)
                .HasColumnName("isCAN");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.Rate).HasMaxLength(50);
            entity.Property(e => e.Uomid).HasColumnName("UOMID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FrEnquiryShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("FR_Enquiry_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustRefNo).HasMaxLength(800);
            entity.Property(e => e.Customer).HasMaxLength(200);
            entity.Property(e => e.DocDir).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Enqdate).HasColumnName("ENQDate");
            entity.Property(e => e.EnqrefNo)
                .HasMaxLength(100)
                .HasColumnName("ENQRefNo");
            entity.Property(e => e.FrjobNo)
                .HasMaxLength(100)
                .HasColumnName("FRJobNo");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.LostStatusId).HasColumnName("LostStatusID");
            entity.Property(e => e.OldRefNo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FrEnquiryUser>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_EnquiryUser");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FrExportDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_ExportDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Asiby)
                .HasMaxLength(500)
                .HasComment("ASIBy Add For The Mode Air")
                .HasColumnName("ASIBy");
            entity.Property(e => e.Asidate)
                .HasColumnType("datetime")
                .HasColumnName("ASIDate");
            entity.Property(e => e.Atadestination)
                .HasColumnType("datetime")
                .HasColumnName("ATADestination");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bldate)
                .HasColumnType("datetime")
                .HasColumnName("BLDate");
            entity.Property(e => e.Blno)
                .HasMaxLength(50)
                .HasColumnName("BLNo");
            entity.Property(e => e.Blremarks)
                .HasMaxLength(500)
                .HasColumnName("BLRemarks");
            entity.Property(e => e.BookingSpace).HasMaxLength(100);
            entity.Property(e => e.CartingDate).HasColumnType("datetime");
            entity.Property(e => e.Clpdate)
                .HasColumnType("datetime")
                .HasColumnName("CLPDate");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContainerPickDate).HasColumnType("datetime");
            entity.Property(e => e.CustomDate).HasColumnType("datetime");
            entity.Property(e => e.DockCutoffDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Etadestination)
                .HasColumnType("datetime")
                .HasColumnName("ETADestination");
            entity.Property(e => e.Etatranshipment)
                .HasColumnType("datetime")
                .HasColumnName("ETATranshipment");
            entity.Property(e => e.Etdtranshipment)
                .HasColumnType("datetime")
                .HasColumnName("ETDTranshipment");
            entity.Property(e => e.FlightScheduleDetail).HasMaxLength(500);
            entity.Property(e => e.Form13CutoffDate).HasColumnType("datetime");
            entity.Property(e => e.Form13Date).HasColumnType("datetime");
            entity.Property(e => e.HazcutoffDate)
                .HasColumnType("datetime")
                .HasColumnName("HAZCutoffDate");
            entity.Property(e => e.Hbldate)
                .HasColumnType("datetime")
                .HasColumnName("HBLDate");
            entity.Property(e => e.Hblno)
                .HasMaxLength(50)
                .HasColumnName("HBLNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Leodate)
                .HasColumnType("datetime")
                .HasColumnName("LEODate");
            entity.Property(e => e.Mbldate)
                .HasColumnType("datetime")
                .HasColumnName("MBLDate");
            entity.Property(e => e.Mblno)
                .HasMaxLength(50)
                .HasColumnName("MBLNo");
            entity.Property(e => e.OnboardRemark).HasMaxLength(500);
            entity.Property(e => e.PlaceOfDelivery).HasMaxLength(100);
            entity.Property(e => e.PreAlertEmail).HasMaxLength(300);
            entity.Property(e => e.PreAlertRemarks).HasMaxLength(500);
            entity.Property(e => e.Sbdate)
                .HasColumnType("datetime")
                .HasColumnName("SBDate");
            entity.Property(e => e.Sbno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SBNO");
            entity.Property(e => e.ShipLineBookingNo).HasMaxLength(100);
            entity.Property(e => e.ShipOnboardDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingNo).HasMaxLength(100);
            entity.Property(e => e.ShippingOrderRemark).HasMaxLength(100);
            entity.Property(e => e.SicutoffDate)
                .HasColumnType("datetime")
                .HasColumnName("SICutoffDate");
            entity.Property(e => e.StuffingDate).HasColumnType("datetime");
            entity.Property(e => e.SurveyCutoffDate).HasColumnType("datetime");
            entity.Property(e => e.UnderPortRemark).HasMaxLength(500);
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
            entity.Property(e => e.VesselName).HasMaxLength(50);
            entity.Property(e => e.VgmcutoffDate)
                .HasColumnType("datetime")
                .HasColumnName("VGMCutoffDate");
            entity.Property(e => e.Vgmdate)
                .HasColumnType("datetime")
                .HasColumnName("VGMDate");
            entity.Property(e => e.Vgmno)
                .HasMaxLength(100)
                .HasColumnName("VGMNo");
        });

        modelBuilder.Entity<FrFieldGroup>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_FieldGroup");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FrFieldMaster>(entity =>
        {
            entity.HasKey(e => e.FieldId);

            entity.ToTable("FR_FieldMaster");

            entity.Property(e => e.FieldId).ValueGeneratedNever();
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FieldName).HasMaxLength(50);
            entity.Property(e => e.LType)
                .HasComment("1 For Standard Field, 2 For Additional Field")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<FrHoldBillingAdvice>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_HoldBillingAdvice");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsHolded).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(450);
        });

        modelBuilder.Entity<FrJobCancelDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__FR_JobCa__DE105D078A4E90A5");

            entity.ToTable("FR_JobCancelDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Reason).HasMaxLength(250);
            entity.Property(e => e.Remark).HasMaxLength(250);
        });

        modelBuilder.Entity<FrJobDeliveryM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_FR_DeliveryDetail");

            entity.ToTable("FR_JobDeliveryMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(200);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(100);
            entity.Property(e => e.CargoReceivedBy).HasMaxLength(50);
            entity.Property(e => e.DamagedImage).HasMaxLength(400);
            entity.Property(e => e.DeliveryPoint).HasMaxLength(200);
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DriverPhone).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(200)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(50);
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<FrLostStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_LostStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FrMode>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_Mode");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FrQuoteBuyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_FR_EnquiryBuyDetail");

            entity.ToTable("FR_QuoteBuyDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.BuyAmount).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExchangeRate).HasMaxLength(50);
            entity.Property(e => e.HeadingId).HasColumnName("HeadingID");
            entity.Property(e => e.IsSelf).HasColumnName("isSelf");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Quantity).HasMaxLength(100);
            entity.Property(e => e.Rate).HasMaxLength(50);
            entity.Property(e => e.Uomid).HasColumnName("UOMID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorName).HasMaxLength(500);
        });

        modelBuilder.Entity<FrQuoteEditPermission>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_QuoteEditPermissions");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.EnabledDate).HasColumnType("datetime");
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.IsEnabled).HasDefaultValue(false);
        });

        modelBuilder.Entity<FrRateAir>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FR_RateAir");

            entity.Property(e => e.Adhoc)
                .HasColumnType("money")
                .HasColumnName("ADHOC");
            entity.Property(e => e.Agent)
                .HasMaxLength(255)
                .HasColumnName("AGENT");
            entity.Property(e => e.Airline)
                .HasMaxLength(255)
                .HasColumnName("AIRLINE");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Minrate)
                .HasColumnType("money")
                .HasColumnName("MINRate");
            entity.Property(e => e.Month).HasMaxLength(255);
            entity.Property(e => e.Pod)
                .HasMaxLength(255)
                .HasColumnName("POD");
            entity.Property(e => e.Pol)
                .HasMaxLength(255)
                .HasColumnName("POL");
            entity.Property(e => e.Validity)
                .HasColumnType("datetime")
                .HasColumnName("VALIDITY");
            entity.Property(e => e._1000Kg)
                .HasColumnType("money")
                .HasColumnName("1000 kg");
            entity.Property(e => e._100Kg)
                .HasColumnType("money")
                .HasColumnName("100 kg");
            entity.Property(e => e._300Kg)
                .HasColumnType("money")
                .HasColumnName("300 kg");
            entity.Property(e => e._45Kg)
                .HasColumnType("money")
                .HasColumnName("45 kg");
            entity.Property(e => e._500Kg)
                .HasColumnType("money")
                .HasColumnName("500 kg");
        });

        modelBuilder.Entity<FrRateSea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FR_RateSea");

            entity.Property(e => e.Agent)
                .HasMaxLength(255)
                .HasColumnName("AGENT");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Line)
                .HasMaxLength(255)
                .HasColumnName("line");
            entity.Property(e => e.Month)
                .HasMaxLength(255)
                .HasColumnName("MONTH");
            entity.Property(e => e.Pod)
                .HasMaxLength(255)
                .HasColumnName("POD");
            entity.Property(e => e.Pol)
                .HasMaxLength(255)
                .HasColumnName("POL");
            entity.Property(e => e.Specials)
                .HasMaxLength(255)
                .HasColumnName("SPECIALS");
            entity.Property(e => e.TT).HasColumnName("t/t");
            entity.Property(e => e.Validity)
                .HasMaxLength(255)
                .HasColumnName("VALIDITY");
            entity.Property(e => e.Weight20ft)
                .HasMaxLength(255)
                .HasColumnName("WEIGHT20FT");
            entity.Property(e => e.Weight40ft)
                .HasMaxLength(255)
                .HasColumnName("WEIGHT 40FT");
            entity.Property(e => e._20gp)
                .HasMaxLength(255)
                .HasColumnName("20GP");
            entity.Property(e => e._40gpHq)
                .HasMaxLength(255)
                .HasColumnName("40GP/HQ");
        });

        modelBuilder.Entity<FrReminder>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_Reminder");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LMode).HasColumnName("lMode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.RemindDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FrReminderLog>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_ReminderLog");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SentTo).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(200);
            entity.Property(e => e.Subject).HasMaxLength(100);
        });

        modelBuilder.Entity<FrSacWsTaxDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_SacWsTaxDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGST");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Igst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SacNo).HasMaxLength(50);
            entity.Property(e => e.Sgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGST");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<FrSeaRateChart>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_SeaRateChart");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Agent).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Currency).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.Line)
                .HasMaxLength(100)
                .HasColumnName("line");
            entity.Property(e => e.Pod)
                .HasMaxLength(100)
                .HasColumnName("POD");
            entity.Property(e => e.Pol)
                .HasMaxLength(100)
                .HasColumnName("POL");
            entity.Property(e => e.RateValidityDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.TransitDays).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e._20gp)
                .HasMaxLength(100)
                .HasColumnName("20GP");
            entity.Property(e => e._40gphq)
                .HasMaxLength(100)
                .HasColumnName("40GPHQ");
        });

        modelBuilder.Entity<FrShipmentTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("FR_ShipmentTypeMs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Sname).HasMaxLength(50);
        });

        modelBuilder.Entity<FrStatusHistory>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_StatusHistory", tb => tb.HasTrigger("DeleteFRStatusHistory"));

            entity.HasIndex(e => new { e.EnqId, e.IsActive }, "ix_FR_StatusHistory_EnqId_IsActive_includes");

            entity.HasIndex(e => new { e.IsActive, e.LStatus }, "ix_FR_StatusHistory_IsActive_lStatus_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remarks).HasMaxLength(800);
        });

        modelBuilder.Entity<FrStatusM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_StatusMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FrTempJobFa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FR_TempJobFA");

            entity.Property(e => e.IsValid)
                .HasDefaultValue(false)
                .HasColumnName("isValid");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("ref");
        });

        modelBuilder.Entity<FrTermsM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("FR_TermsMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<FrTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_FR_FreightTypeMS");

            entity.ToTable("FR_TypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<GcmUserM>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("GCM_UserMS");

            entity.Property(e => e.UserId).ValueGeneratedNever();
        });

        modelBuilder.Entity<GstGst>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_GST");

            entity.ToTable("GST_Gst");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.ComapnyPanNo).HasMaxLength(100);
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.ContactNo).HasMaxLength(20);
            entity.Property(e => e.DirName).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailAddress).HasMaxLength(400);
            entity.Property(e => e.EmployeeForGst).HasMaxLength(200);
            entity.Property(e => e.IsGstregister).HasColumnName("IsGSTRegister");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<GstGstDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("GST_GstDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Branch).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GstProvistionId)
                .HasMaxLength(50)
                .HasColumnName("GstProvistionID");
            entity.Property(e => e.GstaddressId).HasColumnName("GSTAddressID");
            entity.Property(e => e.GstnArnNo)
                .HasMaxLength(50)
                .HasColumnName("GstnArnNO");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NameOfCompanies).HasMaxLength(100);
            entity.Property(e => e.PersonEmailId)
                .HasMaxLength(400)
                .HasColumnName("PersonEmailID");
            entity.Property(e => e.PersonName).HasMaxLength(200);
            entity.Property(e => e.PersonNo).HasMaxLength(20);
        });

        modelBuilder.Entity<GstGstMaterial>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("GST_GstMaterial");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CommodityName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsncode)
                .HasMaxLength(100)
                .HasColumnName("HSNCode");
            entity.Property(e => e.Iuser).HasColumnName("IUser");
            entity.Property(e => e.MaterialSupplied).HasMaxLength(200);
        });

        modelBuilder.Entity<GstGstService>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("GST_GstServices");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Saccode)
                .HasMaxLength(200)
                .HasColumnName("SACCode");
            entity.Property(e => e.ServiceCategory).HasMaxLength(200);
            entity.Property(e => e.ServiceProvided).HasMaxLength(200);
        });

        modelBuilder.Entity<IceBecurrentStatus>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_ICE_CurrentStatus");

            entity.ToTable("ICE_BECurrentStatus");

            entity.HasIndex(e => new { e.Beid, e.BDel }, "ix_ICE_BECurrentStatus_BEID_bDel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprDate)
                .HasColumnType("datetime")
                .HasColumnName("APPR_DATE");
            entity.Property(e => e.Appraisement)
                .HasDefaultValue(0)
                .HasComment("1 - RMS, 2 - Non-RMS");
            entity.Property(e => e.AssessDate)
                .HasColumnType("datetime")
                .HasColumnName("ASSESS_DATE");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beid).HasColumnName("BEID");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(50)
                .HasColumnName("CURRENT_QUEUE");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExamDate)
                .HasColumnType("datetime")
                .HasColumnName("EXAM_DATE");
            entity.Property(e => e.OocDate)
                .HasColumnType("datetime")
                .HasColumnName("OOC_DATE");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("PAYMENT_DATE");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceBedetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_ICE_BEDetail2");

            entity.ToTable("ICE_BEDetail");

            entity.HasIndex(e => new { e.JobId, e.Beno, e.BDel }, "ix_ICE_BEDetail_JobId_BENo_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AppGroup).HasMaxLength(10);
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Bedate)
                .HasColumnType("datetime")
                .HasColumnName("BEDate");
            entity.Property(e => e.Beno).HasColumnName("BENo");
            entity.Property(e => e.Chano)
                .HasMaxLength(50)
                .HasColumnName("CHANo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinePenalty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.Iecno)
                .HasMaxLength(50)
                .HasColumnName("IECNo");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PriorBe).HasColumnName("PriorBE");
            entity.Property(e => e.PriorBestatus)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PriorBEStatus");
            entity.Property(e => e.Sec48).HasColumnName("SEC48");
            entity.Property(e => e.Sec48status)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SEC48Status");
            entity.Property(e => e.TotalAssess).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Typ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("TYP");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.Wbeno)
                .HasMaxLength(50)
                .HasColumnName("WBENo");
        });

        modelBuilder.Entity<IceBedocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_BEDocument");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Bedate)
                .HasColumnType("datetime")
                .HasColumnName("BEDate");
            entity.Property(e => e.Beno).HasColumnName("BENo");
            entity.Property(e => e.DirPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.PortCode).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceBequery>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_BEQuery");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beid).HasColumnName("BEID");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(50)
                .HasColumnName("CURRENT_QUEUE");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.QueryDate)
                .HasColumnType("datetime")
                .HasColumnName("QUERY_DATE");
            entity.Property(e => e.QueryNo).HasDefaultValue(1);
            entity.Property(e => e.QueryRaised).HasColumnName("QUERY_RAISED");
            entity.Property(e => e.QueryReply).HasColumnName("QUERY_REPLY");
            entity.Property(e => e.ReplyDate)
                .HasColumnType("datetime")
                .HasColumnName("REPLY_DATE");
            entity.Property(e => e.ReplyStatus)
                .HasMaxLength(50)
                .HasColumnName("REPLY_STATUS");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceBestatus>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_ICETracking");

            entity.ToTable("ICE_BEStatus");

            entity.HasIndex(e => new { e.IcejobNo, e.IcejobDate, e.IceportCode, e.StatusId }, "ix_ICE_BEStatus_ICEJobNo_ICEJobDate_ICEPortCode_StatusId");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BsjobNo)
                .HasMaxLength(50)
                .HasColumnName("BSJobNo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailAddress).HasMaxLength(400);
            entity.Property(e => e.EmailSent).HasDefaultValue(false);
            entity.Property(e => e.IceackReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("ICEAckReceivedDate");
            entity.Property(e => e.Iceboedate)
                .HasColumnType("datetime")
                .HasColumnName("ICEBOEDate");
            entity.Property(e => e.Iceboeno)
                .HasMaxLength(50)
                .HasColumnName("ICEBOENo");
            entity.Property(e => e.IcejobDate).HasColumnName("ICEJobDate");
            entity.Property(e => e.IcejobNo)
                .HasMaxLength(50)
                .HasColumnName("ICEJobNo");
            entity.Property(e => e.Icemessage)
                .HasMaxLength(200)
                .HasColumnName("ICEMessage");
            entity.Property(e => e.IceportCode)
                .HasMaxLength(50)
                .HasColumnName("ICEPortCode");
            entity.Property(e => e.IcereceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("ICEReceivedDate");
            entity.Property(e => e.MobileNo).HasMaxLength(400);
            entity.Property(e => e.Smssent)
                .HasDefaultValue(false)
                .HasColumnName("SMSSent");
            entity.Property(e => e.StatusId)
                .HasDefaultValue(0)
                .HasComment("0- Submitted, 1- Positive Ack, 2 - Negative Ack");
            entity.Property(e => e.TrackCount).HasDefaultValue(1);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceBillOfEntry>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_ICE_BEDetail");

            entity.ToTable("ICE_BillOfEntry");

            entity.HasIndex(e => new { e.JobId, e.Beno, e.BDel }, "ix_ICE_BillOfEntry_JobId_BENo_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Bedate)
                .HasColumnType("datetime")
                .HasColumnName("BEDate");
            entity.Property(e => e.Beno).HasColumnName("BENo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IceAppGroup)
                .HasMaxLength(50)
                .HasColumnName("ICE_AppGroup");
            entity.Property(e => e.IceAppraisement)
                .HasMaxLength(50)
                .HasColumnName("ICE_APPRAISEMENT");
            entity.Property(e => e.IceApprdate)
                .HasMaxLength(50)
                .HasColumnName("ICE_APPRDate");
            entity.Property(e => e.IceAssessDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_AssessDate");
            entity.Property(e => e.IceBedate)
                .HasMaxLength(50)
                .HasColumnName("ICE_BEDate");
            entity.Property(e => e.IceChallanNo)
                .HasMaxLength(50)
                .HasColumnName("ICE_ChallanNo");
            entity.Property(e => e.IceChano)
                .HasMaxLength(50)
                .HasColumnName("ICE_CHANo");
            entity.Property(e => e.IceCurrQueue).HasColumnName("ICE_CurrQueue");
            entity.Property(e => e.IceDutyAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_DutyAmount");
            entity.Property(e => e.IceDutyPaid)
                .HasMaxLength(50)
                .HasColumnName("ICE_DutyPaid");
            entity.Property(e => e.IceExamineDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_ExamineDate");
            entity.Property(e => e.IceFineAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_FineAmount");
            entity.Property(e => e.IceFinePenalty)
                .HasMaxLength(50)
                .HasColumnName("ICE_FinePenalty");
            entity.Property(e => e.IceFirstCheck)
                .HasMaxLength(50)
                .HasColumnName("ICE_FirstCheck");
            entity.Property(e => e.IceGrossWt)
                .HasMaxLength(50)
                .HasColumnName("ICE_GrossWT");
            entity.Property(e => e.IceIecno)
                .HasMaxLength(50)
                .HasColumnName("ICE_IECNo");
            entity.Property(e => e.IceInterestAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_InterestAmount");
            entity.Property(e => e.IceModeOfPayment)
                .HasMaxLength(50)
                .HasColumnName("ICE_ModeOfPayment");
            entity.Property(e => e.IceOocdate)
                .HasMaxLength(50)
                .HasColumnName("ICE_OOCDate");
            entity.Property(e => e.IcePaymentDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_PaymentDate");
            entity.Property(e => e.IcePenalAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_PenalAmount");
            entity.Property(e => e.IcePriorBe)
                .HasMaxLength(50)
                .HasColumnName("ICE_PriorBE");
            entity.Property(e => e.IceQueryRaised).HasColumnName("ICE_QueryRaised");
            entity.Property(e => e.IceQueryReply).HasColumnName("ICE_QueryReply");
            entity.Property(e => e.IceReplyDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_ReplyDate");
            entity.Property(e => e.IceReplyStatus).HasColumnName("ICE_ReplyStatus");
            entity.Property(e => e.IceSec48)
                .HasMaxLength(50)
                .HasColumnName("ICE_SEC48");
            entity.Property(e => e.IceTotalAssess)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalAssess");
            entity.Property(e => e.IceTotalDuty)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalDuty");
            entity.Property(e => e.IceTotalDutyAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalDutyAmount");
            entity.Property(e => e.IceTotalPkgs)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalPkgs");
            entity.Property(e => e.IceTotalValue)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalValue");
            entity.Property(e => e.IceTyp)
                .HasMaxLength(50)
                .HasColumnName("ICE_TYP");
            entity.Property(e => e.IceWbeno)
                .HasMaxLength(50)
                .HasColumnName("ICE_WBENo");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceContainerDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("ICE_ContainerDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerDetails)
                .HasMaxLength(50)
                .HasColumnName("Container_Details");
            entity.Property(e => e.ContainerStatus)
                .HasMaxLength(50)
                .HasColumnName("Container_Status");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM_No");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LineNo)
                .HasMaxLength(50)
                .HasColumnName("Line_No");
            entity.Property(e => e.SublineNo)
                .HasMaxLength(50)
                .HasColumnName("Subline_No");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<IceCustomsStageM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_CustomsStageMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.RoleName).HasMaxLength(20);
        });

        modelBuilder.Entity<IceDrawbackQueryDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_DrawbackQueryDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.OfficerName)
                .HasMaxLength(100)
                .HasColumnName("Officer Name");
            entity.Property(e => e.PendingWith).HasColumnName("Pending With");
            entity.Property(e => e.QueryDate)
                .HasMaxLength(10)
                .HasColumnName("Query_Date");
            entity.Property(e => e.QueryNo)
                .HasMaxLength(100)
                .HasColumnName("Query_No");
            entity.Property(e => e.QueryText).HasColumnName("Query_Text");
            entity.Property(e => e.ReplyDate)
                .HasMaxLength(10)
                .HasColumnName("Reply Date");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceDutyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_DutyDetail", tb =>
                {
                    tb.HasTrigger("tr_ICE_DutyDetail_Delete");
                    tb.HasTrigger("tr_ICE_DutyDetail_Insert");
                    tb.HasTrigger("tr_ICE_DutyDetail_Update");
                });

            entity.HasIndex(e => new { e.Beid, e.BDel }, "ix_ICE_DutyDetail_BEID_bDel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beid).HasColumnName("BEID");
            entity.Property(e => e.ChallanNo)
                .HasMaxLength(50)
                .HasColumnName("CHALLAN_No");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY_AMOUNT");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY_PAID");
            entity.Property(e => e.FineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FINE_AMOUNT");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTEREST_AMOUNT");
            entity.Property(e => e.PayMode).HasMaxLength(50);
            entity.Property(e => e.PenalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PENAL_AMOUNT");
            entity.Property(e => e.TotalDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DUTY");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceDutyDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("ICE_DutyDetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beid).HasColumnName("BEID");
            entity.Property(e => e.ChallanNo)
                .HasMaxLength(100)
                .HasColumnName("CHALLAN_No");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY_AMOUNT");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY_PAID");
            entity.Property(e => e.FineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FINE_AMOUNT");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTEREST_AMOUNT");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PayMode).HasMaxLength(100);
            entity.Property(e => e.PenalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PENAL_AMOUNT");
            entity.Property(e => e.TotalDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DUTY");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceEdocumentValidity>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_EDocumentValidity");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocumentDescription)
                .HasMaxLength(50)
                .HasColumnName("Document Description");
            entity.Property(e => e.DocumentVersion)
                .HasMaxLength(50)
                .HasColumnName("Document Version");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.Validity).HasMaxLength(50);
        });

        modelBuilder.Entity<IceEgmdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_EGMDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(20)
                .HasColumnName("Container_No");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EgmDate)
                .HasMaxLength(10)
                .HasColumnName("EGM_Date");
            entity.Property(e => e.EgmNo)
                .HasMaxLength(50)
                .HasColumnName("EGM_No");
            entity.Property(e => e.SealNo)
                .HasMaxLength(50)
                .HasColumnName("Seal_No");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceIgmdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_IGMDetail");

            entity.HasIndex(e => e.InwardDate, "ix_ICE_IGMDetail_Inward_Date_includes").HasFillFactor(100);

            entity.HasIndex(e => e.InwardDate, "ix_ICE_IGMDetail_Inward_Date_includes1").HasFillFactor(100);

            entity.HasIndex(e => e.InwardDate, "ix_ICE_IGMDetail_Inward_Date_includes2").HasFillFactor(100);

            entity.HasIndex(e => e.JobId, "ix_ICE_IGMDetail_JobId");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CargoMove).HasMaxLength(20);
            entity.Property(e => e.DescOfGoods)
                .HasMaxLength(400)
                .HasColumnName("Desc_Of_Goods");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .HasColumnName("File_Name");
            entity.Property(e => e.GatewayPort)
                .HasMaxLength(20)
                .HasColumnName("Gateway_Port");
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.HblDate)
                .HasColumnType("datetime")
                .HasColumnName("HBL_Date");
            entity.Property(e => e.HblNo)
                .HasMaxLength(25)
                .HasColumnName("HBL_No");
            entity.Property(e => e.IgmDate)
                .HasColumnType("datetime")
                .HasColumnName("IGM_Date");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(20)
                .HasColumnName("IGM_No");
            entity.Property(e => e.ImoNo)
                .HasMaxLength(20)
                .HasColumnName("IMO_No");
            entity.Property(e => e.InwardDate)
                .HasColumnType("datetime")
                .HasColumnName("Inward_Date");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsValidMbl)
                .HasDefaultValue(true)
                .HasColumnName("IsValidMBL");
            entity.Property(e => e.LType)
                .HasDefaultValue(1)
                .HasComment("1 - Import, 2 - Export, 2 Freight")
                .HasColumnName("lType");
            entity.Property(e => e.LineNo)
                .HasMaxLength(20)
                .HasColumnName("Line_NO");
            entity.Property(e => e.MblDate)
                .HasColumnType("datetime")
                .HasColumnName("MBL_Date");
            entity.Property(e => e.MblNo)
                .HasMaxLength(50)
                .HasColumnName("MBL_No");
            entity.Property(e => e.Pkgcode)
                .HasMaxLength(20)
                .HasColumnName("PKGCode");
            entity.Property(e => e.PortDestination).HasMaxLength(20);
            entity.Property(e => e.SublineNo)
                .HasMaxLength(20)
                .HasColumnName("Subline_No");
            entity.Property(e => e.TotalPkg).HasColumnName("TotalPKG");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VesselCode)
                .HasMaxLength(20)
                .HasColumnName("Vessel_Code");
            entity.Property(e => e.VoyageNo)
                .HasMaxLength(20)
                .HasColumnName("Voyage_No");
            entity.Property(e => e.WeightUnit).HasMaxLength(20);
        });

        modelBuilder.Entity<IcePaymentDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_PaymentDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CessAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CESS AMOUNT");
            entity.Property(e => e.ChallanNo)
                .HasMaxLength(50)
                .HasColumnName("CHALLAN No");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY AMOUNT");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY PAID");
            entity.Property(e => e.ModeOfPayment)
                .HasMaxLength(100)
                .HasColumnName("MODE OF PAYMENT");
            entity.Property(e => e.TotalDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL DUTY");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IcePort>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_Port");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IcePortName)
                .HasMaxLength(100)
                .HasColumnName("ICE_PortName");
            entity.Property(e => e.PortCode).HasMaxLength(50);
            entity.Property(e => e.PortId).HasColumnName("PortID");
        });

        modelBuilder.Entity<IceQueryStatusDel>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_ICE_QueryStatus");

            entity.ToTable("ICE_QueryStatusDel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(50)
                .HasColumnName("CURRENT_QUEUE");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.QueryRaised).HasColumnName("QUERY_RAISED");
            entity.Property(e => e.QueryReply).HasColumnName("QUERY_REPLY");
            entity.Property(e => e.ReplyDate)
                .HasColumnType("datetime")
                .HasColumnName("REPLY_DATE");
            entity.Property(e => e.Replystatus)
                .HasMaxLength(50)
                .HasColumnName("REPLYSTATUS");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceSbdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_SBDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.CinDate)
                .HasMaxLength(20)
                .HasColumnName("CIN_Date");
            entity.Property(e => e.CinNo)
                .HasMaxLength(20)
                .HasColumnName("CIN_No");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IceCess)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ICE_Cess");
            entity.Property(e => e.IceChaNo)
                .HasMaxLength(50)
                .HasColumnName("ICE_CHA_No");
            entity.Property(e => e.IceDrawback)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ICE_Drawback");
            entity.Property(e => e.IceFob)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ICE_FOB");
            entity.Property(e => e.IceGrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ICE_GrossWT");
            entity.Property(e => e.IceIec)
                .HasMaxLength(50)
                .HasColumnName("ICE_IEC");
            entity.Property(e => e.IceJobDate)
                .HasColumnType("datetime")
                .HasColumnName("ICE_JobDate");
            entity.Property(e => e.IceJobNo).HasColumnName("ICE_JobNo");
            entity.Property(e => e.IcePkgs).HasColumnName("ICE_Pkgs");
            entity.Property(e => e.IcePod)
                .HasMaxLength(50)
                .HasColumnName("ICE_POD");
            entity.Property(e => e.IceSbdate)
                .HasColumnType("datetime")
                .HasColumnName("ICE_SBDate");
            entity.Property(e => e.IceSbno).HasColumnName("ICE_SBNo");
            entity.Property(e => e.IceStr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ICE_STR");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.TotalDbkStr)
                .HasMaxLength(20)
                .HasColumnName("Total_(DBK+STR)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceSbquery>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_SBQuery");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.QueryDate).HasColumnType("datetime");
            entity.Property(e => e.QueryOfficerName).HasMaxLength(100);
            entity.Property(e => e.QueryPendingWith).HasMaxLength(100);
            entity.Property(e => e.QueryReplyDate).HasColumnType("datetime");
            entity.Property(e => e.QueryText).HasMaxLength(200);
            entity.Property(e => e.Sbid).HasColumnName("SBID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<IceSbstatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("ICE_SBStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AcApr)
                .HasMaxLength(50)
                .HasColumnName("AC_APR");
            entity.Property(e => e.AcAprDate)
                .HasMaxLength(20)
                .HasColumnName("AC_APR_Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(20)
                .HasColumnName("Appraising_Date");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CurrentQue)
                .HasMaxLength(50)
                .HasColumnName("Current_Que");
            entity.Property(e => e.CurrentStatus)
                .HasMaxLength(50)
                .HasColumnName("Current_Status");
            entity.Property(e => e.DbkAcId)
                .HasMaxLength(50)
                .HasColumnName("DBK_AC_ID");
            entity.Property(e => e.DbkAcIdDate)
                .HasMaxLength(20)
                .HasColumnName("DBK_AC_ID_Date");
            entity.Property(e => e.DbkScrollNo)
                .HasMaxLength(50)
                .HasColumnName("DBK_Scroll_No");
            entity.Property(e => e.DbkSupdtDate)
                .HasMaxLength(20)
                .HasColumnName("DBK_Supdt_Date");
            entity.Property(e => e.DbkSupdtId)
                .HasMaxLength(50)
                .HasColumnName("DBK_Supdt_ID");
            entity.Property(e => e.DepbLic)
                .HasMaxLength(50)
                .HasColumnName("DEPB_Lic");
            entity.Property(e => e.DepbLicDate)
                .HasMaxLength(20)
                .HasColumnName("DEPB_Lic_Date");
            entity.Property(e => e.DepbSupdt)
                .HasMaxLength(50)
                .HasColumnName("DEPB_Supdt");
            entity.Property(e => e.DepbSupdtDate)
                .HasMaxLength(20)
                .HasColumnName("DEPB_Supdt_Date");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EgmDate)
                .HasColumnType("datetime")
                .HasColumnName("EGM_Date");
            entity.Property(e => e.EgmNo)
                .HasMaxLength(50)
                .HasColumnName("EGM_No");
            entity.Property(e => e.EgmStatus)
                .HasMaxLength(50)
                .HasColumnName("EGM_Status");
            entity.Property(e => e.EgmerrorMessage)
                .HasMaxLength(200)
                .HasColumnName("EGMError_Message");
            entity.Property(e => e.EpCopyPrintStatus)
                .HasMaxLength(50)
                .HasColumnName("EP_Copy_Print_Status");
            entity.Property(e => e.ExamDate)
                .HasMaxLength(20)
                .HasColumnName("EXAM_DATE");
            entity.Property(e => e.ExamMarkId)
                .HasMaxLength(50)
                .HasColumnName("Exam_Mark_ID");
            entity.Property(e => e.InspEo)
                .HasMaxLength(50)
                .HasColumnName("Insp_EO");
            entity.Property(e => e.LeoDate)
                .HasMaxLength(20)
                .HasColumnName("LEO_Date");
            entity.Property(e => e.MarkDate)
                .HasMaxLength(20)
                .HasColumnName("Mark_Date");
            entity.Property(e => e.PrintStatus)
                .HasMaxLength(50)
                .HasColumnName("Print_Status");
            entity.Property(e => e.SampleDrawn)
                .HasMaxLength(50)
                .HasColumnName("Sample_Drawn");
            entity.Property(e => e.Sbid).HasColumnName("SBID");
            entity.Property(e => e.ScrollDate)
                .HasMaxLength(20)
                .HasColumnName("Scroll_Date");
            entity.Property(e => e.SupdtAoId)
                .HasMaxLength(50)
                .HasColumnName("Supdt_AO_Id");
            entity.Property(e => e.TestReport)
                .HasMaxLength(50)
                .HasColumnName("Test_Report");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.WarehouseCode)
                .HasMaxLength(50)
                .HasColumnName("Warehouse_Code");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse_Name");
        });

        modelBuilder.Entity<IceUserEmail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("ICE_UserEmail");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailReadDate).HasColumnType("datetime");
            entity.Property(e => e.EmailReadTimestamp).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.PortCodes).HasMaxLength(200);
            entity.Property(e => e.PortNames).HasMaxLength(200);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SEmail)
                .HasMaxLength(50)
                .HasColumnName("sEmail");
        });

        modelBuilder.Entity<IceUserM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("ICE_UserMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchName).HasMaxLength(50);
            entity.Property(e => e.DeptHeadEmail).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LType)
                .HasDefaultValue(0)
                .HasComment("0 - Main Login - Branch, 1 Sub Login - Port")
                .HasColumnName("lType");
            entity.Property(e => e.ParentId)
                .HasDefaultValue(0)
                .HasComment("Main LoginId - Branch");
            entity.Property(e => e.PortCode).HasMaxLength(50);
            entity.Property(e => e.PortName).HasMaxLength(100);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SyncDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImsDispatchItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("IMS_DispatchItem");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.EmpName).HasMaxLength(100);
            entity.Property(e => e.Finyear).HasDefaultValue(11);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<ImsItemDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("IMS_ItemDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BalQuntity).HasDefaultValue(0L);
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ImsItemHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("IMS_ItemHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BillAmount).HasMaxLength(100);
            entity.Property(e => e.BillDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.BillNo)
                .HasMaxLength(50)
                .HasColumnName("BillNO");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinYear).HasDefaultValue(11);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.VendorName).HasMaxLength(200);
        });

        modelBuilder.Entity<ImsItemTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("IMS_ItemTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ImsMaintenanceCategory>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_IMS_MaintanceCategory");

            entity.ToTable("IMS_MaintenanceCategory");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasDefaultValue(1)
                .HasComment("1-General,2 - Other")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<ImsMaintenanceDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("IMS_MaintenanceDocument");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
        });

        modelBuilder.Entity<ImsMaintenanceExpense>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("IMS_MaintenanceExpense", tb =>
                {
                    tb.HasTrigger("tr_IMS_MaintenanceExpense_Delete");
                    tb.HasTrigger("tr_IMS_MaintenanceExpense_Insert");
                    tb.HasTrigger("tr_IMS_MaintenanceExpense_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(100);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ImsMaintenanceExpenseShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("IMS_MaintenanceExpense_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(200);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PaidTo).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<ImsMaintenanceWork>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_IMS_MaintanceWork");

            entity.ToTable("IMS_MaintenanceWork", tb =>
                {
                    tb.HasTrigger("tr_IMS_MaintenanceWork_Delete");
                    tb.HasTrigger("tr_IMS_MaintenanceWork_Insert");
                    tb.HasTrigger("tr_IMS_MaintenanceWork_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(100);
            entity.Property(e => e.BillPaidDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.WorkDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImsMaintenanceWorkShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("IMS_MaintenanceWork_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(200);
            entity.Property(e => e.BillPaidDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PaidTo).HasMaxLength(200);
            entity.Property(e => e.WorkDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InvConsolePaymentDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_ConsolePaymentDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsolePaymentId).HasColumnName("ConsolePaymentID");
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
        });

        modelBuilder.Entity<InvConsolePaymentM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_ConsolePaymentMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.ConsoleId).HasColumnName("ConsoleID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceDetail", tb =>
                {
                    tb.HasTrigger("tr_INV_InvoiceDetail_Delete");
                    tb.HasTrigger("tr_INV_InvoiceDetail_Insert");
                    tb.HasTrigger("tr_INV_InvoiceDetail_Update");
                });

            entity.HasIndex(e => new { e.ModuleId, e.LStatus, e.BDel }, "ModuleId_lStatus_bDel_Includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.FarefNo, e.InvoiceNo, e.VendorCode, e.TotalAmount }, "ix_INV_InvoiceDetail_FARefNo_InvoiceNo_VendorCode_TotalAmount");

            entity.HasIndex(e => new { e.InvoiceNo, e.VendorCode, e.BDel }, "ix_INV_InvoiceDetail_InvoiceNo_VendorCode_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.IsBjvjbposting, e.Bjvjbnumber }, "ix_INV_InvoiceDetail_IsBJVJBPosting_BJVJBNumber").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobId, e.ModuleId, e.BDel }, "ix_INV_InvoiceDetail_JobId_ModuleId_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.ModuleId, e.IsFinalInvoicePending, e.InvoiceType, e.BDel, e.LStatus }, "ix_INV_InvoiceDetail_ModuleId_IsFinalInvoicePending_InvoiceType_bDel_lStatus_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.ModuleId, e.ProformaInvoiceId, e.IsImmediatePayment, e.BDel, e.BillType, e.LStatus }, "ix_INV_InvoiceDetail_ModuleId_ProformaInvoiceId_IsImmediatePayment_bDel_BillType_lStatus").HasFillFactor(100);

            entity.HasIndex(e => new { e.ModuleId, e.BDel }, "ix_INV_InvoiceDetail_ModuleId_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.ProformaInvoiceId, e.IsImmediatePayment, e.BDel, e.ExpenseTypeId, e.BillType, e.InvoiceMode, e.LStatus }, "ix_INV_InvoiceDetail_ProformaInvoiceId_IsImmediatePayment_bDel_ExpenseTypeId_BillType_InvoiceMode_lStatus_includes").HasFillFactor(100);

            entity.HasIndex(e => e.IsBjvpaymentPosting, "ix_INV_InvoiceDetail_isBJVPaymentPosting_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillType)
                .HasDefaultValue(0)
                .HasComment("0 - Invoice Payment Request, 10 -- Check Issue and Payment Completed");
            entity.Property(e => e.Bjvjbnumber)
                .HasMaxLength(20)
                .HasColumnName("BJVJBNumber");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Cgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGST");
            entity.Property(e => e.CompanyCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeCode).HasMaxLength(50);
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.ConsigneePan)
                .HasMaxLength(50)
                .HasColumnName("ConsigneePAN");
            entity.Property(e => e.DivisionCode).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseTypeId).HasDefaultValue(0);
            entity.Property(e => e.FarefNo)
                .HasMaxLength(50)
                .HasColumnName("FARefNo");
            entity.Property(e => e.FinalInvoiceId).HasDefaultValue(0);
            entity.Property(e => e.Gstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTAmount");
            entity.Property(e => e.Gstno)
                .HasMaxLength(100)
                .HasColumnName("GSTNo");
            entity.Property(e => e.Gstrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTRate");
            entity.Property(e => e.Hodid)
                .HasDefaultValue(0)
                .HasColumnName("HODID");
            entity.Property(e => e.Igst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST");
            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceCurrencyAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceCurrencyExchangeRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.InvoiceCurrencyId).HasDefaultValue(46);
            entity.Property(e => e.InvoiceMode).HasDefaultValue(1);
            entity.Property(e => e.InvoiceNo).HasMaxLength(100);
            entity.Property(e => e.IsBjvjbposting).HasColumnName("IsBJVJBPosting");
            entity.Property(e => e.IsBjvpaymentPosting).HasColumnName("isBJVPaymentPosting");
            entity.Property(e => e.IsFinalInvoicePending).HasDefaultValue(false);
            entity.Property(e => e.IsImmediatePayment).HasDefaultValue(true);
            entity.Property(e => e.IsInterest).HasDefaultValue(false);
            entity.Property(e => e.IsNoItc)
                .HasDefaultValue(false)
                .HasColumnName("IsNoITC");
            entity.Property(e => e.IsNoItcrcm)
                .HasDefaultValue(false)
                .HasColumnName("IsNoITCRCM");
            entity.Property(e => e.IsRim).HasColumnName("IsRIM");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRequiredDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTerms).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeId).HasDefaultValue(0);
            entity.Property(e => e.ProformaInvoiceId).HasDefaultValue(0);
            entity.Property(e => e.Rcmapplicable)
                .HasDefaultValue(false)
                .HasColumnName("RCMApplicable");
            entity.Property(e => e.RcmgstType)
                .HasDefaultValue(0)
                .HasComment("1- IGST, 2- CGST and SGST")
                .HasColumnName("RCMGstType");
            entity.Property(e => e.RcmledgerCode)
                .HasMaxLength(50)
                .HasColumnName("RCMLedgerCode");
            entity.Property(e => e.Rcmrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.RcmtotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMTotalAmount");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Sgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGST");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsapplicable)
                .HasDefaultValue(false)
                .HasColumnName("TDSApplicable");
            entity.Property(e => e.TdsexemptReasonId).HasColumnName("TDSExemptReasonID");
            entity.Property(e => e.TdsledgerCode)
                .HasMaxLength(50)
                .HasColumnName("TDSLedgerCode");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType)
                .HasDefaultValue(0)
                .HasComment("1- Standard, 2 - Concessional")
                .HasColumnName("TDSRateType");
            entity.Property(e => e.TdstotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSTotalAmount");
            entity.Property(e => e.TokanNo).HasMaxLength(100);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransactionTypeId)
                .HasDefaultValue(0)
                .HasComment("Primary Table - INV_TransactionType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VendorCategoryId)
                .HasComment("1 Agency, 2  Reimbursement, 3 Admin")
                .HasColumnName("VendorCategoryID");
            entity.Property(e => e.VendorCode).HasMaxLength(50);
            entity.Property(e => e.VendorGstntype).HasColumnName("VendorGSTNType");
            entity.Property(e => e.VendorId)
                .HasDefaultValue(0)
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorName).HasMaxLength(100);
            entity.Property(e => e.VendorPan)
                .HasMaxLength(50)
                .HasColumnName("VendorPAN");
        });

        modelBuilder.Entity<InvInvoiceDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("INV_InvoiceDetail_shadow");

            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bjvjbnumber)
                .HasMaxLength(40)
                .HasColumnName("BJVJBNumber");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Cgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGST");
            entity.Property(e => e.CompanyCode).HasMaxLength(100);
            entity.Property(e => e.ConsigneeCode).HasMaxLength(100);
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(100)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.ConsigneeName).HasMaxLength(200);
            entity.Property(e => e.ConsigneePan)
                .HasMaxLength(100)
                .HasColumnName("ConsigneePAN");
            entity.Property(e => e.DivisionCode).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FarefNo)
                .HasMaxLength(100)
                .HasColumnName("FARefNo");
            entity.Property(e => e.Gstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTAmount");
            entity.Property(e => e.Gstno)
                .HasMaxLength(200)
                .HasColumnName("GSTNo");
            entity.Property(e => e.Gstrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTRate");
            entity.Property(e => e.Hodid).HasColumnName("HODID");
            entity.Property(e => e.Igst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST");
            entity.Property(e => e.InterestAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceCurrencyAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceCurrencyExchangeRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.InvoiceNo).HasMaxLength(200);
            entity.Property(e => e.IsBjvjbposting).HasColumnName("IsBJVJBPosting");
            entity.Property(e => e.IsBjvpaymentPosting).HasColumnName("isBJVPaymentPosting");
            entity.Property(e => e.IsNoItc).HasColumnName("IsNoITC");
            entity.Property(e => e.IsNoItcrcm).HasColumnName("IsNoITCRCM");
            entity.Property(e => e.IsRim).HasColumnName("IsRIM");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRequiredDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTerms).HasMaxLength(100);
            entity.Property(e => e.Rcmapplicable).HasColumnName("RCMApplicable");
            entity.Property(e => e.RcmgstType).HasColumnName("RCMGstType");
            entity.Property(e => e.RcmledgerCode)
                .HasMaxLength(100)
                .HasColumnName("RCMLedgerCode");
            entity.Property(e => e.Rcmrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.RcmtotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMTotalAmount");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.Sgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGST");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsapplicable).HasColumnName("TDSApplicable");
            entity.Property(e => e.TdsledgerCode)
                .HasMaxLength(100)
                .HasColumnName("TDSLedgerCode");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType).HasColumnName("TDSRateType");
            entity.Property(e => e.TdstotalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSTotalAmount");
            entity.Property(e => e.TokanNo).HasMaxLength(200);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VendorCategoryId).HasColumnName("VendorCategoryID");
            entity.Property(e => e.VendorCode).HasMaxLength(100);
            entity.Property(e => e.VendorGstntype).HasColumnName("VendorGSTNType");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
            entity.Property(e => e.VendorName).HasMaxLength(200);
            entity.Property(e => e.VendorPan)
                .HasMaxLength(100)
                .HasColumnName("VendorPAN");
        });

        modelBuilder.Entity<InvInvoiceDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceDocument");

            entity.HasIndex(e => new { e.InvoiceId, e.DocumentId, e.BDel }, "InvoiceId_DocumentId_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.DocumentId, e.BDel }, "ix_INV_InvoiceDocument_DocumentId_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocumentId).HasComment("1-Invoice Copy,2 - Email Approval, 3 Other, 10 - Vendor Payment Acknowledge Receipt");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.FilePath).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceHoldHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("INV_InvoiceHoldHistory");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<InvInvoiceItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceItem", tb =>
                {
                    tb.HasTrigger("INV_InvoiceItem_IUD");
                    tb.HasTrigger("tr_INV_InvoiceItem_Delete");
                    tb.HasTrigger("tr_INV_InvoiceItem_Insert");
                    tb.HasTrigger("tr_INV_InvoiceItem_Update");
                });

            entity.HasIndex(e => new { e.InvoiceId, e.Bdel }, "ix_INV_InvoiceItem_InvoiceID_bdel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Cgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGSTAmount");
            entity.Property(e => e.CgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_codeID");
            entity.Property(e => e.Cgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CGSTRate");
            entity.Property(e => e.ChargeCode).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsn)
                .HasMaxLength(20)
                .HasColumnName("HSN");
            entity.Property(e => e.Igstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGSTAmount");
            entity.Property(e => e.IgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("igstpar_codeID");
            entity.Property(e => e.Igstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IGSTRate");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherDeduction)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentId).HasDefaultValue(0);
            entity.Property(e => e.RcmIgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_codeID");
            entity.Property(e => e.Rcmamount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMAmount");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_codeID");
            entity.Property(e => e.RcmgstType)
                .HasDefaultValue(0)
                .HasComment("1-IGST, 2 CGST and SGST")
                .HasColumnName("RCMGstType");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_codeID");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.Sgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGSTAmount");
            entity.Property(e => e.SgstparCodeId)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_codeID");
            entity.Property(e => e.Sgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SGSTRate");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType)
                .HasDefaultValue(0)
                .HasColumnName("TDSRateType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceItemShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("INV_InvoiceItem_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Cgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGSTAmount");
            entity.Property(e => e.CgstparCodeId)
                .HasMaxLength(40)
                .HasColumnName("cgstpar_codeID");
            entity.Property(e => e.Cgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("CGSTRate");
            entity.Property(e => e.ChargeCode).HasMaxLength(40);
            entity.Property(e => e.ChargeName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsn)
                .HasMaxLength(40)
                .HasColumnName("HSN");
            entity.Property(e => e.Igstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGSTAmount");
            entity.Property(e => e.IgstparCodeId)
                .HasMaxLength(40)
                .HasColumnName("igstpar_codeID");
            entity.Property(e => e.Igstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IGSTRate");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.OtherDeduction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RcmIgstparCodeId)
                .HasMaxLength(40)
                .HasColumnName("rcmIGStpar_codeID");
            entity.Property(e => e.Rcmamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMAmount");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCodeId)
                .HasMaxLength(40)
                .HasColumnName("rcmcgstpar_codeID");
            entity.Property(e => e.RcmgstType).HasColumnName("RCMGstType");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RCMRate");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCodeId)
                .HasMaxLength(40)
                .HasColumnName("rcmsgstpar_codeID");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.Sgstamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGSTAmount");
            entity.Property(e => e.SgstparCodeId)
                .HasMaxLength(40)
                .HasColumnName("sgstpar_codeID");
            entity.Property(e => e.Sgstrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SGSTRate");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TdsrateType).HasColumnName("TDSRateType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceMemo>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceMemo", tb =>
                {
                    tb.HasTrigger("tr_INV_InvoiceMemo_Delete");
                    tb.HasTrigger("tr_INV_InvoiceMemo_Insert");
                    tb.HasTrigger("tr_INV_InvoiceMemo_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BankCharges)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Bank_Charges");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BranchId).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExchangeGainLoss)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Exchange_Gain_Loss");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.FilePath).HasMaxLength(200);
            entity.Property(e => e.FinYearId).HasDefaultValue(10);
            entity.Property(e => e.InvoiceMemoRefNo).HasMaxLength(50);
            entity.Property(e => e.IsApipayment)
                .HasDefaultValue(true)
                .HasColumnName("IsAPIPayment");
            entity.Property(e => e.IsPaymentPosted).HasDefaultValue(false);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MemoAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MemoAuditDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.TotalRequest).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.Utrdate)
                .HasColumnType("datetime")
                .HasColumnName("UTRDate");
            entity.Property(e => e.Utrno)
                .HasMaxLength(50)
                .HasColumnName("UTRNo");
        });

        modelBuilder.Entity<InvInvoiceMemoHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceMemoHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
        });

        modelBuilder.Entity<InvInvoiceMemoShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("INV_InvoiceMemo_shadow");

            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceMemoRefNo).HasMaxLength(100);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.MemoAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MemoAuditDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceMode>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceMode");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<InvInvoicePayment>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoicePayment", tb =>
                {
                    tb.HasTrigger("tr_INV_InvoicePayment_Delete");
                    tb.HasTrigger("tr_INV_InvoicePayment_Insert");
                    tb.HasTrigger("tr_INV_InvoicePayment_Update");
                });

            entity.HasIndex(e => new { e.IsFundTransFromApi, e.RequestRefNo, e.BDel }, "IsFundTransFromAPI_RequestRefNo_bDel");

            entity.HasIndex(e => new { e.InvoiceId, e.IsPaid }, "ix_INV_InvoicePayment_InvoiceId_IsPaid_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankCode).HasMaxLength(50);
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BatchPayDate).HasColumnType("datetime");
            entity.Property(e => e.BjvpaymentFlagBy)
                .HasDefaultValue(0)
                .HasComment("0 - Pending, 1 - Live Tracking, 2 FA System")
                .HasColumnName("BJVPaymentFlagBy");
            entity.Property(e => e.BjvpaymentFlagDate)
                .HasColumnType("datetime")
                .HasColumnName("BJVPaymentFlagDate");
            entity.Property(e => e.BjvpaymentNo)
                .HasMaxLength(20)
                .HasColumnName("BJVPaymentNo");
            entity.Property(e => e.ConsolePayId).HasColumnName("ConsolePayID");
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InstrumentDate).HasColumnType("datetime");
            entity.Property(e => e.InstrumentNo).HasMaxLength(50);
            entity.Property(e => e.IsBjvpaymentFlag)
                .HasComment("Flag Status - 0 - Pending, 1 Flagged,2 Not Flagged, 3 -- Flag Checking Error, 4 Moved To Access Payment")
                .HasColumnName("IsBJVPaymentFlag");
            entity.Property(e => e.IsFundTransFromApi).HasColumnName("IsFundTransFromAPI");
            entity.Property(e => e.IsMailSent)
                .HasDefaultValue(false)
                .HasComment("Payment Confirmation Email Sent Status");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentCurrencyRate).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.RequestRefNo).HasMaxLength(50);
            entity.Property(e => e.SrNo).HasDefaultValue(1);
            entity.Property(e => e.TransactionStatus).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoicePaymentShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("INV_InvoicePayment_shadow");

            entity.Property(e => e.AccountNo).HasMaxLength(100);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankCode).HasMaxLength(100);
            entity.Property(e => e.BankName).HasMaxLength(200);
            entity.Property(e => e.BatchPayDate).HasColumnType("datetime");
            entity.Property(e => e.BjvpaymentFlagBy).HasColumnName("BJVPaymentFlagBy");
            entity.Property(e => e.BjvpaymentFlagDate)
                .HasColumnType("datetime")
                .HasColumnName("BJVPaymentFlagDate");
            entity.Property(e => e.BjvpaymentNo)
                .HasMaxLength(40)
                .HasColumnName("BJVPaymentNo");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InstrumentDate).HasColumnType("datetime");
            entity.Property(e => e.InstrumentNo).HasMaxLength(100);
            entity.Property(e => e.IsBjvpaymentFlag).HasColumnName("IsBJVPaymentFlag");
            entity.Property(e => e.IsFundTransFromApi).HasColumnName("IsFundTransFromAPI");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentCurrencyRate).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RequestRefNo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceStatusHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("INV_InvoiceStatusHistory");

            entity.HasIndex(e => new { e.InvoiceId, e.IsActive }, "ix_INV_InvoiceStatusHistory_InvoiceId_IsActive_includes");

            entity.HasIndex(e => new { e.InvoiceId, e.LStatus, e.IsFinal }, "ix_INV_InvoiceStatusHistory_InvoiceId_lStatus_IsFinal_includes").HasFillFactor(100);

            entity.HasIndex(e => e.IsActive, "ix_INV_InvoiceStatusHistory_IsActive_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.Lid, e.IsActive }, "ix_INV_InvoiceStatusHistory_lid_IsActive_includes").HasFillFactor(100);

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsFinal).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<InvInvoiceTd>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_InvoiceTDS", tb =>
                {
                    tb.HasTrigger("tr_INV_InvoiceTDS_Delete");
                    tb.HasTrigger("tr_INV_InvoiceTDS_Insert");
                    tb.HasTrigger("tr_INV_InvoiceTDS_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.TaxableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvInvoiceTdsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("INV_InvoiceTDS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.TaxableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Tdsamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TdsledgerCodeId).HasColumnName("TDSLedgerCodeId");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvReceiveDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_ReceiveDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.SenderId).HasColumnName("SenderID");
            entity.Property(e => e.SentDate).HasColumnType("datetime");
            entity.Property(e => e.TokanId).HasColumnName("TokanID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<InvStampDutyM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_StampDutyMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.PortId).HasColumnName("PortID");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RatePercent).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.TransModeId).HasComment("1 - Air, 2 Sea");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvStampDutyRate>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_INV_StampDutyRate_1202");

            entity.ToTable("INV_StampDutyRate");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdminCharges).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AdminFeesApplicable).HasMaxLength(255);
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.CustCode).HasMaxLength(50);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FixRate).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.TransModeId).HasColumnName("TransModeID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_StatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<InvTdsexemptM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_TDSExemptMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<InvTransactionType>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_TransactionType");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasComment("FA Ledger Code")
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<InvVendorBuyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("INV_VendorBuyDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.CustomerBuyValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CustomerSellValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorBuyValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VendorSellValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<KpiEmpParticular>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_Kyc_EmpParticular");

            entity.ToTable("KPI_EmpParticular", tb =>
                {
                    tb.HasTrigger("tr_KPI_EmpParticular_Delete");
                    tb.HasTrigger("tr_KPI_EmpParticular_Insert");
                    tb.HasTrigger("tr_KPI_EmpParticular_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Kpiid).HasColumnName("KPIID");
            entity.Property(e => e.Kpiparticular)
                .HasMaxLength(400)
                .HasColumnName("KPIParticular");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KpiEmpParticularShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("KPI_EmpParticular_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Kpiid).HasColumnName("KPIID");
            entity.Property(e => e.Kpiparticular)
                .HasMaxLength(800)
                .HasColumnName("KPIParticular");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KpiEmpTarget>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KPI_EmpTarget", tb =>
                {
                    tb.HasTrigger("tr_KPI_EmpTarget_Delete");
                    tb.HasTrigger("tr_KPI_EmpTarget_Insert");
                    tb.HasTrigger("tr_KPI_EmpTarget_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApproveRemark).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmpCode).HasMaxLength(50);
            entity.Property(e => e.EmpEmail).HasMaxLength(100);
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.EmpName).HasMaxLength(100);
            entity.Property(e => e.EmpRemark).HasMaxLength(200);
            entity.Property(e => e.Hodid).HasColumnName("HODID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReviewDate).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KpiEmpTargetShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("KPI_EmpTarget_shadow");

            entity.Property(e => e.ApproveRemark).HasMaxLength(400);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmpCode).HasMaxLength(100);
            entity.Property(e => e.EmpEmail).HasMaxLength(200);
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.EmpName).HasMaxLength(200);
            entity.Property(e => e.EmpRemark).HasMaxLength(400);
            entity.Property(e => e.Hodid).HasColumnName("HODID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ReviewDate).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KpiKpidetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KPI_KPIDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Kpiachieved)
                .HasMaxLength(50)
                .HasColumnName("KPIAchieved");
            entity.Property(e => e.Kpidate)
                .HasColumnType("datetime")
                .HasColumnName("KPIDate");
            entity.Property(e => e.Kpiid).HasColumnName("KPIID");
            entity.Property(e => e.Kpimonth)
                .HasMaxLength(50)
                .HasColumnName("KPIMonth");
            entity.Property(e => e.KpiparentId).HasColumnName("KPIParentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(100);
        });

        modelBuilder.Entity<KpiKpim>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KPI_KPIMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<KpiParameterM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KPI_ParameterMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<KpiSkillDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KPI_SkillDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(400)
                .HasColumnName("sName");
            entity.Property(e => e.SkillId).HasColumnName("SkillID");
        });

        modelBuilder.Entity<KpiSkillM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KPI_SkillMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<KpimCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KPIM_Category");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.ParentId).HasColumnName("Parent_Id");
            entity.Property(e => e.Sname)
                .HasMaxLength(100)
                .HasColumnName("SName");
        });

        modelBuilder.Entity<KpimCategoryItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KPIM_CategoryItem");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DaDate)
                .HasColumnType("datetime")
                .HasColumnName("daDate");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.Sname).HasMaxLength(50);
        });

        modelBuilder.Entity<KpimOperator>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KPIM_Operator");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.Sname).HasMaxLength(50);
        });

        modelBuilder.Entity<KpimTemplateDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KPIM_TemplateDetail");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Kpi)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("KPI%");
            entity.Property(e => e.Kpiid).HasColumnName("KPIId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.PerformanceIncentive).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Target).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UpdDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<KpimTemplateM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KPIM_TemplateMs");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.KpiName)
                .HasMaxLength(50)
                .HasColumnName("KPI_Name");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<KtCircularDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KT_CircularDocs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(550);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<KtCircularMail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KT_CircularMail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CircularNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComputedColumnSql("('CM'+right('0000'+CONVERT([varchar](5),[Lid],(0)),(5)))", true);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MailSentDate).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KtUserM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KT_UserMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.IsValid).HasDefaultValue(true);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SEmail)
                .HasMaxLength(50)
                .HasColumnName("sEmail");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<KycCompanyCategory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_CompanyCategory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CatagoryId).HasColumnName("CatagoryID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Iuser).HasColumnName("IUser");
        });

        modelBuilder.Entity<KycConstitutionM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_ConstitutionMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<KycContactDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_ContactDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.LType)
                .HasComment("1 => Operation, 2 => Finance, 3 => Others")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LandlineNo).HasMaxLength(50);
            entity.Property(e => e.MobileNo).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KycCustomerReg>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_CustomerReg");

            entity.Property(e => e.Lid).HasColumnName("LId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.BillingAddressDel)
                .HasMaxLength(400)
                .HasColumnName("BillingAddress_del");
            entity.Property(e => e.BillingCityDel)
                .HasMaxLength(100)
                .HasColumnName("BillingCity_del");
            entity.Property(e => e.BinNo).HasMaxLength(50);
            entity.Property(e => e.BranchNameDel)
                .HasMaxLength(100)
                .HasColumnName("BranchName_del");
            entity.Property(e => e.ChecklistApprovalRequired).HasDefaultValue(false);
            entity.Property(e => e.ConsigneeName).HasMaxLength(200);
            entity.Property(e => e.ContactNumberDel)
                .HasMaxLength(50)
                .HasColumnName("ContactNumber_del");
            entity.Property(e => e.ContactPersonEmailIdDel)
                .HasMaxLength(400)
                .HasColumnName("ContactPersonEmailID_del");
            entity.Property(e => e.ContactPersonMobileDel)
                .HasMaxLength(20)
                .HasColumnName("ContactPersonMobile_del");
            entity.Property(e => e.ContactPersonNameDel)
                .HasMaxLength(200)
                .HasColumnName("ContactPersonName_del");
            entity.Property(e => e.CorporateAddress1).HasMaxLength(400);
            entity.Property(e => e.CorporateAddress2).HasMaxLength(400);
            entity.Property(e => e.CorporateContactPerson).HasMaxLength(100);
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailId).HasMaxLength(400);
            entity.Property(e => e.Ieccode)
                .HasMaxLength(50)
                .HasColumnName("IECCode");
            entity.Property(e => e.MobileNumberDel)
                .HasMaxLength(50)
                .HasColumnName("MobileNumber_del");
            entity.Property(e => e.Pcdrequired)
                .HasDefaultValue(false)
                .HasColumnName("PCDRequired");
            entity.Property(e => e.PinCodeDel)
                .HasMaxLength(50)
                .HasColumnName("PinCode_del");
            entity.Property(e => e.PlantNameDel)
                .HasMaxLength(100)
                .HasColumnName("PlantName_del");
            entity.Property(e => e.PostClearanceDocDispatchAddressDel)
                .HasMaxLength(400)
                .HasColumnName("PostClearanceDocDispatchAddress_del");
            entity.Property(e => e.PostClearanceDocumentDispatchCityDel)
                .HasMaxLength(200)
                .HasColumnName("PostClearanceDocumentDispatchCity_del");
            entity.Property(e => e.ReferedBy)
                .HasMaxLength(100)
                .HasColumnName("ReferedBY");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.Svbapplicable)
                .HasDefaultValue(false)
                .HasColumnName("SVBApplicable");
            entity.Property(e => e.TransporationbyBabaji).HasDefaultValue(false);
            entity.Property(e => e.UniqId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComputedColumnSql("(right('0000'+CONVERT([varchar](5),[LId],(0)),(5)))", false)
                .HasColumnName("UniqID");
        });

        modelBuilder.Entity<KycGstMaterialDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_GstMaterialDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CommodityName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsncode)
                .HasMaxLength(50)
                .HasColumnName("HSNCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MaterialSupplied).HasMaxLength(250);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KycGstServiceDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_GstServiceDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Saccode)
                .HasMaxLength(50)
                .HasColumnName("SACCode");
            entity.Property(e => e.ServiceCatg).HasMaxLength(150);
            entity.Property(e => e.ServiceProvided).HasMaxLength(250);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KycGstcopyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_GSTCopyDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocName).HasMaxLength(50);
            entity.Property(e => e.DocPath).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GstdetailId).HasColumnName("GSTDetailId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<KycGstdetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_GSTDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(350);
            entity.Property(e => e.Arnno)
                .HasMaxLength(50)
                .HasColumnName("ARNNo");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.GstprovisionNo)
                .HasMaxLength(50)
                .HasColumnName("GSTProvisionNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MobileNo).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.PersonName).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<KycGstmaterial>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_GSTMaterial");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CommodityName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsncode)
                .HasMaxLength(100)
                .HasColumnName("HSNCode");
            entity.Property(e => e.Iuser).HasColumnName("IUser");
            entity.Property(e => e.MaterialSupplied).HasMaxLength(200);
        });

        modelBuilder.Entity<KycGstservicess>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_GSTServicess");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Saccode)
                .HasMaxLength(200)
                .HasColumnName("SACCode");
            entity.Property(e => e.ServiceCategory).HasMaxLength(200);
            entity.Property(e => e.ServiceProvided).HasMaxLength(200);
        });

        modelBuilder.Entity<KycKycGstDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_KycGstDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FuUplodeDel).HasColumnName("FuUplode_del");
            entity.Property(e => e.GstProvistionId)
                .HasMaxLength(50)
                .HasColumnName("GstProvistionID");
            entity.Property(e => e.GstaddressId).HasColumnName("GSTAddressID");
            entity.Property(e => e.GstnArnNo)
                .HasMaxLength(50)
                .HasColumnName("GstnArnNO");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NameOfCompanies).HasMaxLength(100);
            entity.Property(e => e.PersonEmailId)
                .HasMaxLength(400)
                .HasColumnName("PersonEmailID");
            entity.Property(e => e.PersonName).HasMaxLength(200);
            entity.Property(e => e.PersonNo).HasMaxLength(20);
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<KycNatureofBusinessM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_NatureofBusinessMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<KycSo>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_SOS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(0)
                .HasColumnName("bDel");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Details).HasMaxLength(400);
            entity.Property(e => e.Dtdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.Luser).HasColumnName("LUser");
            entity.Property(e => e.Particular).HasMaxLength(200);
        });

        modelBuilder.Entity<KycVendorDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_VendorDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.Address1).HasMaxLength(350);
            entity.Property(e => e.Address2).HasMaxLength(350);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(33);
            entity.Property(e => e.BillingAddress).HasMaxLength(450);
            entity.Property(e => e.BillingCity).HasMaxLength(50);
            entity.Property(e => e.BillingEmail).HasMaxLength(50);
            entity.Property(e => e.BillingName).HasMaxLength(150);
            entity.Property(e => e.BillingPhoneNo).HasMaxLength(50);
            entity.Property(e => e.BillingPincode).HasMaxLength(10);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CompanyName).HasMaxLength(150);
            entity.Property(e => e.Cstno)
                .HasMaxLength(11)
                .HasColumnName("CSTNo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.ExciseNo).HasMaxLength(15);
            entity.Property(e => e.FaxNo).HasMaxLength(30);
            entity.Property(e => e.Ieccode)
                .HasMaxLength(10)
                .HasColumnName("IECCode");
            entity.Property(e => e.IeccopyPath)
                .HasMaxLength(150)
                .HasColumnName("IECCopyPath");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(11)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.IpAddress).HasMaxLength(50);
            entity.Property(e => e.KyccopyPath)
                .HasMaxLength(150)
                .HasColumnName("KYCCopyPath");
            entity.Property(e => e.KycscannedCopyPath)
                .HasMaxLength(150)
                .HasColumnName("KYCScannedCopyPath");
            entity.Property(e => e.LType)
                .HasDefaultValue(1)
                .HasComment("0 => Vendor, 1 => Customer, 2 => Overseas customer")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Micrcode)
                .HasMaxLength(9)
                .HasColumnName("MICRCode");
            entity.Property(e => e.OtherCopyPath).HasMaxLength(150);
            entity.Property(e => e.PancopyPath)
                .HasMaxLength(150)
                .HasColumnName("PANCopyPath");
            entity.Property(e => e.Panno)
                .HasMaxLength(25)
                .HasColumnName("PANNo");
            entity.Property(e => e.PaymentTerms).HasMaxLength(50);
            entity.Property(e => e.Pincode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RejectedRemark).HasMaxLength(250);
            entity.Property(e => e.ServiceTaxNo).HasMaxLength(15);
            entity.Property(e => e.Ssino)
                .HasMaxLength(11)
                .HasColumnName("SSINo");
            entity.Property(e => e.Tanno)
                .HasMaxLength(10)
                .HasColumnName("TANNo");
            entity.Property(e => e.TelephoneNo).HasMaxLength(20);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.Vatno)
                .HasMaxLength(13)
                .HasColumnName("VATNo");
            entity.Property(e => e.WebsiteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<KycVendorStatusHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("KYC_VendorStatusHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsApproved).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(250);
        });

        modelBuilder.Entity<LocDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("LocDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.BjvbookCode)
                .HasMaxLength(20)
                .HasColumnName("BJVBookCode");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LDate).HasColumnName("lDate");
            entity.Property(e => e.LIndexId).HasColumnName("lIndexId");
            entity.Property(e => e.LLevelId).HasColumnName("lLevelId");
            entity.Property(e => e.LPrevId).HasColumnName("lPrevId");
            entity.Property(e => e.LTypId).HasColumnName("lTypId");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.LVersion)
                .HasDefaultValue(0)
                .HasColumnName("lVersion");
            entity.Property(e => e.SCode)
                .HasMaxLength(400)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(400)
                .HasColumnName("sName");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(400)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<LocMaster>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_WAM0201");

            entity.ToTable("LocMaster");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDefault).HasColumnName("bDefault");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LDate).HasColumnName("lDate");
            entity.Property(e => e.LIndexId).HasColumnName("lIndexId");
            entity.Property(e => e.LPrevId).HasColumnName("lPrevId");
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.LVersion)
                .HasDefaultValue(0)
                .HasColumnName("lVersion");
            entity.Property(e => e.SCode)
                .HasMaxLength(25)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .HasColumnName("sRemarks");
        });

        modelBuilder.Entity<LocSubdivisionCode>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("LOC_SubdivisionCodes");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.CountryCode).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SCode)
                .HasMaxLength(100)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SType)
                .HasMaxLength(100)
                .HasColumnName("sType");
        });

        modelBuilder.Entity<LocSubdivisionCodes1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOC_SubdivisionCodes_1");

            entity.Property(e => e.Change).HasMaxLength(100);
            entity.Property(e => e.Coordinates).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.Date).HasMaxLength(50);
            entity.Property(e => e.Function).HasMaxLength(100);
            entity.Property(e => e.Iata)
                .HasMaxLength(100)
                .HasColumnName("IATA");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.NameWoDiacritics).HasMaxLength(100);
            entity.Property(e => e.Remarks).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(100);
            entity.Property(e => e.Subdivision).HasMaxLength(100);
        });

        modelBuilder.Entity<LocSubdivisionCodes2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOC_SubdivisionCodes_2");

            entity.Property(e => e.Change).HasMaxLength(50);
            entity.Property(e => e.Coordinates).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.Date).HasMaxLength(100);
            entity.Property(e => e.Function).HasMaxLength(100);
            entity.Property(e => e.Iata)
                .HasMaxLength(100)
                .HasColumnName("IATA");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.NameWoDiacritics).HasMaxLength(100);
            entity.Property(e => e.Remarks).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(100);
            entity.Property(e => e.Subdivision).HasMaxLength(100);
        });

        modelBuilder.Entity<LocSubdivisionCodes3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOC_SubdivisionCodes_3");

            entity.Property(e => e.Change).HasMaxLength(100);
            entity.Property(e => e.Coordinates).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.Function).HasMaxLength(100);
            entity.Property(e => e.Iata)
                .HasMaxLength(100)
                .HasColumnName("IATA");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.NameWoDiacritics).HasMaxLength(100);
            entity.Property(e => e.Remarks).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(100);
            entity.Property(e => e.Subdivision).HasMaxLength(100);
        });

        modelBuilder.Entity<LocSubdivisionCodes4>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LOC_SubdivisionCodes_4");

            entity.Property(e => e.Change).HasMaxLength(100);
            entity.Property(e => e.Coordinates).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.Date)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Function).HasMaxLength(100);
            entity.Property(e => e.Iata)
                .HasMaxLength(10)
                .HasColumnName("IATA");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.NameWoDiacritics).HasMaxLength(100);
            entity.Property(e => e.Remarks).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(100);
            entity.Property(e => e.Subdivision).HasMaxLength(100);
        });

        modelBuilder.Entity<LtCbInvDet>(entity =>
        {
            entity.HasKey(e => e.Invdetid).HasName("PK__LT_CB_In__53659BD3FFBADD41");

            entity.ToTable("LT_CB_InvDet");

            entity.Property(e => e.Invdetid).HasColumnName("invdetid");
            entity.Property(e => e.DdlParticular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ddl_particular");
            entity.Property(e => e.Invmstid).HasColumnName("invmstid");
            entity.Property(e => e.LineSeq).HasColumnName("line_seq");
            entity.Property(e => e.TxtAmt).HasColumnName("txt_Amt");
            entity.Property(e => e.TxtChargecode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("txt_chargecode");
            entity.Property(e => e.TxtQty).HasColumnName("txt_Qty");
            entity.Property(e => e.TxtRate).HasColumnName("txt_Rate");
        });

        modelBuilder.Entity<LtCbInvMst>(entity =>
        {
            entity.HasKey(e => e.Invmstid).HasName("PK__LT_CB_In__04C9D1776832E73E");

            entity.ToTable("LT_CB_InvMst");

            entity.Property(e => e.Invmstid).HasColumnName("invmstid");
            entity.Property(e => e.DdlConsignname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ddl_consignname");
            entity.Property(e => e.DraftBookCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DraftBook_Code");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Pssdrfdate)
                .HasColumnType("datetime")
                .HasColumnName("PSSDRFDATE");
            entity.Property(e => e.Pssdrfno)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PSSDRFNO");
            entity.Property(e => e.Pssremarks)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSSREMARKS");
            entity.Property(e => e.Pssstatus).HasColumnName("PSSSTATUS");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TxtInvoiceNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt_InvoiceNo");
            entity.Property(e => e.TxtJobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt_Jobno");
        });

        modelBuilder.Entity<LtTsInvDet>(entity =>
        {
            entity.HasKey(e => e.Invdetid).HasName("PK__LT_TS_In__53659BD3B5408187");

            entity.ToTable("LT_TS_InvDet");

            entity.Property(e => e.Invdetid).HasColumnName("invdetid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.DdlParticular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ddl_particular");
            entity.Property(e => e.DestFrom)
                .HasMaxLength(100)
                .HasColumnName("Dest_From");
            entity.Property(e => e.DestTo)
                .HasMaxLength(100)
                .HasColumnName("Dest_To");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Invmstid).HasColumnName("invmstid");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LineSeq).HasColumnName("line_seq");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.TxtAmt).HasColumnName("txt_Amt");
            entity.Property(e => e.TxtChargecode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("txt_chargecode");
            entity.Property(e => e.TxtQty).HasColumnName("txt_Qty");
            entity.Property(e => e.TxtRate).HasColumnName("txt_Rate");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<LtTsInvMst>(entity =>
        {
            entity.HasKey(e => e.Invmstid).HasName("PK__LT_TS_In__04C9D1771E34E7B3");

            entity.ToTable("LT_TS_InvMst");

            entity.Property(e => e.Invmstid).HasColumnName("invmstid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DdlConsignname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ddl_consignname");
            entity.Property(e => e.DraftBookCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("TT")
                .HasColumnName("DraftBook_Code");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.InvoiceBsccpl)
                .HasMaxLength(50)
                .HasColumnName("Invoice_BSCCPL");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.Pssdrfdate)
                .HasColumnType("datetime")
                .HasColumnName("PSSDRFDATE");
            entity.Property(e => e.Pssdrfno)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("PSSDRFNO");
            entity.Property(e => e.Pssremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PSSREMARKS");
            entity.Property(e => e.Pssstatus).HasColumnName("PSSSTATUS");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TxtInvoiceNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt_InvoiceNo");
            entity.Property(e => e.TxtJobno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("txt_Jobno");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.Upduser).HasColumnName("upduser");
        });

        modelBuilder.Entity<MigAcpayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_ACPayment");

            entity.Property(e => e.Comments)
                .HasMaxLength(255)
                .HasColumnName("COMMENTS");
            entity.Property(e => e.Consignee).HasMaxLength(255);
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.InvoiceNo).HasMaxLength(255);
            entity.Property(e => e.InvoiceType)
                .HasMaxLength(255)
                .HasColumnName("Invoice Type");
            entity.Property(e => e.Jbno)
                .HasMaxLength(255)
                .HasColumnName("JBNo");
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.M1number)
                .HasMaxLength(255)
                .HasColumnName("M1Number");
            entity.Property(e => e.PaymentRequiredDate)
                .HasColumnType("datetime")
                .HasColumnName("Payment Required Date");
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .HasColumnName("REMARKS");
            entity.Property(e => e.Responsibility)
                .HasMaxLength(255)
                .HasColumnName("RESPONSIBILITY");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.TotalValue).HasColumnName("Total Value");
            entity.Property(e => e.Type).HasMaxLength(255);
            entity.Property(e => e.Type1)
                .HasMaxLength(255)
                .HasColumnName("TYPE1");
            entity.Property(e => e.Utrdate)
                .HasColumnType("datetime")
                .HasColumnName("UTRDate");
            entity.Property(e => e.Utrno)
                .HasMaxLength(255)
                .HasColumnName("UTRNo");
            entity.Property(e => e.VendorName)
                .HasMaxLength(255)
                .HasColumnName("Vendor Name");
            entity.Property(e => e.VendorPaymentTermsInDays).HasColumnName("Vendor Payment Terms In Days");
        });

        modelBuilder.Entity<MigApitransaction20241216>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_APITransaction20241216");

            entity.Property(e => e.Endtoendid)
                .HasMaxLength(255)
                .HasColumnName("ENDTOENDID");
            entity.Property(e => e.Gptranid)
                .HasMaxLength(255)
                .HasColumnName("GPTRANID");
            entity.Property(e => e.Referencetext)
                .HasMaxLength(255)
                .HasColumnName("REFERENCETEXT");
            entity.Property(e => e.Sl)
                .ValueGeneratedOnAdd()
                .HasColumnName("sl");
        });

        modelBuilder.Entity<MigApitransaction20241217>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_APITransaction20241217");

            entity.Property(e => e.PaidAmount).HasColumnName("Paid_Amount");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .HasColumnName("Reference No");
            entity.Property(e => e.UtrDate)
                .HasColumnType("datetime")
                .HasColumnName("UTR Date");
            entity.Property(e => e.UtrNo16Char)
                .HasMaxLength(255)
                .HasColumnName("UTR_No_16_Char");
            entity.Property(e => e.UtrNo22Char)
                .HasMaxLength(255)
                .HasColumnName("UTR_No_22_Char");
        });

        modelBuilder.Entity<MigAutoExpensePost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("MIG_AutoExpensePost");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.RejRemarks).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(100);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<MigAutoJobAirChennai>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MIG_AutoJobAirChennai");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigAutoJobSeaChennai>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MIG_AutoJobSeaChennai");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigAutoJobSeaExpense>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MIG_AutoJobSeaExpense");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CfsuserId)
                .HasDefaultValue(0)
                .HasColumnName("CFSUserID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigAutoSeaChennai>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK_BS_AutoSeaChennai");

            entity.ToTable("MIG_AutoSeaChennai");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BegroupId).HasColumnName("BEGroupID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportHeading).HasMaxLength(50);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigAutoSeaExpenseRule>(entity =>
        {
            entity.HasKey(e => e.UniId);

            entity.ToTable("MIG_AutoSeaExpenseRule");

            entity.Property(e => e.UniId)
                .ValueGeneratedNever()
                .HasColumnName("UniID");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.NonRms).HasColumnName("NonRMS");
            entity.Property(e => e.PortId).HasDefaultValue(5);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ReportHeading).HasMaxLength(100);
            entity.Property(e => e.Rms).HasColumnName("RMS");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigBetest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_BETest");

            entity.Property(e => e.Bedate)
                .HasColumnType("datetime")
                .HasColumnName("BEDate");
            entity.Property(e => e.Beno)
                .HasMaxLength(255)
                .HasColumnName("BENo");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BsjobNo)
                .HasMaxLength(255)
                .HasColumnName("BSJobNo");
            entity.Property(e => e.Consignee).HasMaxLength(255);
            entity.Property(e => e.DutyPaidDate)
                .HasColumnType("datetime")
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.OutOfChargeDate)
                .HasColumnType("datetime")
                .HasColumnName("Out of Charge Date");
        });

        modelBuilder.Entity<MigBillBacklog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_BillBacklog");

            entity.Property(e => e.AgBillAmt).HasColumnName("AG BILL AMT");
            entity.Property(e => e.AgBillNo)
                .HasMaxLength(255)
                .HasColumnName("AG BILL NO#");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(255)
                .HasColumnName("BS Job No");
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.DispatchDate)
                .HasColumnType("datetime")
                .HasColumnName("DISPATCH DATE");
            entity.Property(e => e.DraftedBy)
                .HasMaxLength(255)
                .HasColumnName("DRAFTED BY");
            entity.Property(e => e.DraftedOn)
                .HasColumnType("datetime")
                .HasColumnName("DRAFTED ON ");
            entity.Property(e => e.FinalBillDate)
                .HasColumnType("datetime")
                .HasColumnName("FINAL BILL DATE");
            entity.Property(e => e.FinalTypedBy)
                .HasMaxLength(255)
                .HasColumnName("FINAL TYPED BY ");
            entity.Property(e => e.FinalTypedOn)
                .HasColumnType("datetime")
                .HasColumnName("FINAL TYPED ON ");
            entity.Property(e => e.RimBillAmt).HasColumnName("RIM BILL AMT");
            entity.Property(e => e.RimBillNo)
                .HasMaxLength(255)
                .HasColumnName("RIM BILL NO#");
            entity.Property(e => e.Stage).HasMaxLength(255);
        });

        modelBuilder.Entity<MigBillingCourier>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_BillingCourier");

            entity.Property(e => e.BillingUserName).HasMaxLength(255);
            entity.Property(e => e.CourierName).HasMaxLength(255);
            entity.Property(e => e.CoveringLetterNo).HasMaxLength(255);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.Podno).HasColumnName("PODNo");
        });

        modelBuilder.Entity<MigBillingHandDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_BillingHandDelivery");

            entity.Property(e => e.BillingUserName)
                .HasMaxLength(255)
                .HasColumnName("Billing User Name");
            entity.Property(e => e.CourierName)
                .HasMaxLength(255)
                .HasColumnName("Courier Name");
            entity.Property(e => e.CoveringLetterNo)
                .HasMaxLength(255)
                .HasColumnName("Covering Letter No");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("Customer Name");
            entity.Property(e => e.DispatchDate)
                .HasColumnType("datetime")
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasColumnName("File Name");
            entity.Property(e => e.PodNo)
                .HasMaxLength(255)
                .HasColumnName("POD No");
        });

        modelBuilder.Entity<MigBjvPostTran>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MIG_BJV_PostTrans");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(255);
            entity.Property(e => e.Jbno)
                .HasMaxLength(255)
                .HasColumnName("JBNo");
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.NewJbNo).HasMaxLength(50);
            entity.Property(e => e.Transporter).HasMaxLength(255);
        });

        modelBuilder.Entity<MigBsAutoJobAirKolk>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MIG_BS_AutoJobAirKolk");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigBsAutoJobSeaKolk>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MIG_BS_AutoJobSeaKolk");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseFor).HasComment("1 For Customer 2 For Warehouse");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigChennai>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_Chennai");

            entity.Property(e => e.Boedate)
                .HasColumnType("datetime")
                .HasColumnName("BOEDate");
            entity.Property(e => e.Boeno)
                .HasMaxLength(50)
                .HasColumnName("BOENo");
            entity.Property(e => e.BsjobNo)
                .HasMaxLength(255)
                .HasColumnName("BSJobNo");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("Customer Name");
            entity.Property(e => e.PortName).HasMaxLength(255);
        });

        modelBuilder.Entity<MigContainerMove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_ContainerMove");

            entity.Property(e => e.BillItemDescription)
                .HasMaxLength(255)
                .HasColumnName("BILL_ITEM_DESCRIPTION");
            entity.Property(e => e.BlNo)
                .HasMaxLength(255)
                .HasColumnName("BL_NO");
            entity.Property(e => e.ChaName)
                .HasMaxLength(255)
                .HasColumnName("CHA_NAME");
            entity.Property(e => e.ContNo)
                .HasMaxLength(255)
                .HasColumnName("CONT_NO");
            entity.Property(e => e.ContSize)
                .HasMaxLength(255)
                .HasColumnName("CONT_SIZE");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(255)
                .HasColumnName("IGM_NO");
            entity.Property(e => e.ImporterName)
                .HasMaxLength(255)
                .HasColumnName("IMPORTER_NAME");
            entity.Property(e => e.ItemNo)
                .HasMaxLength(255)
                .HasColumnName("ITEM_NO");
            entity.Property(e => e.LineName)
                .HasMaxLength(255)
                .HasColumnName("LINE_NAME");
            entity.Property(e => e.Payable).HasColumnName("PAYABLE");
            entity.Property(e => e.SrNo).HasColumnName("Sr#No");
        });

        modelBuilder.Entity<MigCountry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_Country");

            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("Country ");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(255)
                .HasColumnName("Country code");
            entity.Property(e => e.InternationalDialing).HasColumnName("International dialing");
        });

        modelBuilder.Entity<MigCurrentJobFa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_CurrentJobFA");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Ccm)
                .HasMaxLength(255)
                .HasColumnName("ccm");
            entity.Property(e => e.Clrdate)
                .HasColumnType("datetime")
                .HasColumnName("clrdate");
            entity.Property(e => e.DivCode)
                .HasMaxLength(255)
                .HasColumnName("div_code");
            entity.Property(e => e.Fsb)
                .HasMaxLength(255)
                .HasColumnName("fsb");
            entity.Property(e => e.Hod)
                .HasMaxLength(255)
                .HasColumnName("hod");
            entity.Property(e => e.Kam)
                .HasMaxLength(255)
                .HasColumnName("kam");
            entity.Property(e => e.LocnCode)
                .HasMaxLength(255)
                .HasColumnName("locn_code");
            entity.Property(e => e.Odate)
                .HasColumnType("datetime")
                .HasColumnName("odate");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("par_code");
            entity.Property(e => e.ParName)
                .HasMaxLength(255)
                .HasColumnName("par_name");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("ref");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .HasColumnName("remarks");
            entity.Property(e => e.Vessal)
                .HasMaxLength(255)
                .HasColumnName("vessal");
            entity.Property(e => e.Yref).HasColumnName("yref");
        });

        modelBuilder.Entity<MigCustomerPlant>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_CustomerPlant");

            entity.Property(e => e.CustCode).HasMaxLength(255);
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.Division).HasMaxLength(255);
            entity.Property(e => e.LiveMatch).HasMaxLength(255);
            entity.Property(e => e.Plant).HasMaxLength(255);
            entity.Property(e => e.PlantCode).HasMaxLength(255);
        });

        modelBuilder.Entity<MigCustomerSector>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_CustomerSector");

            entity.Property(e => e.Code).HasMaxLength(255);
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.Sector).HasMaxLength(255);
        });

        modelBuilder.Entity<MigDispatch0201>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_Dispatch_0201");

            entity.Property(e => e.CourierName)
                .HasMaxLength(255)
                .HasColumnName("COURIER_NAME");
            entity.Property(e => e.CoverNote).HasMaxLength(255);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.DeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("Delivery_Date");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PersonName)
                .HasMaxLength(255)
                .HasColumnName("Person_Name");
            entity.Property(e => e.PodDt)
                .HasColumnType("datetime")
                .HasColumnName("POD_DT");
            entity.Property(e => e.PodNo)
                .HasMaxLength(255)
                .HasColumnName("POD_NO");
            entity.Property(e => e.UpdateId).HasColumnName("UpdateID");
            entity.Property(e => e.Upload)
                .HasMaxLength(255)
                .HasColumnName("UPLOAD");
        });

        modelBuilder.Entity<MigDispatch1307>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_Dispatch_1307");

            entity.Property(e => e.CourierName)
                .HasMaxLength(255)
                .HasColumnName("COURIER_NAME");
            entity.Property(e => e.CoverNote).HasMaxLength(255);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.DeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("Delivery_Date");
            entity.Property(e => e.PersonName)
                .HasMaxLength(255)
                .HasColumnName("Person_Name");
            entity.Property(e => e.PodDt)
                .HasColumnType("datetime")
                .HasColumnName("POD_DT");
            entity.Property(e => e.PodNo)
                .HasMaxLength(255)
                .HasColumnName("POD_NO");
            entity.Property(e => e.UpdateId).HasColumnName("UpdateID");
        });

        modelBuilder.Entity<MigDynamicDrill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_DynamicDrill");

            entity.Property(e => e.AdCode)
                .HasMaxLength(255)
                .HasColumnName("AD Code");
            entity.Property(e => e.AmountInrBn).HasColumnName("AMOUNT_INR_BN");
            entity.Property(e => e.BillAmountInr)
                .HasMaxLength(255)
                .HasColumnName("Bill Amount INR");
            entity.Property(e => e.BoeDate)
                .HasColumnType("datetime")
                .HasColumnName("BOE_Date");
            entity.Property(e => e.BoeNumber)
                .HasMaxLength(255)
                .HasColumnName("BOE_Number");
            entity.Property(e => e.Filters).HasMaxLength(255);
            entity.Property(e => e.ImportAgency)
                .HasMaxLength(255)
                .HasColumnName("Import Agency");
            entity.Property(e => e.IsSuccess).HasColumnName("isSuccess");
            entity.Property(e => e.JobNo).HasMaxLength(50);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.MasterStatus)
                .HasMaxLength(255)
                .HasColumnName("Master Status");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(255)
                .HasColumnName("Port_Of_Discharge");
            entity.Property(e => e.SettledBillAmountInr)
                .HasMaxLength(255)
                .HasColumnName("Settled Bill Amount INR");
            entity.Property(e => e.ShippingPort)
                .HasMaxLength(255)
                .HasColumnName("Shipping Port");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.UnSettledBillAmountInr).HasColumnName("UnSettled Bill Amount INR");
        });

        modelBuilder.Entity<MigEbill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_EBIll");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillNo)
                .HasMaxLength(255)
                .HasColumnName("BillNO");
            entity.Property(e => e.F10).HasMaxLength(255);
            entity.Property(e => e.F11).HasMaxLength(255);
            entity.Property(e => e.F8).HasMaxLength(255);
            entity.Property(e => e.F9).HasMaxLength(255);
            entity.Property(e => e.JobNo)
                .HasMaxLength(255)
                .HasColumnName("JobNO");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.MailToClient).HasColumnType("datetime");
            entity.Property(e => e.PartyName).HasMaxLength(255);
        });

        modelBuilder.Entity<MigEmployeeHr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_EmployeeHR");

            entity.Property(e => e.BranchCode).HasMaxLength(255);
            entity.Property(e => e.DepartmentCode).HasMaxLength(255);
            entity.Property(e => e.Designation).HasMaxLength(255);
            entity.Property(e => e.EmpCode).HasMaxLength(255);
            entity.Property(e => e.EmployeeName).HasMaxLength(255);
            entity.Property(e => e.Segments).HasMaxLength(255);
            entity.Property(e => e.ShortName).HasMaxLength(255);
            entity.Property(e => e.SubLocation).HasMaxLength(255);
        });

        modelBuilder.Entity<MigEway>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MIG_EWAY");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(false)
                .HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IgstLevyRate).HasColumnName("IGST_LEVY_RATE");
            entity.Property(e => e.IgstLevyTotalAmt)
                .HasMaxLength(50)
                .HasColumnName("IGST_LEVY_TOTAL_AMT");
            entity.Property(e => e.InvoiceCurrencyCode)
                .HasMaxLength(255)
                .HasColumnName("Invoice Currency Code");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(255)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(255)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.ItemAssessableValue)
                .HasMaxLength(50)
                .HasColumnName("ITEM_ASSESSABLE_VALUE");
            entity.Property(e => e.ItemBcdAmount).HasColumnName("ITEM_BCD_AMOUNT");
            entity.Property(e => e.ItemBcdRate).HasColumnName("ITEM_BCD_RATE");
            entity.Property(e => e.ItemCetNo)
                .HasMaxLength(50)
                .HasColumnName("Item Cet No");
            entity.Property(e => e.ItemPrice)
                .HasMaxLength(50)
                .HasColumnName("Item Price");
            entity.Property(e => e.ItemQuantity)
                .HasMaxLength(50)
                .HasColumnName("Item Quantity");
            entity.Property(e => e.ItemSocialWelfareAmt).HasColumnName("ITEM_SOCIAL_WELFARE_AMT");
            entity.Property(e => e.ItemSocialWelfareRate).HasColumnName("ITEM_SOCIAL_WELFARE_RATE");
            entity.Property(e => e.ItemUom)
                .HasMaxLength(255)
                .HasColumnName("Item UOM");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.ProductDescription)
                .HasMaxLength(555)
                .HasColumnName("Product Description");
            entity.Property(e => e.Sno).HasColumnName("SNO");
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(255)
                .HasColumnName("Terms Of Invoice");
        });

        modelBuilder.Entity<MigExAutoJobSeaExpense>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MIG_EX_AutoJobSeaExpense");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransportBy).HasComment("1 For Babaji 2 For Customer");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigFabankDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_FABankDetail");

            entity.Property(e => e.BBalance).HasColumnName("B_BALANCE");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(255)
                .HasColumnName("Bank Account no");
            entity.Property(e => e.BankIfsc)
                .HasMaxLength(255)
                .HasColumnName("Bank IFSC");
            entity.Property(e => e.BankMicr)
                .HasMaxLength(255)
                .HasColumnName("Bank MICR");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasColumnName("Bank Name");
            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .HasColumnName("CATEGORY");
            entity.Property(e => e.Ccm)
                .HasMaxLength(255)
                .HasColumnName("CCM");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName("CITY");
            entity.Property(e => e.Crdays)
                .HasMaxLength(255)
                .HasColumnName("CRDAYS");
            entity.Property(e => e.Gstin)
                .HasMaxLength(255)
                .HasColumnName("GSTIN");
            entity.Property(e => e.Hod)
                .HasMaxLength(255)
                .HasColumnName("HOD");
            entity.Property(e => e.Kam)
                .HasMaxLength(255)
                .HasColumnName("KAM");
            entity.Property(e => e.Ledgcode).HasColumnName("LEDGCODE");
            entity.Property(e => e.Malias)
                .HasMaxLength(255)
                .HasColumnName("MALIAS");
            entity.Property(e => e.MparCode)
                .HasMaxLength(255)
                .HasColumnName("MPAR_CODE");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("PAR_CODE");
            entity.Property(e => e.ParName)
                .HasMaxLength(255)
                .HasColumnName("PAR_NAME");
        });

        modelBuilder.Entity<MigFacustomerCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_FACustomerCode");

            entity.Property(e => e.BParName)
                .HasMaxLength(255)
                .HasColumnName("B_PAR_NAME");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("PAR_CODE");
        });

        modelBuilder.Entity<MigFacustomerCode2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_FACustomerCode2");

            entity.Property(e => e.Code).HasMaxLength(255);
            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .HasColumnName("Company Name");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .HasColumnName("Customer Name");
        });

        modelBuilder.Entity<MigFajob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_FAJob");

            entity.Property(e => e.Bjvno)
                .HasMaxLength(255)
                .HasColumnName("BJVNO");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(255)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.Draftby)
                .HasMaxLength(255)
                .HasColumnName("DRAFTBY");
            entity.Property(e => e.Draftdate)
                .HasColumnType("datetime")
                .HasColumnName("DRAFTDATE");
            entity.Property(e => e.Drfcompby)
                .HasMaxLength(255)
                .HasColumnName("DRFCOMPBY");
            entity.Property(e => e.Drfcompdate)
                .HasColumnType("datetime")
                .HasColumnName("DRFCOMPDATE");
            entity.Property(e => e.Flby)
                .HasMaxLength(255)
                .HasColumnName("FLBY");
            entity.Property(e => e.Fldate)
                .HasColumnType("datetime")
                .HasColumnName("FLDATE");
            entity.Property(e => e.Fsb)
                .HasMaxLength(255)
                .HasColumnName("FSB");
            entity.Property(e => e.Invamount).HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(255)
                .HasColumnName("INVNO");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<MigGstLedgerCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_GST_LedgerCode");

            entity.Property(e => e.BookCode).HasMaxLength(255);
            entity.Property(e => e.BookName).HasMaxLength(255);
            entity.Property(e => e.Gstn)
                .HasMaxLength(255)
                .HasColumnName("GSTN");
            entity.Property(e => e.Gsttype)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("GSTType");
            entity.Property(e => e.IsNoItc).HasColumnName("IsNoITC");
            entity.Property(e => e.IsRcm).HasColumnName("IsRCM");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.Ledgcode).HasColumnName("LEDGCODE");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("PAR_CODE");
            entity.Property(e => e.ParName)
                .HasMaxLength(255)
                .HasColumnName("PAR_NAME");
            entity.Property(e => e.Rcmapplicable)
                .HasMaxLength(255)
                .HasColumnName("RCMApplicable");
            entity.Property(e => e.RelevantColumnInvoiceDetail)
                .HasMaxLength(255)
                .HasColumnName("RelevantColumn_InvoiceDetail");
            entity.Property(e => e.TransactionType).HasMaxLength(255);
        });

        modelBuilder.Entity<MigIceBecurrentStatus>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_MIG_ICE_CurrentStatus2");

            entity.ToTable("MIG_ICE_BECurrentStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprDate)
                .HasColumnType("datetime")
                .HasColumnName("APPR_DATE");
            entity.Property(e => e.Appraisement)
                .HasDefaultValue(0)
                .HasComment("1 - RMS, 2 - Non-RMS");
            entity.Property(e => e.AssessDate)
                .HasColumnType("datetime")
                .HasColumnName("ASSESS_DATE");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beid).HasColumnName("BEID");
            entity.Property(e => e.Boedate)
                .HasColumnType("datetime")
                .HasColumnName("BOEDate");
            entity.Property(e => e.Boeno)
                .HasMaxLength(50)
                .HasColumnName("BOENo");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(50)
                .HasColumnName("CURRENT_QUEUE");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExamDate)
                .HasColumnType("datetime")
                .HasColumnName("EXAM_DATE");
            entity.Property(e => e.OocDate)
                .HasColumnType("datetime")
                .HasColumnName("OOC_DATE");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("PAYMENT_DATE");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigIceBedetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MIG_ICE_BEDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AppGroup).HasMaxLength(10);
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Bedate)
                .HasColumnType("datetime")
                .HasColumnName("BEDate");
            entity.Property(e => e.Beno).HasColumnName("BENo");
            entity.Property(e => e.Chano)
                .HasMaxLength(50)
                .HasColumnName("CHANo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FinePenalty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.Iecno)
                .HasMaxLength(50)
                .HasColumnName("IECNo");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PriorBe).HasColumnName("PriorBE");
            entity.Property(e => e.PriorBestatus)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PriorBEStatus");
            entity.Property(e => e.Sec48).HasColumnName("SEC48");
            entity.Property(e => e.Sec48status)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SEC48Status");
            entity.Property(e => e.TotalAssess).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Typ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("TYP");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.Wbeno)
                .HasMaxLength(50)
                .HasColumnName("WBENo");
        });

        modelBuilder.Entity<MigIceBillOfEntry>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MIG_ICE_BillOfEntry");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.Bedate)
                .HasColumnType("datetime")
                .HasColumnName("BEDate");
            entity.Property(e => e.Beno).HasColumnName("BENo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IceAppGroup)
                .HasMaxLength(50)
                .HasColumnName("ICE_AppGroup");
            entity.Property(e => e.IceAppraisement)
                .HasMaxLength(50)
                .HasColumnName("ICE_APPRAISEMENT");
            entity.Property(e => e.IceApprdate)
                .HasMaxLength(50)
                .HasColumnName("ICE_APPRDate");
            entity.Property(e => e.IceAssessDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_AssessDate");
            entity.Property(e => e.IceBedate)
                .HasMaxLength(50)
                .HasColumnName("ICE_BEDate");
            entity.Property(e => e.IceChallanNo)
                .HasMaxLength(50)
                .HasColumnName("ICE_ChallanNo");
            entity.Property(e => e.IceChano)
                .HasMaxLength(50)
                .HasColumnName("ICE_CHANo");
            entity.Property(e => e.IceCurrQueue).HasColumnName("ICE_CurrQueue");
            entity.Property(e => e.IceDutyAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_DutyAmount");
            entity.Property(e => e.IceDutyPaid)
                .HasMaxLength(50)
                .HasColumnName("ICE_DutyPaid");
            entity.Property(e => e.IceExamineDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_ExamineDate");
            entity.Property(e => e.IceFineAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_FineAmount");
            entity.Property(e => e.IceFinePenalty)
                .HasMaxLength(50)
                .HasColumnName("ICE_FinePenalty");
            entity.Property(e => e.IceFirstCheck)
                .HasMaxLength(50)
                .HasColumnName("ICE_FirstCheck");
            entity.Property(e => e.IceGrossWt)
                .HasMaxLength(50)
                .HasColumnName("ICE_GrossWT");
            entity.Property(e => e.IceIecno)
                .HasMaxLength(50)
                .HasColumnName("ICE_IECNo");
            entity.Property(e => e.IceInterestAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_InterestAmount");
            entity.Property(e => e.IceModeOfPayment)
                .HasMaxLength(50)
                .HasColumnName("ICE_ModeOfPayment");
            entity.Property(e => e.IceOocdate)
                .HasMaxLength(50)
                .HasColumnName("ICE_OOCDate");
            entity.Property(e => e.IcePaymentDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_PaymentDate");
            entity.Property(e => e.IcePenalAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_PenalAmount");
            entity.Property(e => e.IcePriorBe)
                .HasMaxLength(50)
                .HasColumnName("ICE_PriorBE");
            entity.Property(e => e.IceQueryRaised).HasColumnName("ICE_QueryRaised");
            entity.Property(e => e.IceQueryReply).HasColumnName("ICE_QueryReply");
            entity.Property(e => e.IceReplyDate)
                .HasMaxLength(50)
                .HasColumnName("ICE_ReplyDate");
            entity.Property(e => e.IceReplyStatus).HasColumnName("ICE_ReplyStatus");
            entity.Property(e => e.IceSec48)
                .HasMaxLength(50)
                .HasColumnName("ICE_SEC48");
            entity.Property(e => e.IceTotalAssess)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalAssess");
            entity.Property(e => e.IceTotalDuty)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalDuty");
            entity.Property(e => e.IceTotalDutyAmount)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalDutyAmount");
            entity.Property(e => e.IceTotalPkgs)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalPkgs");
            entity.Property(e => e.IceTotalValue)
                .HasMaxLength(50)
                .HasColumnName("ICE_TotalValue");
            entity.Property(e => e.IceTyp)
                .HasMaxLength(50)
                .HasColumnName("ICE_TYP");
            entity.Property(e => e.IceWbeno)
                .HasMaxLength(50)
                .HasColumnName("ICE_WBENo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigIceDutyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MIG_ICE_DutyDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Beid).HasColumnName("BEID");
            entity.Property(e => e.ChallanNo)
                .HasMaxLength(50)
                .HasColumnName("CHALLAN_No");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY_AMOUNT");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DUTY_PAID");
            entity.Property(e => e.FineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FINE_AMOUNT");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTEREST_AMOUNT");
            entity.Property(e => e.PayMode).HasMaxLength(50);
            entity.Property(e => e.PenalAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PENAL_AMOUNT");
            entity.Property(e => e.TotalDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DUTY");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigJbpost>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_JBPost");

            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(255);
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.JbNo)
                .HasMaxLength(255)
                .HasColumnName("JB_No");
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.M1Number)
                .HasMaxLength(255)
                .HasColumnName("M1_Number");
            entity.Property(e => e.NetPaid).HasColumnName("Net_Paid");
            entity.Property(e => e.PaidDate)
                .HasColumnType("datetime")
                .HasColumnName("Paid_Date");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Tds).HasColumnName("TDS");
            entity.Property(e => e.VendorName)
                .HasMaxLength(255)
                .HasColumnName("Vendor_Name");
        });

        modelBuilder.Entity<MigJbpost2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_JBPost2");

            entity.Property(e => e.InvoiceDate)
                .HasColumnType("datetime")
                .HasColumnName("Invoice_Date");
            entity.Property(e => e.InvoiceNo).HasMaxLength(255);
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.IsM1posted).HasColumnName("isM1Posted");
            entity.Property(e => e.IsUpdate).HasColumnName("isUpdate");
            entity.Property(e => e.Jbno)
                .HasMaxLength(255)
                .HasColumnName("JBNo");
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.M1Number)
                .HasMaxLength(255)
                .HasColumnName("M1_Number");
            entity.Property(e => e.NetPaid).HasColumnName("Net Paid");
            entity.Property(e => e.PaidDate)
                .HasColumnType("datetime")
                .HasColumnName("Paid Date");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Tds).HasColumnName("TDS");
            entity.Property(e => e.VendorName)
                .HasMaxLength(255)
                .HasColumnName("Vendor_Name");
        });

        modelBuilder.Entity<MigJobLedgerCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_JobLedgerCode");

            entity.Property(e => e.ExpenseLedgerCode)
                .HasMaxLength(255)
                .HasColumnName("Expense Ledger Code");
            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.F3).HasMaxLength(255);
            entity.Property(e => e.F4).HasMaxLength(255);
            entity.Property(e => e.F5).HasMaxLength(255);
        });

        modelBuilder.Entity<MigLgdispatch1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_LGDispatch_1");

            entity.Property(e => e.Container).HasMaxLength(255);
            entity.Property(e => e.ContainerType)
                .HasMaxLength(255)
                .HasColumnName("Container Type");
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.FollowUpDate)
                .HasMaxLength(255)
                .HasColumnName("FollowUp Date");
            entity.Property(e => e.HblHawbNo)
                .HasMaxLength(255)
                .HasColumnName("HBL/HAWB No");
            entity.Property(e => e.IceIgm)
                .HasColumnType("datetime")
                .HasColumnName("ICE_IGM");
            entity.Property(e => e.Igmdate)
                .HasColumnType("datetime")
                .HasColumnName("IGMDate");
            entity.Property(e => e.JobCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobRefNo).HasMaxLength(255);
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Mbl)
                .HasMaxLength(255)
                .HasColumnName("MBL");
            entity.Property(e => e.Oocdate)
                .HasColumnType("datetime")
                .HasColumnName("OOCDate");
            entity.Property(e => e.Port).HasMaxLength(255);
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(255)
                .HasColumnName("Shipping/Airline");
        });

        modelBuilder.Entity<MigPageM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_PageMS");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CGsGpFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cGsGpFlag");
            entity.Property(e => e.CTyp)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cTyp");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.MenuNode).HasMaxLength(500);
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.PageLink).HasMaxLength(500);
            entity.Property(e => e.PageName).HasMaxLength(200);
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MigPassingDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_PassingData");

            entity.Property(e => e.Aprrasingdate).HasMaxLength(255);
            entity.Property(e => e.Assessmentdate).HasMaxLength(255);
            entity.Property(e => e.Begroup)
                .HasMaxLength(255)
                .HasColumnName("BEGroup");
            entity.Property(e => e.BoeType)
                .HasMaxLength(255)
                .HasColumnName("BOE Type");
            entity.Property(e => e.Boedate)
                .HasColumnType("datetime")
                .HasColumnName("BOEDate");
            entity.Property(e => e.Boeno).HasColumnName("BOENo");
            entity.Property(e => e.BsjobNo)
                .HasMaxLength(255)
                .HasColumnName("BSJobNo");
            entity.Property(e => e.Consignee).HasMaxLength(255);
            entity.Property(e => e.FirstCheckRequired).HasMaxLength(255);
            entity.Property(e => e.JobType)
                .HasMaxLength(255)
                .HasColumnName("Job Type");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(255)
                .HasColumnName("RMS/Non-RMS");
        });

        modelBuilder.Entity<MigPayDec>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_PayDec");

            entity.Property(e => e.AdvAmt).HasColumnName("Adv Amt");
            entity.Property(e => e.BatchDate)
                .HasColumnType("datetime")
                .HasColumnName("Batch Date");
            entity.Property(e => e.InvoiceDate)
                .HasColumnType("datetime")
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo).HasMaxLength(255);
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.NetPayable)
                .HasMaxLength(255)
                .HasColumnName("Net Payable");
            entity.Property(e => e.NetPayable1).HasColumnName("Net Payable1");
            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.Tds).HasColumnName("TDS");
            entity.Property(e => e.TotalValue).HasColumnName("Total Value");
            entity.Property(e => e.Transporter).HasMaxLength(255);
        });

        modelBuilder.Entity<MigSkfTest>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__MIG_SKF___C65557211EA3DAEF");

            entity.ToTable("MIG_SKF_TEST");

            entity.Property(e => e.Lid).HasColumnName("LID");
            entity.Property(e => e.Division)
                .HasMaxLength(100)
                .HasColumnName("DIVISION");
            entity.Property(e => e.Errflag).HasColumnName("ERRFLAG");
            entity.Property(e => e.Jobid).HasColumnName("JOBID");
            entity.Property(e => e.Jobrefno)
                .HasMaxLength(50)
                .HasColumnName("JOBREFNO");
            entity.Property(e => e.NewDivision)
                .HasMaxLength(100)
                .HasColumnName("NEW_DIVISION");
            entity.Property(e => e.NewPlant)
                .HasMaxLength(100)
                .HasColumnName("NEW_PLANT");
            entity.Property(e => e.Newdivisionid).HasColumnName("NEWDIVISIONID");
            entity.Property(e => e.Newplantid).HasColumnName("NEWPLANTID");
            entity.Property(e => e.Newshipmentno)
                .HasMaxLength(50)
                .HasColumnName("NEWSHIPMENTNO");
            entity.Property(e => e.Olddivisionid).HasColumnName("OLDDIVISIONID");
            entity.Property(e => e.Oldplantid).HasColumnName("OLDPLANTID");
            entity.Property(e => e.Oldshimentno)
                .HasMaxLength(50)
                .HasColumnName("OLDSHIMENTNO");
            entity.Property(e => e.Plant)
                .HasMaxLength(100)
                .HasColumnName("PLANT");
        });

        modelBuilder.Entity<MigSkfrefNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_SKFRefNo");

            entity.Property(e => e.Bsjobno)
                .HasMaxLength(255)
                .HasColumnName("BSJOBNO");
            entity.Property(e => e.CustRefNo).HasMaxLength(255);
        });

        modelBuilder.Entity<MigTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_Temp");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Clrdate)
                .HasColumnType("datetime")
                .HasColumnName("clrdate");
            entity.Property(e => e.Fsb)
                .HasColumnType("datetime")
                .HasColumnName("fsb");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.Odate)
                .HasColumnType("datetime")
                .HasColumnName("odate");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("ref");
        });

        modelBuilder.Entity<MigTempUtr20241217>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_TempUTR20241217");

            entity.Property(e => e.F10).HasMaxLength(255);
            entity.Property(e => e.F11).HasMaxLength(255);
            entity.Property(e => e.F12).HasMaxLength(255);
            entity.Property(e => e.F13).HasMaxLength(255);
            entity.Property(e => e.F7).HasMaxLength(255);
            entity.Property(e => e.F8).HasMaxLength(255);
            entity.Property(e => e.F9).HasMaxLength(255);
            entity.Property(e => e.InvoiceDate)
                .HasColumnType("datetime")
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(255)
                .HasColumnName("Invoice No");
            entity.Property(e => e.JobNo)
                .HasMaxLength(255)
                .HasColumnName("Job No");
            entity.Property(e => e.Utr)
                .HasMaxLength(255)
                .HasColumnName("UTR");
        });

        modelBuilder.Entity<MigTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_Transaction");

            entity.Property(e => e.JobNo)
                .HasMaxLength(255)
                .HasColumnName("Job No");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.ReqReferenceNo).HasMaxLength(255);
            entity.Property(e => e.RespDate).HasColumnType("datetime");
            entity.Property(e => e.RespReferenceNo).HasMaxLength(255);
            entity.Property(e => e.RespStatus).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.UniqueReferenceNo).HasMaxLength(255);
            entity.Property(e => e.Utr)
                .HasMaxLength(255)
                .HasColumnName("UTR");
        });

        modelBuilder.Entity<MigUtr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_UTR");

            entity.Property(e => e.Billdate)
                .HasColumnType("datetime")
                .HasColumnName("billdate");
            entity.Property(e => e.ChequeNo).HasMaxLength(255);
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("par_code");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("ref");
            entity.Property(e => e.Systemref)
                .HasMaxLength(255)
                .HasColumnName("systemref");
            entity.Property(e => e.Vchno)
                .HasMaxLength(255)
                .HasColumnName("vchno");
        });

        modelBuilder.Entity<MigVendorBankDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIG_VendorBankDetail");

            entity.Property(e => e.AccountNo).HasMaxLength(255);
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.Gstno)
                .HasMaxLength(255)
                .HasColumnName("GSTNo");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(255)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.PanNo).HasMaxLength(255);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.VendorCode).HasMaxLength(255);
            entity.Property(e => e.VendorName).HasMaxLength(255);
        });

        modelBuilder.Entity<MigemployeeHr1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MIGEmployeeHR");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(255)
                .HasColumnName("Branch Code");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(255)
                .HasColumnName("Department Code");
            entity.Property(e => e.Designation).HasMaxLength(255);
            entity.Property(e => e.EmpCode)
                .HasMaxLength(255)
                .HasColumnName("Emp# Code");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(255)
                .HasColumnName("Employee Name");
            entity.Property(e => e.F10).HasMaxLength(255);
            entity.Property(e => e.F11).HasMaxLength(255);
            entity.Property(e => e.F12).HasMaxLength(255);
            entity.Property(e => e.F13).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Segments).HasMaxLength(255);
            entity.Property(e => e.SrNo)
                .HasMaxLength(255)
                .HasColumnName("Sr No#");
            entity.Property(e => e.SubLocation)
                .HasMaxLength(255)
                .HasColumnName("Sub Location");
        });

        modelBuilder.Entity<MpMyPaccoAutTokan>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MP_MyPaccoAutTokan");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.AuthTokan).HasMaxLength(100);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ValidTillDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MpMyPaccoAwb>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MP_MyPaccoAWB");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Awbdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("AWBDate");
            entity.Property(e => e.Awbno)
                .HasMaxLength(100)
                .HasColumnName("AWBNo");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CustomerId).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LStatus)
                .HasDefaultValue(1)
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lspname)
                .HasMaxLength(100)
                .HasColumnName("LSPName");
            entity.Property(e => e.OrderNo).HasMaxLength(100);
            entity.Property(e => e.PlantAddressId).HasDefaultValue(0);
            entity.Property(e => e.StatusDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MpMyPaccoJobAwb>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MP_MyPaccoJobAWB");

            entity.HasIndex(e => e.IsDispatchUpdate, "IsDispatchUpdate_Includes").HasFillFactor(100);

            entity.HasIndex(e => e.IsDispatchUpdate, "ix_MP_MyPaccoJobAWB_IsDispatchUpdate_includes").HasFillFactor(100);

            entity.HasIndex(e => e.IsDispatchUpdate, "ix_MP_MyPaccoJobAWB_IsDispatchUpdate_includes1").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Awbid).HasColumnName("AWBId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsDispatchUpdate).HasComment("Flag for Billing Dispatch Status Update ");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<MpMyPaccoLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MP_MyPaccoLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Apiaction)
                .HasMaxLength(50)
                .HasColumnName("APIAction");
            entity.Property(e => e.AppUserName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ErrCode).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TxnDateTime).HasMaxLength(50);
        });

        modelBuilder.Entity<MpMyPaccoLogin>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MP_MyPaccoLogin");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Apipasscode)
                .HasMaxLength(50)
                .HasColumnName("APIPasscode");
            entity.Property(e => e.ApiuserName)
                .HasMaxLength(50)
                .HasColumnName("APIUserName");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<MpMyPaccoStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MP_MyPaccoStatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<MsBillingInstruction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MS_BillingInstruction", tb =>
                {
                    tb.HasTrigger("tr_MS_BillingInstruction_Delete");
                    tb.HasTrigger("tr_MS_BillingInstruction_Insert");
                    tb.HasTrigger("tr_MS_BillingInstruction_Update");
                });

            entity.Property(e => e.AlliedAgencyRemark).HasMaxLength(200);
            entity.Property(e => e.AlliedAgencyService).HasMaxLength(100);
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Instruction).HasMaxLength(200);
            entity.Property(e => e.Instruction1).HasMaxLength(200);
            entity.Property(e => e.Instruction2).HasMaxLength(200);
            entity.Property(e => e.Instruction3).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy1).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy2).HasMaxLength(200);
            entity.Property(e => e.InstructionCopy3).HasMaxLength(200);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.OtherService).HasMaxLength(100);
            entity.Property(e => e.OtherServiceRemark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsBillingInstructionShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("MS_BillingInstruction_shadow");

            entity.Property(e => e.AlliedAgencyRemark).HasMaxLength(400);
            entity.Property(e => e.AlliedAgencyService).HasMaxLength(200);
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Instruction).HasMaxLength(400);
            entity.Property(e => e.Instruction1).HasMaxLength(400);
            entity.Property(e => e.Instruction2).HasMaxLength(400);
            entity.Property(e => e.Instruction3).HasMaxLength(400);
            entity.Property(e => e.InstructionCopy).HasMaxLength(400);
            entity.Property(e => e.InstructionCopy1).HasMaxLength(400);
            entity.Property(e => e.InstructionCopy2).HasMaxLength(400);
            entity.Property(e => e.InstructionCopy3).HasMaxLength(400);
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.OtherService).HasMaxLength(200);
            entity.Property(e => e.OtherServiceRemark).HasMaxLength(400);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsContainerDetail>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("MS_ContainerDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasComment("1 For FCL, 2 For LCL");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsDocumentM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MS_DocumentMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocType).HasDefaultValue(0);
            entity.Property(e => e.DocumentName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(200)
                .HasColumnName("sRemarks");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsDocumentPath>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("MS_DocumentPath");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsJobActivity>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("MS_JobActivity");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DailyProgress).HasMaxLength(4000);
            entity.Property(e => e.DocumentPath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUserId).HasColumnName("lUserId");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MS_JobDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AssessableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsigneeGstin)
                .HasMaxLength(20)
                .HasColumnName("ConsigneeGSTIN");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileDirName).HasMaxLength(100);
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.IsFundAllowed).HasDefaultValue(true);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.JobType).HasDefaultValue(0);
            entity.Property(e => e.PackageCode).HasMaxLength(50);
            entity.Property(e => e.Pcdstatus).HasColumnName("PCDStatus");
            entity.Property(e => e.Remarks).HasMaxLength(200);
            entity.Property(e => e.UnitCode).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MsJobStatusM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("MS_JobStatusMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.StatusName).HasMaxLength(100);
        });

        modelBuilder.Entity<MsPcdbillingAdvice>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("MS_PCDBillingAdvice");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<MsPreAlertDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("MS_PreAlertDoc");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsigneeCode).HasMaxLength(50);
            entity.Property(e => e.CountryOfConsignment).HasMaxLength(50);
            entity.Property(e => e.CountryOfOrigin).HasMaxLength(50);
            entity.Property(e => e.CustInstruction).HasMaxLength(400);
            entity.Property(e => e.CustRefNo).HasMaxLength(100);
            entity.Property(e => e.CustomerId).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Etadate)
                .HasColumnType("datetime")
                .HasColumnName("ETADate");
            entity.Property(e => e.Kamid).HasColumnName("KAMId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.PortCode).HasMaxLength(20);
            entity.Property(e => e.PortOfLoadingCode).HasMaxLength(20);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.TypeId)
                .HasDefaultValue(1)
                .HasComment("1 - Import 2 Export")
                .HasColumnName("TypeID");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<MyLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyLog");

            entity.Property(e => e.F).HasColumnName("f");
            entity.Property(e => e.V).HasColumnName("v");
        });

        modelBuilder.Entity<OdDocumentM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_DocumentMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DocumentName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdDocumentShipper>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OD_DocumentShipper");

            entity.Property(e => e.AttachmentTitle)
                .HasMaxLength(255)
                .HasColumnName("ATTACHMENT_TITLE");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BnfNm)
                .HasMaxLength(255)
                .HasColumnName("BNF_NM");
            entity.Property(e => e.CargoTp)
                .HasMaxLength(255)
                .HasColumnName("CARGO_TP");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMandatory)
                .HasMaxLength(255)
                .HasColumnName("IS_MANDATORY");
            entity.Property(e => e.IsSeawayBl)
                .HasMaxLength(255)
                .HasColumnName("IS_SEAWAY_BL");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.LinerCode)
                .HasMaxLength(255)
                .HasColumnName("LINER_CODE");
            entity.Property(e => e.StuffTp)
                .HasMaxLength(255)
                .HasColumnName("STUFF_TP");
        });

        modelBuilder.Entity<OdDocumentShipper2>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_OD_DocumentShipper");

            entity.ToTable("OD_DocumentShipper_2");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AttachmentTitle)
                .HasMaxLength(255)
                .HasColumnName("ATTACHMENT_TITLE");
            entity.Property(e => e.CargoTp)
                .HasMaxLength(255)
                .HasColumnName("CARGO_TP");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(255)
                .HasColumnName("DOCUMENT_NAME");
            entity.Property(e => e.ShippingLineCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.ShippingLineName).HasMaxLength(255);
            entity.Property(e => e.StuffTp)
                .HasMaxLength(255)
                .HasColumnName("STUFF_TP");
        });

        modelBuilder.Entity<OdDorequest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_DORequest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Blno)
                .HasMaxLength(50)
                .HasColumnName("BLNo");
            entity.Property(e => e.CargoType).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FactoryAddress).HasMaxLength(200);
            entity.Property(e => e.FactoryPin).HasMaxLength(50);
            entity.Property(e => e.FreeDaysValidity).HasColumnType("datetime");
            entity.Property(e => e.HsscustomerName)
                .HasMaxLength(100)
                .HasColumnName("HSSCustomerName");
            entity.Property(e => e.IsAdvanceBlsubmit).HasColumnName("IsAdvanceBLSubmit");
            entity.Property(e => e.IsDoext).HasColumnName("IsDOExt");
            entity.Property(e => e.IsSeawayBl).HasColumnName("IsSeawayBL");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LocationCode).HasMaxLength(50);
            entity.Property(e => e.ModuleId).HasDefaultValue(1);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ResponseRefNo).HasMaxLength(50);
            entity.Property(e => e.RunnerBoyMobNo).HasMaxLength(50);
            entity.Property(e => e.RunnerBoyName).HasMaxLength(100);
            entity.Property(e => e.ShippingCode).HasMaxLength(50);
            entity.Property(e => e.ShippingName).HasMaxLength(100);
            entity.Property(e => e.StuffType).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdDostatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_DOStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DorequestId).HasColumnName("DORequestId");
            entity.Property(e => e.DorequestStatus)
                .HasMaxLength(50)
                .HasColumnName("DORequestStatus");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ResponseRefNo).HasMaxLength(50);
        });

        modelBuilder.Entity<OdInvoiceContainer>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_InvoiceContainer");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvoiceRequestId).HasColumnName("InvoiceRequestID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.ValidTill).HasColumnType("datetime");
        });

        modelBuilder.Entity<OdInvoiceDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_InvoiceDocument");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DocName).HasMaxLength(100);
            entity.Property(e => e.DocPath).HasMaxLength(200);
            entity.Property(e => e.DocTitle).HasMaxLength(100);
            entity.Property(e => e.DocType)
                .HasDefaultValue(1)
                .HasComment("1 - Invoice, 2 Delivery Order");
            entity.Property(e => e.DorespId).HasColumnName("DORespID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsDocopy)
                .HasDefaultValue(false)
                .HasColumnName("IsDOCopy");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdInvoiceRequest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_InvoiceRequest", tb =>
                {
                    tb.HasTrigger("tr_OD_InvoiceRequest_Delete");
                    tb.HasTrigger("tr_OD_InvoiceRequest_Insert");
                    tb.HasTrigger("tr_OD_InvoiceRequest_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Blno)
                .HasMaxLength(50)
                .HasColumnName("BLNo");
            entity.Property(e => e.ConsigneeAddress).HasMaxLength(200);
            entity.Property(e => e.ConsigneeContactNo).HasMaxLength(50);
            entity.Property(e => e.ConsigneeEmail).HasMaxLength(50);
            entity.Property(e => e.ConsigneeGst)
                .HasMaxLength(50)
                .HasColumnName("ConsigneeGST");
            entity.Property(e => e.ConsigneeName).HasMaxLength(150);
            entity.Property(e => e.ConsigneesState).HasMaxLength(50);
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FreeDaysValidity).HasColumnType("datetime");
            entity.Property(e => e.HblCount)
                .HasDefaultValue(0)
                .HasColumnName("hblCount");
            entity.Property(e => e.InvCategory)
                .HasMaxLength(50)
                .HasColumnName("invCategory");
            entity.Property(e => e.IsAddChrgReq).HasColumnName("isAddChrgReq");
            entity.Property(e => e.IsDoext)
                .HasDefaultValue(false)
                .HasColumnName("IsDOExt");
            entity.Property(e => e.IsHaz).HasDefaultValue(false);
            entity.Property(e => e.IsHighSeaSales).HasDefaultValue(false);
            entity.Property(e => e.IsMblHbl)
                .HasDefaultValue(false)
                .HasColumnName("isMblHbl");
            entity.Property(e => e.IsOdc)
                .HasDefaultValue(false)
                .HasColumnName("IsODC");
            entity.Property(e => e.IsSeawayBl)
                .HasDefaultValue(false)
                .HasColumnName("isSeawayBL");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LocationCode).HasMaxLength(50);
            entity.Property(e => e.OdexRefNo)
                .HasMaxLength(50)
                .HasColumnName("odexRefNo");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.ShippingCode).HasMaxLength(50);
            entity.Property(e => e.ShippingName).HasMaxLength(100);
            entity.Property(e => e.StorageChargeDays).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdInvoiceRequestShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("OD_InvoiceRequest_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Blno)
                .HasMaxLength(100)
                .HasColumnName("BLNo");
            entity.Property(e => e.ConsigneeAddress).HasMaxLength(400);
            entity.Property(e => e.ConsigneeContactNo).HasMaxLength(100);
            entity.Property(e => e.ConsigneeEmail).HasMaxLength(100);
            entity.Property(e => e.ConsigneeGst)
                .HasMaxLength(100)
                .HasColumnName("ConsigneeGST");
            entity.Property(e => e.ConsigneeName).HasMaxLength(300);
            entity.Property(e => e.ConsigneesState).HasMaxLength(100);
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FreeDaysValidity).HasColumnType("datetime");
            entity.Property(e => e.HblCount).HasColumnName("hblCount");
            entity.Property(e => e.InvCategory)
                .HasMaxLength(100)
                .HasColumnName("invCategory");
            entity.Property(e => e.IsAddChrgReq).HasColumnName("isAddChrgReq");
            entity.Property(e => e.IsDoext).HasColumnName("IsDOExt");
            entity.Property(e => e.IsMblHbl).HasColumnName("isMblHbl");
            entity.Property(e => e.IsOdc).HasColumnName("IsODC");
            entity.Property(e => e.IsSeawayBl).HasColumnName("isSeawayBL");
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.LocationCode).HasMaxLength(100);
            entity.Property(e => e.OdexRefNo)
                .HasMaxLength(100)
                .HasColumnName("odexRefNo");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ShippingCode).HasMaxLength(100);
            entity.Property(e => e.ShippingName).HasMaxLength(200);
            entity.Property(e => e.StorageChargeDays).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdInvoiceResponse>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_InvoiceResponse", tb =>
                {
                    tb.HasTrigger("tr_OD_InvoiceResponse_Delete");
                    tb.HasTrigger("tr_OD_InvoiceResponse_Insert");
                    tb.HasTrigger("tr_OD_InvoiceResponse_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BillToParty)
                .HasMaxLength(100)
                .HasColumnName("billToParty");
            entity.Property(e => e.BlNo)
                .HasMaxLength(50)
                .HasColumnName("blNo");
            entity.Property(e => e.BnfCode)
                .HasMaxLength(50)
                .HasColumnName("bnfCode");
            entity.Property(e => e.BookingLineCode)
                .HasMaxLength(50)
                .HasColumnName("bookingLineCode");
            entity.Property(e => e.DoRevalidationCharges)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("doRevalidationCharges");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GstNo)
                .HasMaxLength(50)
                .HasColumnName("gstNo");
            entity.Property(e => e.IdTp)
                .HasMaxLength(50)
                .HasColumnName("idTp");
            entity.Property(e => e.InvCategory)
                .HasMaxLength(50)
                .HasColumnName("invCategory");
            entity.Property(e => e.InvDt)
                .HasColumnType("datetime")
                .HasColumnName("invDt");
            entity.Property(e => e.InvNo)
                .HasMaxLength(50)
                .HasColumnName("invNo");
            entity.Property(e => e.InvTp)
                .HasMaxLength(50)
                .HasColumnName("invTp");
            entity.Property(e => e.IsDorevalidation)
                .HasMaxLength(50)
                .HasColumnName("isDORevalidation");
            entity.Property(e => e.IsTdsDeduction)
                .HasMaxLength(50)
                .HasColumnName("isTdsDeduction");
            entity.Property(e => e.JobNo)
                .HasMaxLength(50)
                .HasColumnName("jobNo");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LocationCode)
                .HasMaxLength(50)
                .HasColumnName("locationCode");
            entity.Property(e => e.PartialPymt)
                .HasMaxLength(50)
                .HasColumnName("partialPymt");
            entity.Property(e => e.TotalPymtAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalPymtAmt");
            entity.Property(e => e.TypOfCargo)
                .HasMaxLength(50)
                .HasColumnName("typOfCargo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdInvoiceResponseShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("OD_InvoiceResponse_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BillToParty)
                .HasMaxLength(200)
                .HasColumnName("billToParty");
            entity.Property(e => e.BlNo)
                .HasMaxLength(100)
                .HasColumnName("blNo");
            entity.Property(e => e.BnfCode)
                .HasMaxLength(100)
                .HasColumnName("bnfCode");
            entity.Property(e => e.BookingLineCode)
                .HasMaxLength(100)
                .HasColumnName("bookingLineCode");
            entity.Property(e => e.DoRevalidationCharges)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("doRevalidationCharges");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GstNo)
                .HasMaxLength(100)
                .HasColumnName("gstNo");
            entity.Property(e => e.IdTp)
                .HasMaxLength(100)
                .HasColumnName("idTp");
            entity.Property(e => e.InvCategory)
                .HasMaxLength(100)
                .HasColumnName("invCategory");
            entity.Property(e => e.InvDt)
                .HasColumnType("datetime")
                .HasColumnName("invDt");
            entity.Property(e => e.InvNo)
                .HasMaxLength(100)
                .HasColumnName("invNo");
            entity.Property(e => e.InvTp)
                .HasMaxLength(100)
                .HasColumnName("invTp");
            entity.Property(e => e.IsDorevalidation)
                .HasMaxLength(100)
                .HasColumnName("isDORevalidation");
            entity.Property(e => e.IsTdsDeduction)
                .HasMaxLength(100)
                .HasColumnName("isTdsDeduction");
            entity.Property(e => e.JobNo)
                .HasMaxLength(100)
                .HasColumnName("jobNo");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.LocationCode)
                .HasMaxLength(100)
                .HasColumnName("locationCode");
            entity.Property(e => e.PartialPymt)
                .HasMaxLength(100)
                .HasColumnName("partialPymt");
            entity.Property(e => e.TotalPymtAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalPymtAmt");
            entity.Property(e => e.TypOfCargo)
                .HasMaxLength(100)
                .HasColumnName("typOfCargo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdInvoiceStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_InvoiceStatus");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OdexRefNo).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RequestStatus).HasMaxLength(50);
        });

        modelBuilder.Entity<OdInvoiceTd>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_InvoiceTDS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Tdspercent)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("TDSPercent");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<OdRespDodetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("OD_RespDODetail", tb =>
                {
                    tb.HasTrigger("tr_OD_RespDODetail_Delete");
                    tb.HasTrigger("tr_OD_RespDODetail_Insert");
                    tb.HasTrigger("tr_OD_RespDODetail_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BlNo)
                .HasMaxLength(50)
                .HasColumnName("blNo");
            entity.Property(e => e.BnfCode)
                .HasMaxLength(50)
                .HasColumnName("bnfCode");
            entity.Property(e => e.DoReqStatus)
                .HasMaxLength(100)
                .HasColumnName("doReqStatus");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobId).HasDefaultValue(0);
            entity.Property(e => e.LocationCode)
                .HasMaxLength(50)
                .HasColumnName("locationCode");
            entity.Property(e => e.ModuleId)
                .HasDefaultValue(1)
                .HasColumnName("ModuleID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .HasColumnName("remarks");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<OdRespDodetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("OD_RespDODetail_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.BlNo)
                .HasMaxLength(100)
                .HasColumnName("blNo");
            entity.Property(e => e.BnfCode)
                .HasMaxLength(100)
                .HasColumnName("bnfCode");
            entity.Property(e => e.DoReqStatus)
                .HasMaxLength(200)
                .HasColumnName("doReqStatus");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.LocationCode)
                .HasMaxLength(100)
                .HasColumnName("locationCode");
            entity.Property(e => e.ModuleId).HasColumnName("ModuleID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(400)
                .HasColumnName("remarks");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .HasColumnName("status");
        });

        modelBuilder.Entity<OdStatusM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OD_StatusMS");

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LTypeId)
                .HasComment("1- Odex Invoice Request, 2- Payment Request, 3 DO Request")
                .HasColumnName("lTypeId");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.StatusName).HasMaxLength(50);
        });

        modelBuilder.Entity<PassingDataRate>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("PassingData_Rate");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PassingDatum>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AirSacCode).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceIitemName)
                .HasMaxLength(900)
                .HasColumnName("InvoiceIItemName");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SeaSacCode).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RandHelper>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RandHelper");

            entity.Property(e => e.R).HasColumnName("r");
        });

        modelBuilder.Entity<RandomUuid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RandomUUID");

            entity.Property(e => e.Uuid).HasColumnName("UUID");
        });

        modelBuilder.Entity<RoyalCaninMars315>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("RoyalCanin_Mars315");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ContainerDispatchDate)
                .HasComment("Date on which Container Dispatch Detail send to Royal Canin FTP Site")
                .HasColumnType("datetime");
            entity.Property(e => e.ContainerDispatchFilePath).HasMaxLength(200);
            entity.Property(e => e.CustomerClearedDate)
                .HasComment("Date on which Container OCC Detail send to Royal Canin FTP Site")
                .HasColumnType("datetime");
            entity.Property(e => e.CustomerClearedFilePath).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<RptTempDuty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("rptTemp_Duty");

            entity.Property(e => e.Amtrecd)
                .HasMaxLength(255)
                .HasColumnName(" AMTRECD");
            entity.Property(e => e.Balamt)
                .HasMaxLength(255)
                .HasColumnName(" BALAMT");
            entity.Property(e => e.Be).HasColumnName("BE");
            entity.Property(e => e.Bedate)
                .HasMaxLength(255)
                .HasColumnName("BEDATE");
            entity.Property(e => e.Billdate)
                .HasMaxLength(255)
                .HasColumnName("BILLDATE");
            entity.Property(e => e.Cstname3)
                .HasMaxLength(255)
                .HasColumnName("CSTNAME3");
            entity.Property(e => e.DutyPaid)
                .HasMaxLength(255)
                .HasColumnName("DUTY PAID");
            entity.Property(e => e.Invno)
                .HasMaxLength(255)
                .HasColumnName("INVNO");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasColumnName("LOCATION");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("PAR_CODE");
            entity.Property(e => e.Pname)
                .HasMaxLength(255)
                .HasColumnName("PNAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("REF");
            entity.Property(e => e.Vchno)
                .HasMaxLength(255)
                .HasColumnName("VCHNO");
        });

        modelBuilder.Entity<SezContainerDetail>(entity =>
        {
            entity.HasKey(e => e.Contid).IsClustered(false);

            entity.ToTable("SEZ_ContainerDetail");

            entity.Property(e => e.Contid).HasColumnName("CONTId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<SezCountryOriginM>(entity =>
        {
            entity.HasKey(e => e.Cid);

            entity.ToTable("SEZ_CountryOriginMS");

            entity.Property(e => e.Cid).HasColumnName("CId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cname)
                .HasMaxLength(300)
                .HasColumnName("CName");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<SezDestinationM>(entity =>
        {
            entity.HasKey(e => e.Did);

            entity.ToTable("SEZ_DestinationMS");

            entity.Property(e => e.Did).HasColumnName("DId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Dname)
                .HasMaxLength(300)
                .HasColumnName("DName");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<SezDocDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("SEZ_DocDetails");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(200);
            entity.Property(e => e.JobRefNo).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<SezFieldGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SEZ_FieldGroup");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<SezGrossWtUnitM>(entity =>
        {
            entity.HasKey(e => e.Gid);

            entity.ToTable("SEZ_GrossWtUnitMS");

            entity.Property(e => e.Gid).HasColumnName("GId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Uname)
                .HasMaxLength(200)
                .HasColumnName("UName");
        });

        modelBuilder.Entity<SezInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.InvId);

            entity.ToTable("SEZ_InvoiceDetails");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cth)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CTH");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InvNo).HasMaxLength(400);
            entity.Property(e => e.InvValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ItemPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ItemType).HasMaxLength(300);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ProductValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RemainingQty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<SezInvoiceItemTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("SEZ_InvoiceItemTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ItemName).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<SezJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("SEZ_JobDetail");

            entity.HasIndex(e => e.Lid, "ix_SEZ_JobDetail_lid").HasFillFactor(100);

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.AssesableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bedate).HasColumnName("BEDate");
            entity.Property(e => e.Beno)
                .HasMaxLength(10)
                .HasColumnName("BENo");
            entity.Property(e => e.BillingStatus).HasMaxLength(50);
            entity.Property(e => e.BuyerName).HasMaxLength(100);
            entity.Property(e => e.Chacode)
                .HasMaxLength(50)
                .HasColumnName("CHACode");
            entity.Property(e => e.Cifvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CIFValue");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.DutyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DutyPf).HasColumnName("DutyPF");
            entity.Property(e => e.ExRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FileDirName).HasMaxLength(50);
            entity.Property(e => e.GrossWeight).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InwardBedate).HasColumnName("InwardBEDate");
            entity.Property(e => e.InwardBeno)
                .HasMaxLength(10)
                .HasColumnName("InwardBENo");
            entity.Property(e => e.InwardJobNo).HasMaxLength(50);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PcdfrDahej).HasColumnName("PCDFrDahej");
            entity.Property(e => e.PcdsentClient).HasColumnName("PCDSentClient");
            entity.Property(e => e.Person).HasMaxLength(100);
            entity.Property(e => e.RequestId).HasMaxLength(50);
            entity.Property(e => e.Rnlogistics)
                .HasMaxLength(50)
                .HasColumnName("RNLogistics");
            entity.Property(e => e.Sezmode).HasColumnName("SEZMode");
            entity.Property(e => e.Seztype).HasColumnName("SEZType");
            entity.Property(e => e.SupplierName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<SezJobDocTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("SEZ_JobDocTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocumentName).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<SezJobMoreDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("SEZ_JobMoreDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Currency)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SchemeCode)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<SezPlaceOriginM>(entity =>
        {
            entity.HasKey(e => e.Pid);

            entity.ToTable("SEZ_PlaceOriginMS");

            entity.Property(e => e.Pid).HasColumnName("PId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Pname)
                .HasMaxLength(300)
                .HasColumnName("PName");
        });

        modelBuilder.Entity<SezRequestTypeM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("SEZ_RequestTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReqTypeName).HasMaxLength(300);
        });

        modelBuilder.Entity<SfPreAlertDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("SF_PreAlertDoc");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ChargeAmount).HasMaxLength(50);
            entity.Property(e => e.ChargeDescription).HasMaxLength(50);
            entity.Property(e => e.ChargeReasonCode).HasMaxLength(50);
            entity.Property(e => e.ChargecurrencyId)
                .HasMaxLength(50)
                .HasColumnName("ChargecurrencyID");
            entity.Property(e => e.CountryOfExportationCode).HasMaxLength(50);
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(50)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DocumentDateTime).HasColumnType("datetime");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExporterAddressLineOne).HasMaxLength(50);
            entity.Property(e => e.ExporterCityName).HasMaxLength(50);
            entity.Property(e => e.ExporterCountryCode).HasMaxLength(50);
            entity.Property(e => e.ExporterPartyId)
                .HasMaxLength(50)
                .HasColumnName("ExporterPartyID");
            entity.Property(e => e.ExporterPartyName).HasMaxLength(50);
            entity.Property(e => e.ExporterPostalCode).HasMaxLength(50);
            entity.Property(e => e.ExtendedAmount).HasMaxLength(50);
            entity.Property(e => e.GrossWeightMeasure).HasMaxLength(50);
            entity.Property(e => e.GrossWeightMeasureUnitCode).HasMaxLength(50);
            entity.Property(e => e.ImporterAddressLineOne).HasMaxLength(50);
            entity.Property(e => e.ImporterCityName).HasMaxLength(50);
            entity.Property(e => e.ImporterCountryCode).HasMaxLength(50);
            entity.Property(e => e.ImporterPartyId)
                .HasMaxLength(50)
                .HasColumnName("ImporterPartyID");
            entity.Property(e => e.ImporterPartyName).HasMaxLength(50);
            entity.Property(e => e.ImporterPostalCode).HasMaxLength(50);
            entity.Property(e => e.IncotermsCode).HasMaxLength(50);
            entity.Property(e => e.InvoiceReferenceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceReferenceNo).HasMaxLength(50);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LoadsetReference).HasMaxLength(50);
            entity.Property(e => e.NetWeightMeasure).HasMaxLength(50);
            entity.Property(e => e.NetWeightMeasureUnitCode).HasMaxLength(50);
            entity.Property(e => e.PackagingLabelId)
                .HasMaxLength(50)
                .HasColumnName("PackagingLabelID");
            entity.Property(e => e.PaymentTerm).HasMaxLength(100);
            entity.Property(e => e.PlaceOfOwnershipTransferLocation).HasMaxLength(50);
            entity.Property(e => e.ShipToAddressLineOne).HasMaxLength(50);
            entity.Property(e => e.ShipToCityName).HasMaxLength(50);
            entity.Property(e => e.ShipToCountryCode).HasMaxLength(50);
            entity.Property(e => e.ShipToPartyId)
                .HasMaxLength(50)
                .HasColumnName("ShipToPartyID");
            entity.Property(e => e.ShipToPartyName).HasMaxLength(50);
            entity.Property(e => e.ShipToPostalCode).HasMaxLength(50);
            entity.Property(e => e.ShipUnitQuantity).HasMaxLength(50);
            entity.Property(e => e.SkffileName)
                .HasMaxLength(100)
                .HasColumnName("SKFFileName");
            entity.Property(e => e.SupplierAddressLineOne).HasMaxLength(50);
            entity.Property(e => e.SupplierPartyCityName).HasMaxLength(50);
            entity.Property(e => e.SupplierPartyCountryCode).HasMaxLength(50);
            entity.Property(e => e.SupplierPartyId).HasMaxLength(50);
            entity.Property(e => e.SupplierPartyName).HasMaxLength(100);
            entity.Property(e => e.SupplierPartyPostalCode).HasMaxLength(50);
            entity.Property(e => e.TotalAmount).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<SfPreAlertItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("SF_PreAlertItem");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BReturnableContainerIndicator).HasColumnName("bReturnableContainerIndicator");
            entity.Property(e => e.CommodityClassificationCode).HasMaxLength(50);
            entity.Property(e => e.CountryOfManufactureCode).HasMaxLength(50);
            entity.Property(e => e.CountryOfOriginCode).HasMaxLength(50);
            entity.Property(e => e.CustomerOrderDocumentId)
                .HasMaxLength(50)
                .HasColumnName("CustomerOrderDocumentID");
            entity.Property(e => e.CustomerOrderLineNumber).HasMaxLength(50);
            entity.Property(e => e.CustomerOrderSubLineNumber).HasMaxLength(50);
            entity.Property(e => e.CustomsTariffClassification).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.InnerDiameterMeasure).HasMaxLength(50);
            entity.Property(e => e.InnerDiameterMeasureUnitCode).HasMaxLength(50);
            entity.Property(e => e.ItemExtendedAmount).HasMaxLength(50);
            entity.Property(e => e.ItemExtendedAmountcurrencyId)
                .HasMaxLength(50)
                .HasColumnName("ItemExtendedAmountcurrencyID");
            entity.Property(e => e.ItemGrossWeightMeasure).HasMaxLength(50);
            entity.Property(e => e.ItemGrossWeightMeasureUnitCode).HasMaxLength(50);
            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemLabelId)
                .HasMaxLength(50)
                .HasColumnName("ItemLabelID");
            entity.Property(e => e.ItemNetWeightMeasure).HasMaxLength(50);
            entity.Property(e => e.ItemNetWeightMeasureUnitCode).HasMaxLength(50);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.LineNumber).HasMaxLength(50);
            entity.Property(e => e.OuterDiameterMeasure).HasMaxLength(50);
            entity.Property(e => e.OuterDiameterMeasureUnitCode).HasMaxLength(50);
            entity.Property(e => e.PackageCode).HasMaxLength(50);
            entity.Property(e => e.PerPackageQuantity).HasMaxLength(50);
            entity.Property(e => e.PerQuantity).HasMaxLength(50);
            entity.Property(e => e.PerQuantityUnitCode).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.QuantityUnitCode).HasMaxLength(50);
            entity.Property(e => e.RevisionId)
                .HasMaxLength(50)
                .HasColumnName("RevisionID");
            entity.Property(e => e.SalesOrderDocumentId)
                .HasMaxLength(50)
                .HasColumnName("SalesOrderDocumentID");
            entity.Property(e => e.SalesOrderLineNumber).HasMaxLength(50);
            entity.Property(e => e.SalesOrderSubLineNumber).HasMaxLength(50);
            entity.Property(e => e.ShippingMaterialCode).HasMaxLength(50);
            entity.Property(e => e.ShippingMaterialId)
                .HasMaxLength(50)
                .HasColumnName("ShippingMaterialID");
            entity.Property(e => e.UnitPriceAmount).HasMaxLength(50);
            entity.Property(e => e.UnitPriceAmountCurrencyId)
                .HasMaxLength(50)
                .HasColumnName("UnitPriceAmountCurrencyID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<Sheet1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Sheet1");

            entity.Property(e => e.BillingStage)
                .HasMaxLength(255)
                .HasColumnName("Billing Stage");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(255)
                .HasColumnName("Created By");
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.JobDate)
                .HasColumnType("datetime")
                .HasColumnName("Job Date");
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<Sheet5>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Sheet5");

            entity.Property(e => e.DocPath).HasMaxLength(255);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Remark).HasMaxLength(255);
        });

        modelBuilder.Entity<SkfIndiaImportRegister>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SKF_India_Import_Register$");

            entity.Property(e => e.ActionItem)
                .HasMaxLength(255)
                .HasColumnName("Action Item");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(255)
                .HasColumnName("BS JOB NO");
            entity.Property(e => e.Division).HasMaxLength(255);
            entity.Property(e => e.Plant).HasMaxLength(255);
            entity.Property(e => e.ShipmentNo)
                .HasMaxLength(255)
                .HasColumnName("Shipment No");
        });

        modelBuilder.Entity<SqlServerVersion>(entity =>
        {
            entity.HasKey(e => new { e.MajorVersionNumber, e.MinorVersionNumber, e.ReleaseDate });

            entity.Property(e => e.Branch)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.MajorVersionName)
                .HasMaxLength(19)
                .IsUnicode(false);
            entity.Property(e => e.MinorVersionName)
                .HasMaxLength(67)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(99)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SrServiceRequest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("SR_ServiceRequest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BranchName).HasMaxLength(100);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmpName).HasMaxLength(200);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.ResolvedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Stream).HasColumnName("stream");
        });

        modelBuilder.Entity<TblErrorLogApr2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogApr2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogApr2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogApr2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogApr2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogApr2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogAug2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogAug2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogAug2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogAug2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogDec2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogDec2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogDec2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogDec2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogFeb2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogFeb2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogFeb2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogFeb2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogFeb2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogFeb2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogJan2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogJan2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogJan2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogJan2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogJan2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogJan2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogJul2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogJul2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogJul2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogJul2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogJun2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogJun2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogMar2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogMar2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogMar2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogMar2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogMar2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogMar2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogMay2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogMay2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogMay2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogMay2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogMay2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogMay2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogNov2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogNov2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogNov2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogNov2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogOct2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogOct2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogOct2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogOct2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogSep2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogSep2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogSep2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogSep2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ErrorNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblErrorLogTableName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_ErrorLogTableName");

            entity.Property(e => e.ActualTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddedBy).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.AddedOn).HasColumnType("datetime");
            entity.Property(e => e.DisplayTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UniqueId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(9, 0)");
        });

        modelBuilder.Entity<TblFiscalYearMst>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_FiscalYearMst");

            entity.Property(e => e.AddedBy).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.AddedOn).HasColumnType("datetime");
            entity.Property(e => e.FiscalYearId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("FiscalYearID");
            entity.Property(e => e.FiscalYearName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FiscalYearUid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FiscalYearUID");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("TODate");
        });

        modelBuilder.Entity<TblInvoiceDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_InvoiceDet");

            entity.Property(e => e.AddedBy).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.AddedOn).HasColumnType("datetime");
            entity.Property(e => e.AmountWithOutGst)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AmountWithOutGST");
            entity.Property(e => e.Amt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CbDetailsLid).HasColumnName("CB_Details_lid");
            entity.Property(e => e.Gst)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GST");
            entity.Property(e => e.InvDetId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoOfPackages).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.Particulars)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Rate).HasColumnType("numeric(18, 6)");
        });

        modelBuilder.Entity<TblInvoiceMst>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_InvoiceMst");

            entity.Property(e => e.AddedBy).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.AddedOn).HasColumnType("datetime");
            entity.Property(e => e.BeDate)
                .HasColumnType("datetime")
                .HasColumnName("BE_Date");
            entity.Property(e => e.BeNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BE_No");
            entity.Property(e => e.Bldate)
                .HasColumnType("datetime")
                .HasColumnName("BLDate");
            entity.Property(e => e.Blno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLNo");
            entity.Property(e => e.ConsigneeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ContainerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.Gstamt)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GSTAmt");
            entity.Property(e => e.InvId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceNumber).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.JobNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_Type");
            entity.Property(e => e.Mode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PayableAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Port_Of_Discharge");
            entity.Property(e => e.ShipperName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TotalQty).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TblUserLogApr2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogApr2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogApr2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogApr2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogApr2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogApr2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogAug2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogAug2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogAug2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogAug2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogDec2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogDec2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogDec2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogDec2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogFeb2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogFeb2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogFeb2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogFeb2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogFeb2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogFeb2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogJan2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogJan2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogJan2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogJan2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogJan2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogJan2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogJul2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogJul2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogJul2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogJul2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogJun2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogJun2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogMar2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogMar2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogMar2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogMar2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogMar2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogMar2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogMay2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogMay2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogMay2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogMay2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogMay2025>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogMay2025");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogNov2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogNov2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogNov2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogNov2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogOct2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogOct2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogOct2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogOct2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogSep2023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogSep2023");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogSep2024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogSep2024");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LoginId).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<TblUserLogTableName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_UserLogTableName");

            entity.Property(e => e.ActualTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AddedBy).HasColumnType("numeric(9, 0)");
            entity.Property(e => e.AddedOn).HasColumnType("datetime");
            entity.Property(e => e.DisplayTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UniqueId)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(9, 0)");
        });

        modelBuilder.Entity<TempAirportCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempAirportCode");

            entity.Property(e => e.Airport).HasMaxLength(255);
            entity.Property(e => e.Code).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
        });

        modelBuilder.Entity<TempBjv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_BJV");

            entity.Property(e => e.Agency).HasColumnName("agency");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Ay)
                .HasMaxLength(255)
                .HasColumnName("ay");
            entity.Property(e => e.Billdate)
                .HasColumnType("datetime")
                .HasColumnName("billdate");
            entity.Property(e => e.Billno).HasColumnName("billno");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.Otherdt)
                .HasMaxLength(255)
                .HasColumnName("otherdt");
            entity.Property(e => e.ParCode)
                .HasMaxLength(255)
                .HasColumnName("par_code");
            entity.Property(e => e.ParName)
                .HasMaxLength(255)
                .HasColumnName("par_name");
            entity.Property(e => e.Recamt).HasColumnName("recamt");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("ref");
            entity.Property(e => e.Servtax).HasColumnName("servtax");
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .HasColumnName("type");
            entity.Property(e => e.Vchno)
                .HasMaxLength(255)
                .HasColumnName("vchno");
        });

        modelBuilder.Entity<TempCheck>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("tempCheck");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BillAdviceDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.JobDate).HasColumnType("datetime");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ParName)
                .HasMaxLength(255)
                .HasColumnName("par_name");
            entity.Property(e => e.RefNo)
                .HasMaxLength(255)
                .HasColumnName("refNo");
        });

        modelBuilder.Entity<TempDispatchJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempDispatchJob");

            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<TempDow>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempDow");

            entity.Property(e => e.Betype)
                .HasMaxLength(255)
                .HasColumnName("BEType");
            entity.Property(e => e.BsjobNo)
                .HasMaxLength(255)
                .HasColumnName("BSJobNo");
            entity.Property(e => e.Consignee).HasMaxLength(255);
            entity.Property(e => e.Eta)
                .HasColumnType("datetime")
                .HasColumnName("ETA");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Port)
                .HasMaxLength(255)
                .HasColumnName("PORT");
            entity.Property(e => e.Remark).HasMaxLength(255);
        });

        modelBuilder.Entity<TempExp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Exp");

            entity.Property(e => e.ChargToParty)
                .HasMaxLength(255)
                .HasColumnName("Charg to Party");
            entity.Property(e => e.ContainerDetail)
                .HasMaxLength(255)
                .HasColumnName("container detail");
            entity.Property(e => e.Date).HasMaxLength(255);
            entity.Property(e => e.Extra).HasColumnName("EXTRA");
            entity.Property(e => e.Fileno)
                .HasMaxLength(255)
                .HasColumnName("FILENO");
            entity.Property(e => e.GrossWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Importer)
                .HasMaxLength(255)
                .HasColumnName("IMPORTER");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .HasColumnName("REMARK");
            entity.Property(e => e.Srno).HasColumnName("SRNo");
            entity.Property(e => e.Yard)
                .HasMaxLength(255)
                .HasColumnName("YARD");
        });

        modelBuilder.Entity<TempExpFreight>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("temp_ExpFreight");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("AMOUNT");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(100)
                .HasColumnName("BJVNO");
            entity.Property(e => e.Contraname)
                .HasMaxLength(500)
                .HasColumnName("CONTRANAME");
            entity.Property(e => e.Creditamt)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CREDITAMT");
            entity.Property(e => e.Debitamt)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("DEBITAMT");
            entity.Property(e => e.Narration)
                .HasMaxLength(4000)
                .HasColumnName("NARRATION");
            entity.Property(e => e.Vchno)
                .HasMaxLength(100)
                .HasColumnName("VCHNO");
        });

        modelBuilder.Entity<TempExpHasBro>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_ExpHasBro");

            entity.Property(e => e.Extra).HasColumnName("EXTRA");
            entity.Property(e => e.Fileno)
                .HasMaxLength(255)
                .HasColumnName("FILENO");
            entity.Property(e => e.GrossWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Importer)
                .HasMaxLength(255)
                .HasColumnName("IMPORTER");
            entity.Property(e => e.Lcl).HasColumnName("LCL");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .HasColumnName("REMARK");
        });

        modelBuilder.Entity<TempExpenseDpd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempExpenseDPD");

            entity.Property(e => e.Consigne).HasMaxLength(255);
            entity.Property(e => e.Cont20).HasMaxLength(255);
            entity.Property(e => e.Cont40).HasMaxLength(255);
            entity.Property(e => e.Jobno)
                .HasMaxLength(255)
                .HasColumnName("JOBNo");
            entity.Property(e => e.Srno).HasColumnName("srno");
        });

        modelBuilder.Entity<TempExpenseEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempExpenseEmail");

            entity.Property(e => e.Adc)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("ADC");
            entity.Property(e => e.BondShipment)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("Bond Shipment");
            entity.Property(e => e.CourierShipment)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("Courier Shipment");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.NonRms)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("NonRMS");
            entity.Property(e => e.NonRmsAddtional)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("NonRMS Addtional");
            entity.Property(e => e.OldUsed)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("Old & Used");
            entity.Property(e => e.PkgHandling)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("Pkg Handling");
            entity.Property(e => e.ReImport).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.Rms)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("RMS");
            entity.Property(e => e.RmsAdditional)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("RMS Additional");
            entity.Property(e => e.RunwayDelivery)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("Runway Delivery");
        });

        modelBuilder.Entity<TempHalliburtonDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("temp_HALLIBURTON_Doc");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DocId).HasColumnName("DocID");
            entity.Property(e => e.DocPath).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsSuccess).HasDefaultValue(false);
            entity.Property(e => e.JobId).HasColumnName("JobID");
        });

        modelBuilder.Entity<TempLoadingPort>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempLoadingPort");

            entity.Property(e => e.Nation)
                .HasMaxLength(255)
                .HasColumnName("NATION");
            entity.Property(e => e.PortCode)
                .HasMaxLength(255)
                .HasColumnName("PORT CODE");
            entity.Property(e => e.PortFullName)
                .HasMaxLength(255)
                .HasColumnName("PORT FULL NAME");
        });

        modelBuilder.Entity<TempTdsexempt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_TDSExempt");

            entity.Property(e => e.BillToParty)
                .HasMaxLength(255)
                .HasColumnName("Bill To Party");
            entity.Property(e => e.BillType)
                .HasMaxLength(255)
                .HasColumnName("Bill Type");
            entity.Property(e => e.ExpenseType).HasMaxLength(255);
            entity.Property(e => e.ImmediatePay)
                .HasMaxLength(255)
                .HasColumnName("Immediate Pay");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNo).HasMaxLength(255);
            entity.Property(e => e.InvoiceType).HasMaxLength(255);
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice Value");
            entity.Property(e => e.IsUpdated).HasColumnName("isUpdated");
            entity.Property(e => e.JbNo)
                .HasMaxLength(255)
                .HasColumnName("JB No");
            entity.Property(e => e.JobNo).HasMaxLength(255);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.PayMode)
                .HasMaxLength(255)
                .HasColumnName("Pay Mode");
            entity.Property(e => e.PayRquredDate)
                .HasColumnType("datetime")
                .HasColumnName("Pay Rqured Date");
            entity.Property(e => e.RimNonRim)
                .HasMaxLength(255)
                .HasColumnName("RIM/NonRIM");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Tds).HasColumnName("TDS");
            entity.Property(e => e.TdsResaon)
                .HasMaxLength(255)
                .HasColumnName("TDS_RESAON");
            entity.Property(e => e.Type).HasMaxLength(255);
            entity.Property(e => e.VendorName)
                .HasMaxLength(255)
                .HasColumnName("Vendor Name");
        });

        modelBuilder.Entity<TempUsercount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_Usercount");

            entity.Property(e => e.ChargeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChargeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Condition).IsUnicode(false);
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContainerType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContainerTypeId).HasColumnName("ContainerTypeID");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JobTypeId).HasColumnName("JobTypeID");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Mode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModeId).HasColumnName("ModeID");
            entity.Property(e => e.PortName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RmsnonRms)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSNonRMS");
            entity.Property(e => e.TypeOfBeid).HasColumnName("TypeOfBEID");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<TestEmp>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TestEmp");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<TestMigDispatchPending>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Test_MIG_DispatchPending");

            entity.Property(e => e.Branch).HasMaxLength(255);
            entity.Property(e => e.Customer).HasMaxLength(255);
            entity.Property(e => e.EbillDate)
                .HasMaxLength(255)
                .HasColumnName("Ebill Date");
            entity.Property(e => e.JobRefNo).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpAptive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Aptive");

            entity.Property(e => e.BeDt)
                .HasColumnType("datetime")
                .HasColumnName("BE DT#");
            entity.Property(e => e.BeNo).HasColumnName("BE NO#");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(255)
                .HasColumnName("BS Job No");
            entity.Property(e => e.FlightInwardDt)
                .HasColumnType("datetime")
                .HasColumnName("FLIGHT INWARD DT#");
            entity.Property(e => e.HblHawblNo).HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.Importer)
                .HasMaxLength(255)
                .HasColumnName("IMPORTER");
            entity.Property(e => e.JobCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasColumnName("LOCATION");
            entity.Property(e => e.MblMawblNo).HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.ShipmentClearedOn)
                .HasColumnType("datetime")
                .HasColumnName("SHIPMENT CLEARED ON");
            entity.Property(e => e.SrNo).HasColumnName("Sr# No#");
            entity.Property(e => e.Weight).HasColumnName("WEIGHT");
        });

        modelBuilder.Entity<TopBillingJob>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TOP_BillingJob");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TopBillingJobOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TOP_BillingJob_old");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
        });

        modelBuilder.Entity<TopVehicleDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TOP_VehicleDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillStatusId).HasColumnName("BillStatusID");
            entity.Property(e => e.DeliveryFrom).HasMaxLength(100);
            entity.Property(e => e.DeliveryTo).HasMaxLength(100);
            entity.Property(e => e.DetentionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyOffLoadingCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsValidBill).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LrCopiesDocPath).HasMaxLength(350);
            entity.Property(e => e.OtherCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReceiptDocPath).HasMaxLength(350);
            entity.Property(e => e.Remarks).HasMaxLength(450);
            entity.Property(e => e.TempoUnionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TpfrightRate)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TPFrightRate");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
            entity.Property(e => e.WaraiCharges).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TopVehicleDetailHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TOP_VehicleDetail_History");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillStatusId).HasColumnName("BillStatusID");
            entity.Property(e => e.DeliveryFrom).HasMaxLength(100);
            entity.Property(e => e.DeliveryTo).HasMaxLength(100);
            entity.Property(e => e.DetentionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyOffLoadingCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsValidBill).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LrCopiesDocPath).HasMaxLength(350);
            entity.Property(e => e.OtherCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReceiptDocPath).HasMaxLength(350);
            entity.Property(e => e.Remarks).HasMaxLength(450);
            entity.Property(e => e.TempoUnionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TpfrightRate)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TPFrightRate");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
            entity.Property(e => e.WaraiCharges).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TopVehicleDetailHistoryOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TOP_VehicleDetail_History_old");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillStatusId).HasColumnName("BillStatusID");
            entity.Property(e => e.DeliveryFrom).HasMaxLength(100);
            entity.Property(e => e.DeliveryTo).HasMaxLength(100);
            entity.Property(e => e.DetentionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyOffLoadingCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.LrCopiesDocPath).HasMaxLength(350);
            entity.Property(e => e.OtherCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReceiptDocPath).HasMaxLength(350);
            entity.Property(e => e.Remarks).HasMaxLength(450);
            entity.Property(e => e.TempoUnionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TpfrightRate)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TPFrightRate");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
            entity.Property(e => e.WaraiCharges).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TopVehicleDetailOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TOP_VehicleDetail_old");

            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillStatusId).HasColumnName("BillStatusID");
            entity.Property(e => e.DeliveryFrom).HasMaxLength(100);
            entity.Property(e => e.DeliveryTo).HasMaxLength(100);
            entity.Property(e => e.DetentionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyOffLoadingCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.LrCopiesDocPath).HasMaxLength(350);
            entity.Property(e => e.OtherCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReceiptDocPath).HasMaxLength(350);
            entity.Property(e => e.Remarks).HasMaxLength(450);
            entity.Property(e => e.TempoUnionCharges).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TpfrightRate)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TPFrightRate");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
            entity.Property(e => e.WaraiCharges).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TrBillApprovalHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BillApprovalHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(350);
        });

        modelBuilder.Entity<TrBillReceiveStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BillReceiveStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrBillReceivedDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BillReceivedDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.HoldReason).HasMaxLength(350);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.SentDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrBillReceivedDetailHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BillReceivedDetailHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.HoldReason).HasMaxLength(350);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.SentDate).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrBillRequestDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BillRequestDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReuqestDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrBillRequestDetailOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TR_BillRequestDetail_old");

            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReuqestDate).HasColumnType("datetime");
            entity.Property(e => e.TransporterAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TrBillingInstruction>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BillingInstructions");

            entity.HasIndex(e => new { e.TransReqId, e.IsActive, e.BDel }, "ix_TR_BillingInstructions_TransReqId_IsActive_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Instruction).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrBranchWsRequest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_BranchWsRequest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.SEmail)
                .HasMaxLength(50)
                .HasColumnName("sEmail");
        });

        modelBuilder.Entity<TrConsolidateInstruction>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_ConsolidateInstructions");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Instruction).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrConsolidateJobDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_ConsolidateJobDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrConsolidateRequest>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_ConsolidateRequest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransRefNo).HasMaxLength(50);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrContainerCount>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TR_ContainerCount");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Count20).HasDefaultValue(0);
            entity.Property(e => e.Count40).HasDefaultValue(0);
            entity.Property(e => e.Count45).HasDefaultValue(0);
            entity.Property(e => e.CountLcl)
                .HasDefaultValue(0)
                .HasColumnName("CountLCL");
            entity.Property(e => e.CountTotal).HasDefaultValue(0);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
        });

        modelBuilder.Entity<TrContainerDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TR_ContainerDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContainerType).HasComment("1 For FCL, 2 For LCL");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrDailyStatusHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_DailyStatusHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CurrentStatus).HasMaxLength(2000);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailCc)
                .HasMaxLength(450)
                .HasColumnName("EmailCC");
            entity.Property(e => e.EmailTo).HasMaxLength(450);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrDeliveryDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TR_DeliveryDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BabajiChallanCopy).HasMaxLength(200);
            entity.Property(e => e.BabajiChallanNo).HasMaxLength(100);
            entity.Property(e => e.CargoReceivedBy).HasMaxLength(50);
            entity.Property(e => e.ConsolidateId).HasDefaultValue(0L);
            entity.Property(e => e.DamagedImage).HasMaxLength(400);
            entity.Property(e => e.DeliveryFrom).HasComment("1 - Port To Customer, 2 or 3 Port To Warehouse, 4 Warehouse To Customer");
            entity.Property(e => e.DeliveryPoint).HasMaxLength(200);
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DriverPhone).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMobile).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.PodattachmentPath)
                .HasMaxLength(200)
                .HasColumnName("PODAttachmentPath");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.RoadPermitNo).HasMaxLength(50);
            entity.Property(e => e.Smssent).HasColumnName("SMSSent");
            entity.Property(e => e.TransportByBabaji).HasDefaultValue(false);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<TrDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_Document");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrEquipmentDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EquipmentDoc");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocTypeId).HasColumnName("DocTypeID");
            entity.Property(e => e.DocTypeName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrEquipmentM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EquipmentMS", tb =>
                {
                    tb.HasTrigger("tr_TR_EquipmentMS_Delete");
                    tb.HasTrigger("tr_TR_EquipmentMS_Insert");
                    tb.HasTrigger("tr_TR_EquipmentMS_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Capacity).HasMaxLength(50);
            entity.Property(e => e.ChassisNo).HasMaxLength(200);
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EngineNo).HasMaxLength(200);
            entity.Property(e => e.FuelAverage).HasMaxLength(50);
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.Model).HasMaxLength(100);
            entity.Property(e => e.RegYear).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.ReportName).HasMaxLength(50);
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SType)
                .HasMaxLength(100)
                .HasColumnName("sType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.WorkSite).HasMaxLength(100);
        });

        modelBuilder.Entity<TrEquipmentMsShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TR_EquipmentMS_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.Capacity).HasMaxLength(100);
            entity.Property(e => e.CompanyName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FuelAverage).HasMaxLength(100);
            entity.Property(e => e.LType).HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Model).HasMaxLength(200);
            entity.Property(e => e.RegYear).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.ReportName).HasMaxLength(100);
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SType)
                .HasMaxLength(200)
                .HasColumnName("sType");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.WorkSite).HasMaxLength(200);
        });

        modelBuilder.Entity<TrEwayAutTokan>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EWayAutTokan");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EwayApiid).HasColumnName("EWayAPIID");
            entity.Property(e => e.EwayAuthTokan)
                .HasMaxLength(100)
                .HasColumnName("EWayAuthTokan");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ValidTillDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrEwayBill>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EwayBill");

            entity.HasIndex(e => new { e.JobId, e.VehicleNo }, "ix_TR_EwayBill_JobId_VehicleNo_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillGenDate).HasMaxLength(50);
            entity.Property(e => e.Cess)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CESS");
            entity.Property(e => e.Cgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CGST");
            entity.Property(e => e.DeliveryPlace).HasMaxLength(200);
            entity.Property(e => e.DeliveryStateCode).HasDefaultValue(0);
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentNo).HasMaxLength(50);
            entity.Property(e => e.DocumentType).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EwayBillNo)
                .HasMaxLength(50)
                .HasColumnName("EWayBillNo");
            entity.Property(e => e.EwayLoginId).HasColumnName("EWayLoginID");
            entity.Property(e => e.ExtendedTimes).HasDefaultValue(0);
            entity.Property(e => e.FromGstin)
                .HasMaxLength(50)
                .HasColumnName("FromGSTIN");
            entity.Property(e => e.Igst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST");
            entity.Property(e => e.LStatus)
                .HasDefaultValue(0)
                .HasComment("0 - Not Valid For Movement, 1 Active, 2 Cancel, 3 Reject")
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.RejectStatus).HasMaxLength(50);
            entity.Property(e => e.Sgst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGST");
            entity.Property(e => e.StatusName).HasMaxLength(50);
            entity.Property(e => e.ToGstin)
                .HasMaxLength(50)
                .HasColumnName("ToGSTIN");
            entity.Property(e => e.TotInvValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totInvValue");
            entity.Property(e => e.TrackCount).HasDefaultValue(0);
            entity.Property(e => e.TransRateId).HasColumnName("TransRateID");
            entity.Property(e => e.TransportGstin)
                .HasMaxLength(50)
                .HasColumnName("TransportGSTIN");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.UserGstin)
                .HasMaxLength(50)
                .HasColumnName("UserGSTIN");
            entity.Property(e => e.ValidityDate).HasMaxLength(50);
            entity.Property(e => e.VehicleDate).HasMaxLength(50);
            entity.Property(e => e.VehicleNo).HasMaxLength(20);
        });

        modelBuilder.Entity<TrEwayBillDocument>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EWayBillDocument");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EwayBillId).HasColumnName("EwayBillID");
            entity.Property(e => e.FilePath).HasMaxLength(400);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrEwayBillJson>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TR_EWayJson");

            entity.ToTable("TR_EWayBillJson");

            entity.HasIndex(e => new { e.EwayId, e.BDel }, "ix_TR_EWayBillJson_EWayID_bDel").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EwayId).HasColumnName("EWayID");
            entity.Property(e => e.EwayJson).HasColumnName("EWayJSON");
        });

        modelBuilder.Entity<TrEwayLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EWayLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Apiaction)
                .HasMaxLength(50)
                .HasColumnName("APIAction");
            entity.Property(e => e.AppUserName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ErrCode).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TxnDateTime).HasMaxLength(50);
        });

        modelBuilder.Entity<TrEwayLogin>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EwayLogin");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Apipasscode)
                .HasMaxLength(50)
                .HasColumnName("APIPasscode");
            entity.Property(e => e.ApiuserName)
                .HasMaxLength(50)
                .HasColumnName("APIUserName");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Gstin)
                .HasMaxLength(50)
                .HasColumnName("GSTIN");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrEwayProductM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EWayProductMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Cgstrate)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("CGSTRate");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Hsncode).HasColumnName("HSNCode");
            entity.Property(e => e.Igstrate)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("IGSTRate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SDescription)
                .HasMaxLength(200)
                .HasColumnName("sDescription");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.Sgstrate)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SGSTRate");
        });

        modelBuilder.Entity<TrEwayStatusHistory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EWayStatusHistory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LStatus)
                .HasComment("0 - Not Valid For Movement, 1 Active, 2 Cancel, 3 Reject")
                .HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.StatusDate).HasMaxLength(50);
            entity.Property(e => e.StatusReason).HasMaxLength(100);
            entity.Property(e => e.StatusRemark).HasMaxLength(100);
        });

        modelBuilder.Entity<TrEwayTypeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EwayTypeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.SValue).HasColumnName("sValue");
            entity.Property(e => e.TransactionTypeId).HasComment("1 For Inward 2 for Outward");
        });

        modelBuilder.Entity<TrEwayVehicleLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_EWayVehicleLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FromPlace).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Reason).HasMaxLength(50);
            entity.Property(e => e.VehicleDate).HasMaxLength(50);
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TrExpenseCategory>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_ExpenseCategory");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrMaintenanceCategory>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TR_MaintanceCategory");

            entity.ToTable("TR_MaintenanceCategory");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasDefaultValue(1)
                .HasComment("1-Transport Vehicle,2 - Vessel")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrMaintenanceEmp>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_MaintenanceEmp");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrMaintenanceExpense>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_MaintenanceExpense", tb =>
                {
                    tb.HasTrigger("tr_TR_MaintenanceExpense_Delete");
                    tb.HasTrigger("tr_TR_MaintenanceExpense_Insert");
                    tb.HasTrigger("tr_TR_MaintenanceExpense_Update");
                });

            entity.HasIndex(e => e.MaintainId, "IX_TR_MaintenanceExpense");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.SupportBillPaidTo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

            entity.HasOne(d => d.Maintain).WithMany(p => p.TrMaintenanceExpenses)
                .HasForeignKey(d => d.MaintainId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TR_MaintenanceExpense_TR_MaintenanceWork");
        });

        modelBuilder.Entity<TrMaintenanceExpenseShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TR_MaintenanceExpense_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PaidTo).HasMaxLength(200);
            entity.Property(e => e.SupportBillPaidTo).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrMaintenanceMistake>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_MaintenanceMistake");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
            entity.Property(e => e.PersonName).HasMaxLength(100);
            entity.Property(e => e.Remark).HasMaxLength(800);
        });

        modelBuilder.Entity<TrMaintenanceWork>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TR_MaintanceWork");

            entity.ToTable("TR_MaintenanceWork", tb =>
                {
                    tb.HasTrigger("tr_TR_MaintenanceWork_Delete");
                    tb.HasTrigger("tr_TR_MaintenanceWork_Insert");
                    tb.HasTrigger("tr_TR_MaintenanceWork_Update");
                });

            entity.HasIndex(e => new { e.VehicleId, e.FinYear }, "IX_TR_MaintenanceWork");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(100);
            entity.Property(e => e.BillPaidDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsMistake).HasDefaultValue(false);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.PaidTo).HasMaxLength(100);
            entity.Property(e => e.SupportBillPaidTo).HasMaxLength(100);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.WorkDate).HasColumnType("datetime");
            entity.Property(e => e.WorkDateEnd).HasColumnType("datetime");
            entity.Property(e => e.WorkLocation).HasMaxLength(400);
        });

        modelBuilder.Entity<TrMaintenanceWorkShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TR_MaintenanceWork_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillNumber).HasMaxLength(200);
            entity.Property(e => e.BillPaidDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.PaidTo).HasMaxLength(200);
            entity.Property(e => e.SupportBillPaidTo).HasMaxLength(200);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.WorkDate).HasColumnType("datetime");
            entity.Property(e => e.WorkDateEnd).HasColumnType("datetime");
            entity.Property(e => e.WorkLocation).HasMaxLength(800);
        });

        modelBuilder.Entity<TrMigvehicleExp>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_MIGVehicleExp");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdditionalChargesOdc)
                .HasMaxLength(255)
                .HasColumnName("AdditionalChargesODC");
            entity.Property(e => e.Bhatta).HasMaxLength(255);
            entity.Property(e => e.Bhatta1).HasMaxLength(255);
            entity.Property(e => e.DamageContainer).HasMaxLength(255);
            entity.Property(e => e.Emptycontainerreciept)
                .HasMaxLength(255)
                .HasColumnName("EMPTYCONTAINERRECIEPT");
            entity.Property(e => e.ExpForDate).HasColumnType("datetime");
            entity.Property(e => e.ExpForMonth).HasColumnType("datetime");
            entity.Property(e => e.ExpPaymentDate).HasColumnType("datetime");
            entity.Property(e => e.FineWithoutCleaner).HasMaxLength(255);
            entity.Property(e => e.Garage).HasMaxLength(255);
            entity.Property(e => e.VaraiUnloading).HasMaxLength(255);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.VehicleNo).HasMaxLength(255);
        });

        modelBuilder.Entity<TrPackingListDoc>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_PackingListDocs");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TrRequestReceived>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_RequestReceived");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReceivedFrom).HasComment("Transport Request Received From Module - Import -1, Freight -2");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrTestExpenseEntry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TR_TestExpenseEntry");

            entity.Property(e => e.Amount).HasMaxLength(100);
            entity.Property(e => e.BillNo).HasMaxLength(100);
            entity.Property(e => e.CateId).HasColumnName("CateID");
            entity.Property(e => e.CompanyEntity)
                .HasMaxLength(255)
                .HasColumnName("Company_Entity");
            entity.Property(e => e.Lid)
                .ValueGeneratedOnAdd()
                .HasColumnName("lid");
            entity.Property(e => e.MaintainId).HasColumnName("MaintainID");
            entity.Property(e => e.MaintainceCategory)
                .HasMaxLength(255)
                .HasColumnName("Maintaince_Category");
            entity.Property(e => e.PaidTo).HasMaxLength(255);
            entity.Property(e => e.SupportingBillPaidTo).HasMaxLength(255);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(255)
                .HasColumnName("Vehicle_No");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(255)
                .HasColumnName("Vehicle_Type");
            entity.Property(e => e.WorkDate).HasColumnType("datetime");
            entity.Property(e => e.WorkMonth).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrTransBillDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransBillDetail", tb =>
                {
                    tb.HasTrigger("tr_TR_TransBillDetail_Delete");
                    tb.HasTrigger("tr_TR_TransBillDetail_Insert");
                    tb.HasTrigger("tr_TR_TransBillDetail_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillNumber).HasMaxLength(100);
            entity.Property(e => e.BillPersonName).HasMaxLength(100);
            entity.Property(e => e.BillSubmitDate).HasColumnType("datetime");
            entity.Property(e => e.ConsolidateId).HasColumnName("ConsolidateID");
            entity.Property(e => e.DetentionAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DocName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContRcptCharges)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsValid).HasDefaultValue(false);
            entity.Property(e => e.Justification).HasMaxLength(350);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherCharges)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TollCharges)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TrTransBillDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TR_TransBillDetail_shadow");

            entity.Property(e => e.ApprovedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillNumber).HasMaxLength(200);
            entity.Property(e => e.BillPersonName).HasMaxLength(200);
            entity.Property(e => e.BillSubmitDate).HasColumnType("datetime");
            entity.Property(e => e.ConsolidateId).HasColumnName("ConsolidateID");
            entity.Property(e => e.DetentionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DocName).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContRcptCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Justification).HasMaxLength(700);
            entity.Property(e => e.LStatus).HasColumnName("lStatus");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TollCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TrTransChargeType>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransChargeType");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrTransCustomerBill>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransCustomerBill");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DetentionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContRecptCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FromCity).HasMaxLength(250);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ToCity).HasMaxLength(250);
            entity.Property(e => e.TollCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiExpense).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TrTransMovement>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransMovement");

            entity.HasIndex(e => new { e.TransId, e.BDel }, "TransId_bDel_Includes");

            entity.HasIndex(e => new { e.RateId, e.BDel }, "ix_TR_TransMovement_RateId_bDel_includes");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AppDocPath).HasMaxLength(200);
            entity.Property(e => e.AppIdpath)
                .HasMaxLength(200)
                .HasColumnName("AppIDPath");
            entity.Property(e => e.AppSignPath).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CargoWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LrpdfPath)
                .HasMaxLength(200)
                .HasColumnName("LRpdfPath");
            entity.Property(e => e.LrreceiveMobile)
                .HasMaxLength(50)
                .HasColumnName("LRReceiveMobile");
            entity.Property(e => e.LrreceiveName)
                .HasMaxLength(50)
                .HasColumnName("LRReceiveName");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrTransRateDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransRateDetail", tb =>
                {
                    tb.HasTrigger("tr_TR_TransRateDetail_Delete");
                    tb.HasTrigger("tr_TR_TransRateDetail_Insert");
                    tb.HasTrigger("tr_TR_TransRateDetail_Update");
                });

            entity.HasIndex(e => new { e.TransReqId, e.Delivered, e.BDel }, "ix_TR_TransRateDetail_TransReqId_Delivered_bDel_includes").HasFillFactor(100);

            entity.HasIndex(e => e.TransporterId, "ix_TR_TransRateDetail_TransporterId_includes").HasFillFactor(100);

            entity.HasIndex(e => e.BDel, "ix_TR_TransRateDetail_bDel_includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Advance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(250);
            entity.Property(e => e.ContractAttachment).HasMaxLength(250);
            entity.Property(e => e.ContractPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DetentionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DriverPhoneNo).HasMaxLength(20);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailAttachment).HasMaxLength(250);
            entity.Property(e => e.EmptyContRecptCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EwayBillNo)
                .HasMaxLength(50)
                .HasColumnName("EWayBillNo");
            entity.Property(e => e.EwayBillValidity).HasMaxLength(50);
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FundRequestId).HasDefaultValue(0);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LrcopyPath)
                .HasMaxLength(500)
                .HasColumnName("LRCopyPath");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(50)
                .HasColumnName("LRNo");
            entity.Property(e => e.MarketBillingRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MemoAttachment).HasMaxLength(250);
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SellingPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TollCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiExpense).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TrTransRateDetailShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TR_TransRateDetail_shadow");

            entity.Property(e => e.Advance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ChallanNo).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(500);
            entity.Property(e => e.ContractAttachment).HasMaxLength(500);
            entity.Property(e => e.ContractPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DetentionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmailAttachment).HasMaxLength(500);
            entity.Property(e => e.EmptyContRecptCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Lrdate).HasColumnName("LRDate");
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.MarketBillingRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MemoAttachment).HasMaxLength(500);
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SellingPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TollCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiExpense).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VehicleNo).HasMaxLength(100);
        });

        modelBuilder.Entity<TrTransRateItem>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransRateItem");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.ChargeTypeId).HasColumnName("ChargeTypeID");
            entity.Property(e => e.Charges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxPercent).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.TaxType).HasComment("0 - no Tax 1 - IGST 2 -CGST / IGST");
            entity.Property(e => e.TotalCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransRateId).HasColumnName("TransRateID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrTransportAddressDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TR_TransportAddressDetail");

            entity.HasIndex(e => e.TransReqId, "ix_TR_TransportAddressDetail_TransReqId_includes").HasFillFactor(100);

            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DropAddress).HasMaxLength(800);
            entity.Property(e => e.DropCity).HasMaxLength(100);
            entity.Property(e => e.DropState).HasMaxLength(100);
            entity.Property(e => e.Dtdate)
                .HasColumnType("datetime")
                .HasColumnName("dtdate");
            entity.Property(e => e.ELatitude)
                .HasMaxLength(50)
                .HasColumnName("eLatitude");
            entity.Property(e => e.ELongitude)
                .HasMaxLength(50)
                .HasColumnName("eLongitude");
            entity.Property(e => e.LId)
                .ValueGeneratedOnAdd()
                .HasColumnName("lId");
            entity.Property(e => e.Luser).HasColumnName("luser");
            entity.Property(e => e.PickupAddress).HasMaxLength(800);
            entity.Property(e => e.PickupCity).HasMaxLength(100);
            entity.Property(e => e.PickupState).HasMaxLength(100);
            entity.Property(e => e.SLatitude)
                .HasMaxLength(50)
                .HasColumnName("sLatitude");
            entity.Property(e => e.SLongitude)
                .HasMaxLength(50)
                .HasColumnName("sLongitude");
        });

        modelBuilder.Entity<TrTransportM>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TR_TransportMS");

            entity.HasIndex(e => new { e.BranchId, e.FinYear, e.BDel, e.IsConsolidated, e.ConsolidateId, e.MovementCompleted, e.DeliveryStatus }, "BranchId_FinYear_bDel_IsConsolidated_ConsolidateID_MovementCompleted_DeliveryStatus_Includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.FinYear, e.BDel, e.IsConsolidated, e.ConsolidateId, e.MovementCompleted, e.DeliveryStatus }, "FinYear_bDel_IsConsolidated_ConsolidateID_MovementCompleted_DeliveryStatus_Includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.CustomerId, e.FinYear, e.BDel }, "ix_TR_TransportMS_CustomerId_FinYear_bDel_includes");

            entity.HasIndex(e => new { e.FinYear, e.BDel, e.IsConsolidated, e.ConsolidateId, e.MovementCompleted, e.DeliveryStatus }, "ix_TR_TransportMS_FinYear_bDel_IsConsolidated_ConsolidateID_MovementCompleted_DeliveryStatus").HasFillFactor(100);

            entity.HasIndex(e => new { e.JobId, e.BDel, e.CompanyId }, "ix_TR_TransportMS_JobId_bDel").HasFillFactor(100);

            entity.HasIndex(e => new { e.BDel, e.IsConsolidated, e.ConsolidateId }, "ix_TR_TransportMS_bDel_IsConsolidated_ConsolidateID_includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.BDel, e.JobRefNo }, "ix_TR_TransportMS_bDel_JobRefNo_includes").HasFillFactor(100);

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BackOfficeStatus).HasDefaultValue(false);
            entity.Property(e => e.BillStatus).HasDefaultValue(false);
            entity.Property(e => e.CompanyGstin)
                .HasMaxLength(50)
                .HasDefaultValue("27AAACB0466A1ZB")
                .HasColumnName("CompanyGSTIN");
            entity.Property(e => e.CompanyId)
                .HasDefaultValue(12)
                .HasComment("12 - Babaji Tansport / 3 - Navbharat")
                .HasColumnName("CompanyID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .HasDefaultValue("BSCCPL");
            entity.Property(e => e.ConsolidateId).HasColumnName("ConsolidateID");
            entity.Property(e => e.Destination).HasMaxLength(100);
            entity.Property(e => e.Dimension).HasMaxLength(450);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GrossWeight).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.IsFapost).HasColumnName("IsFAPost");
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.JobType).HasComment("1=import, 2=>export, 3 =>New Transport");
            entity.Property(e => e.LStatus)
                .HasDefaultValue(1)
                .HasColumnName("lStatus");
            entity.Property(e => e.LType)
                .HasComment("Transfer Request From: New, Import, Freight, Marine")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LocationFrom).HasMaxLength(100);
            entity.Property(e => e.MovementCompleted).HasDefaultValue(false);
            entity.Property(e => e.OldRefNo).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(600);
            entity.Property(e => e.TempConsolidatedId).HasColumnName("TempConsolidatedID");
            entity.Property(e => e.TrrefNo)
                .HasMaxLength(50)
                .HasColumnName("TRRefNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrTransportRateDetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TR_TransportRateDetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.ApprovedRemark).HasMaxLength(200);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryFrom).HasMaxLength(100);
            entity.Property(e => e.DeliveryTo).HasMaxLength(100);
            entity.Property(e => e.DetentionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContRcptCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransportAmount).HasDefaultValue(0);
            entity.Property(e => e.Transporter).HasMaxLength(100);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.VaraiAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TrTransportVendor>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransportVendor");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrTransporterPlaced>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_TransporterPlaced");

            entity.HasIndex(e => e.BDel, "ix_bDel_Includes").HasFillFactor(100);

            entity.HasIndex(e => new { e.BDel, e.TransRequestId }, "ix_bDel_TransRequestId_Includes").HasFillFactor(100);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrTruckRequest>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TR_TruckRequest_1");

            entity.ToTable("TR_TruckRequest");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Destination).HasMaxLength(150);
            entity.Property(e => e.Dimension).HasMaxLength(450);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExportType).HasComment("1 => Factory stuff, 2 => Doc Stuff, 3 => others");
            entity.Property(e => e.JobType).HasComment("1 => Import, 2 => Export");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.TrrefNo)
                .HasMaxLength(50)
                .HasColumnName("TRRefNo");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrVardiExpenseApproval>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VardiExpenseApproval");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remarks).HasMaxLength(300);
        });

        modelBuilder.Entity<TrVehicleDailyStatus>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleDailyStatus", tb =>
                {
                    tb.HasTrigger("tr_TR_VehicleDailyStatus_Delete");
                    tb.HasTrigger("tr_TR_VehicleDailyStatus_Insert");
                    tb.HasTrigger("tr_TR_VehicleDailyStatus_Update");
                });

            entity.HasIndex(e => e.VehicleId, "IX_TR_VehicleDailyStatus_VehiclID").HasFillFactor(90);

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DriverId).HasColumnName("DriverID");
            entity.Property(e => e.DriverMobile).HasMaxLength(100);
            entity.Property(e => e.DriverName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(400);
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrVehicleDailyStatusShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TR_VehicleDailyStatus_shadow");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DriverId).HasColumnName("DriverID");
            entity.Property(e => e.DriverMobile).HasMaxLength(200);
            entity.Property(e => e.DriverName).HasMaxLength(200);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrVehicleDriver>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleDriver");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DriverId).HasColumnName("DriverID");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrVehicleExpense>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TR_VahicleExpense");

            entity.ToTable("TR_VehicleExpense");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdditionalChargesForOdcoverweight)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AdditionalChargesForODCOverweight");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bhatta).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContainerReceipt).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FineWithoutCleaner).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fuel).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fuel2).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fuel2Liter).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FuelLiter).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Garage).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NakaPassingDamageContainer).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ParkingGatePass).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TollCharges).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiUnloading).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.Xerox).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<TrVehicleExpenseDel>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TR_VehicleExpense");

            entity.ToTable("TR_VehicleExpense_Del");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TrVehicleFuel>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleFuel");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FuelAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FuelDate).HasColumnType("datetime");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TrVehicleRateExpense>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleRateExpense");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AdditionalChargesForOdcoverweight)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AdditionalChargesForODCOverweight");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Bhatta).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContainerReceipt).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FineWithoutCleaner).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fuel).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fuel2).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fuel2Liter).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FuelLiter).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Garage).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.NakaPassingDamageContainer).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ParkingGatePass).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TollCharges).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TotalExpense).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiUnloading).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Xerox).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<TrVehicleRevenue>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TR_VehicleRevenue");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Amount).HasColumnName("AMOUNT");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Billdate)
                .HasColumnType("datetime")
                .HasColumnName("BILLDATE");
            entity.Property(e => e.Cname)
                .HasMaxLength(255)
                .HasColumnName("CNAME");
            entity.Property(e => e.DestFrom)
                .HasMaxLength(255)
                .HasColumnName("DEST_FROM");
            entity.Property(e => e.DestTo)
                .HasMaxLength(255)
                .HasColumnName("DEST_TO");
            entity.Property(e => e.Lrdate)
                .HasColumnType("datetime")
                .HasColumnName("LRDATE");
            entity.Property(e => e.PaidTo)
                .HasMaxLength(255)
                .HasColumnName("PAID_TO");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Rate).HasColumnName("RATE");
            entity.Property(e => e.Ref)
                .HasMaxLength(255)
                .HasColumnName("REF");
            entity.Property(e => e.Rno)
                .HasMaxLength(255)
                .HasColumnName("RNO");
            entity.Property(e => e.Truckno)
                .HasMaxLength(255)
                .HasColumnName("TRUCKNO");
            entity.Property(e => e.Vchno)
                .HasMaxLength(255)
                .HasColumnName("VCHNO");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrVehicleSellingDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleSellingDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DetentionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyContRecptCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FreightRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.MarketBillingRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OtherCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Remark)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TollCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VaraiExpense).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TrVehicleStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleStatusMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrVehicleTravelLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TR_VehicleTravelLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmployeeName).HasMaxLength(100);
            entity.Property(e => e.FuelAmount).HasMaxLength(50);
            entity.Property(e => e.FuelLiter).HasMaxLength(50);
            entity.Property(e => e.FuelType).HasMaxLength(50);
            entity.Property(e => e.InTime).HasMaxLength(50);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LocationTo).HasMaxLength(100);
            entity.Property(e => e.OutTime).HasMaxLength(50);
            entity.Property(e => e.StatusDate).HasColumnType("datetime");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TrsApibankTransaction>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TRS_APIBankTransaction", tb =>
                {
                    tb.HasTrigger("tr_TRS_APIBankTransaction_Delete");
                    tb.HasTrigger("tr_TRS_APIBankTransaction_Insert");
                    tb.HasTrigger("tr_TRS_APIBankTransaction_Update");
                });

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CreditorAccountIfsc)
                .HasMaxLength(50)
                .HasColumnName("CreditorAccountIFSC");
            entity.Property(e => e.CreditorAccountName).HasMaxLength(100);
            entity.Property(e => e.CreditorAccountNo).HasMaxLength(50);
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.IsSuccess).HasComment("Null - Payment In Process, 0 - Payment Failed, 1 Payment Success");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ReqDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReqReferenceNo).HasMaxLength(100);
            entity.Property(e => e.RespDate).HasColumnType("datetime");
            entity.Property(e => e.RespReferenceNo).HasMaxLength(100);
            entity.Property(e => e.RespStatus).HasMaxLength(100);
            entity.Property(e => e.StatusId).HasComment("Bank Response Status");
            entity.Property(e => e.UniqueReferenceNo).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<TrsApibankTransactionError>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TRS_APIBankTransactionError");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ErrorActionCode).HasMaxLength(200);
            entity.Property(e => e.ErrorActionDescription).HasMaxLength(200);
            entity.Property(e => e.ErrorCode).HasMaxLength(50);
            entity.Property(e => e.ErrorId).HasMaxLength(50);
            entity.Property(e => e.LUser)
                .HasDefaultValue(1)
                .HasColumnName("lUser");
            entity.Property(e => e.TransactionId).HasComment("Primery Key - lid - Table Name - AC_APIBankTransaction");
        });

        modelBuilder.Entity<TrsApibankTransactionShadow>(entity =>
        {
            entity.HasKey(e => e.AuditId);

            entity.ToTable("TRS_APIBankTransaction_shadow");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuditApp)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValueSql("(('App=('+rtrim(isnull(app_name(),'')))+') ')");
            entity.Property(e => e.AuditDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AuditUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.CreditorAccountIfsc)
                .HasMaxLength(100)
                .HasColumnName("CreditorAccountIFSC");
            entity.Property(e => e.CreditorAccountName).HasMaxLength(200);
            entity.Property(e => e.CreditorAccountNo).HasMaxLength(100);
            entity.Property(e => e.Currency).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.ReqReferenceNo).HasMaxLength(200);
            entity.Property(e => e.RespDate).HasColumnType("datetime");
            entity.Property(e => e.RespReferenceNo).HasMaxLength(200);
            entity.Property(e => e.RespStatus).HasMaxLength(200);
            entity.Property(e => e.UniqueReferenceNo).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<TrsAutoTransportPost>(entity =>
        {
            entity.HasKey(e => e.Sl);

            entity.ToTable("TRS_AutoTransportPost");

            entity.Property(e => e.Sl).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BillDate).HasColumnType("datetime");
            entity.Property(e => e.BillRecdDate).HasColumnType("datetime");
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.Cgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cgstamt");
            entity.Property(e => e.CgstparCode)
                .HasMaxLength(20)
                .HasColumnName("cgstpar_code");
            entity.Property(e => e.Cgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("cgstrt");
            entity.Property(e => e.Charge).HasMaxLength(20);
            entity.Property(e => e.ChargeName).HasMaxLength(50);
            entity.Property(e => e.Chequedt)
                .HasColumnType("datetime")
                .HasColumnName("chequedt");
            entity.Property(e => e.Chequeno).HasMaxLength(50);
            entity.Property(e => e.Cstcode1)
                .HasMaxLength(20)
                .HasColumnName("cstcode1");
            entity.Property(e => e.Cstcode2)
                .HasMaxLength(20)
                .HasColumnName("cstcode2");
            entity.Property(e => e.Cstcode3)
                .HasMaxLength(20)
                .HasColumnName("cstcode3");
            entity.Property(e => e.Cstcode4)
                .HasMaxLength(20)
                .HasColumnName("cstcode4");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ExcelType).HasMaxLength(50);
            entity.Property(e => e.ExpenseType)
                .HasMaxLength(50)
                .HasColumnName("Expense_Type");
            entity.Property(e => e.FlagAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Flag_Amount");
            entity.Property(e => e.ForexledgerCode)
                .HasMaxLength(20)
                .HasColumnName("Forexledger_code");
            entity.Property(e => e.Forexplamount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstin)
                .HasMaxLength(20)
                .HasColumnName("gstin");
            entity.Property(e => e.Gstpos).HasColumnName("gstpos");
            entity.Property(e => e.HsnSc)
                .HasMaxLength(20)
                .HasColumnName("hsn_sc");
            entity.Property(e => e.Igstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("igstamt");
            entity.Property(e => e.IgstparCode)
                .HasMaxLength(20)
                .HasColumnName("igstpar_code");
            entity.Property(e => e.Igstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("igstrt");
            entity.Property(e => e.InvoiceType).HasMaxLength(50);
            entity.Property(e => e.IsJbbooking).HasColumnName("IsJBBooking");
            entity.Property(e => e.Jvpcode)
                .HasMaxLength(20)
                .HasColumnName("jvpcode");
            entity.Property(e => e.Narration).HasMaxLength(255);
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid_To");
            entity.Property(e => e.ParCode)
                .HasMaxLength(20)
                .HasColumnName("par_code");
            entity.Property(e => e.Pssvchno)
                .HasMaxLength(16)
                .HasColumnName("PSSVCHNO");
            entity.Property(e => e.RAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rAmount");
            entity.Property(e => e.RcmCgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmCGStrt");
            entity.Property(e => e.RcmIgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmIGStpar_code");
            entity.Property(e => e.RcmIgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmIGStrt");
            entity.Property(e => e.RcmSgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("rcmSGStrt");
            entity.Property(e => e.Rcmapp).HasColumnName("RCMApp");
            entity.Property(e => e.Rcmcgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMCGSTAmt");
            entity.Property(e => e.RcmcgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmcgstpar_code");
            entity.Property(e => e.Rcmigstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMIGSTAmt");
            entity.Property(e => e.Rcmsgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RCMSGSTAmt");
            entity.Property(e => e.RcmsgstparCode)
                .HasMaxLength(20)
                .HasColumnName("rcmsgstpar_code");
            entity.Property(e => e.Ref).HasMaxLength(50);
            entity.Property(e => e.Rno)
                .HasMaxLength(50)
                .HasColumnName("rno");
            entity.Property(e => e.SerNo).HasColumnName("SER_NO");
            entity.Property(e => e.Sgstamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("sgstamt");
            entity.Property(e => e.SgstparCode)
                .HasMaxLength(20)
                .HasColumnName("sgstpar_code");
            entity.Property(e => e.Sgstrt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("sgstrt");
            entity.Property(e => e.SystemPaymentRef).HasMaxLength(50);
            entity.Property(e => e.SystemRef).HasMaxLength(50);
            entity.Property(e => e.Tdsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.Tdscode)
                .HasMaxLength(20)
                .HasColumnName("TDSCode");
            entity.Property(e => e.TdsgrossAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSGrossAmt");
            entity.Property(e => e.Tdsjvcode)
                .HasMaxLength(20)
                .HasColumnName("TDSJVCode");
            entity.Property(e => e.Tdsrate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TDSRate");
            entity.Property(e => e.TotalCsgtValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_CSGT_Value");
            entity.Property(e => e.TotalIgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_IGST_Value");
            entity.Property(e => e.TotalInvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalSgstValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_SGST_Value");
            entity.Property(e => e.TotalTaxableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Total_Taxable_Value");
            entity.Property(e => e.Updflag).HasColumnName("UPDFLAG");
            entity.Property(e => e.Vcode)
                .HasMaxLength(20)
                .HasColumnName("vcode");
        });

        modelBuilder.Entity<TrsCustomerBillDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TRS_CustomerBillDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DestFrom)
                .HasMaxLength(50)
                .HasColumnName("Dest_From");
            entity.Property(e => e.DestTo)
                .HasMaxLength(50)
                .HasColumnName("Dest_To");
            entity.Property(e => e.DetentionCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EmptyCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FreightChallanDate).HasColumnType("datetime");
            entity.Property(e => e.FreightChallanNo).HasMaxLength(50);
            entity.Property(e => e.FreightCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(50);
            entity.Property(e => e.TollCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnionCharges).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
            entity.Property(e => e.WaraiCharges).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TrsCustomerBillM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TRS_CustomerBillMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Fajbno)
                .HasMaxLength(50)
                .HasColumnName("FAJBNo");
            entity.Property(e => e.FapostingDate)
                .HasColumnType("datetime")
                .HasColumnName("FAPostingDate");
            entity.Property(e => e.FapostingUser).HasColumnName("FAPostingUser");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.TotalBillAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalDetention).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalEmpty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalFreight)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalWarai).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TrsDraftFinalDetail>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_TRS_DraftFinalDetails_1");

            entity.ToTable("TRS_DraftFinalDetails");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Adjamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADJAmount");
            entity.Property(e => e.Adjdate)
                .HasColumnType("datetime")
                .HasColumnName("ADJDate");
            entity.Property(e => e.Adjno)
                .HasMaxLength(50)
                .HasColumnName("ADJNo");
            entity.Property(e => e.Bdel)
                .HasDefaultValue(0)
                .HasColumnName("bdel");
            entity.Property(e => e.Bjvno)
                .HasMaxLength(50)
                .HasColumnName("BJVNO");
            entity.Property(e => e.Draftby)
                .HasMaxLength(50)
                .HasColumnName("DRAFTBY");
            entity.Property(e => e.Draftdate)
                .HasColumnType("datetime")
                .HasColumnName("DRAFTDATE");
            entity.Property(e => e.Drfcompby)
                .HasMaxLength(50)
                .HasColumnName("DRFCOMPBY");
            entity.Property(e => e.Drfcompdate)
                .HasColumnType("datetime")
                .HasColumnName("DRFCOMPDATE");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Flby)
                .HasMaxLength(50)
                .HasColumnName("FLBY");
            entity.Property(e => e.Fldate)
                .HasColumnType("datetime")
                .HasColumnName("FLDATE");
            entity.Property(e => e.Invamount).HasColumnName("INVAMOUNT");
            entity.Property(e => e.Invdate)
                .HasColumnType("datetime")
                .HasColumnName("INVDATE");
            entity.Property(e => e.Invno)
                .HasMaxLength(50)
                .HasColumnName("INVNO");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<TrsStatusM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TRS_StatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TrsTransBuyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TRS_TransBuyDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BuyValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DetentionChargesT26)
                .HasComment(" Transporter - Detention Charges")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DetentionCharges_T26");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.ProfitLossPercent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SellValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransportChargesA41)
                .HasComment("Transporter - Transport Charges")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TransportCharges_A41");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<TsRemainderLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TS_RemainderLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SentTo).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(200);
            entity.Property(e => e.Subject).HasMaxLength(100);
        });

        modelBuilder.Entity<TsReminderCategoriesM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TS_ReminderCategoriesMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(450)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<TsReminderUser>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TS_ReminderUser");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<TsTaskReminder>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TS_TaskReminder");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.ParentId)
                .HasDefaultValue(0)
                .HasColumnName("ParentID");
            entity.Property(e => e.Remark).HasMaxLength(800);
            entity.Property(e => e.RemindStatus).HasDefaultValue(true);
            entity.Property(e => e.RepeatMonth).HasDefaultValue(0);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TstAptiv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TST_Aptiv");

            entity.Property(e => e.Ref).HasMaxLength(255);
        });

        modelBuilder.Entity<TstConsigneeM>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TST_ConsigneeMS");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Address).HasMaxLength(400);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.ConsigneeGroup).HasMaxLength(50);
            entity.Property(e => e.ConsigneeName).HasMaxLength(100);
            entity.Property(e => e.ContactNo).HasMaxLength(400);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(400);
            entity.Property(e => e.Iecno)
                .HasMaxLength(100)
                .HasColumnName("IECNo");
            entity.Property(e => e.IncomeTaxNum).HasMaxLength(100);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SCode)
                .HasMaxLength(50)
                .HasColumnName("sCode");
        });

        modelBuilder.Entity<TstDodetail>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TST_DODetail");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Chaname)
                .HasMaxLength(100)
                .HasColumnName("CHAName");
            entity.Property(e => e.ChequeNo).HasMaxLength(100);
            entity.Property(e => e.Doamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOAmount");
            entity.Property(e => e.DoissuedTo)
                .HasMaxLength(100)
                .HasColumnName("DOIssuedTo");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
        });

        modelBuilder.Entity<TstPaneltyDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TST_PaneltyDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType).HasColumnName("lType");
        });

        modelBuilder.Entity<TstPaneltyM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_BS_TSTPaneltyMS");

            entity.ToTable("TST_PaneltyMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Remark).HasMaxLength(200);
            entity.Property(e => e.SName)
                .HasMaxLength(200)
                .HasColumnName("sName");
            entity.Property(e => e.Weightage).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<TwTransportMss>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("TW_TransportMSS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LocationFrom).HasMaxLength(100);
            entity.Property(e => e.LocationTo).HasMaxLength(100);
            entity.Property(e => e.TransportName).HasMaxLength(100);
            entity.Property(e => e.TransportRefNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TwVehicleDetail>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("TW_VehicleDetail");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.Bdel).HasColumnName("bdel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.VehicleNo).HasMaxLength(50);
        });

        modelBuilder.Entity<TypeofBefactoryStuffed>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK__TypeofBE__DE105D077A32B0B2");

            entity.ToTable("TypeofBEFactoryStuffed");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BesbtypeName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BESBTypeName");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("lUser");
        });

        modelBuilder.Entity<ViewImportDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("viewImportData");

            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.AssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("Assessment Date");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.Branch).HasMaxLength(100);
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
        });

        modelBuilder.Entity<VnAccountDetail>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_Accou__DE11596F561464A2");

            entity.ToTable("VN_AccountDetails");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.AccountType).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankAddress).HasMaxLength(500);
            entity.Property(e => e.BankBranchName).HasMaxLength(255);
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.BankNineDigitCode).HasMaxLength(9);
            entity.Property(e => e.BranchCode).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ifsc)
                .HasMaxLength(11)
                .HasColumnName("IFSC");
            entity.Property(e => e.IsRtgsenabled)
                .HasMaxLength(50)
                .HasColumnName("IsRTGSEnabled");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Micr)
                .HasMaxLength(9)
                .HasColumnName("MICR");
            entity.Property(e => e.UdpUser).HasColumnName("udpUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VendorAddress).HasMaxLength(500);
        });

        modelBuilder.Entity<VnAccountDetailsM>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("VN_AccountDetailsMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AccountNo).HasMaxLength(50);
            entity.Property(e => e.AccountType).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Micrcode)
                .HasMaxLength(50)
                .HasColumnName("MICRCode");
            entity.Property(e => e.UdpUser).HasColumnName("udpUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<VnAccountTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_Accou__DE11596F2EDCFF65");

            entity.ToTable("VN_AccountTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.AccountType).HasMaxLength(50);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<VnDivisionTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_Divis__DE11596F4A530D47");

            entity.ToTable("VN_DivisionTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DivisionTypeName).HasMaxLength(50);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<VnDocumentPath>(entity =>
        {
            entity.HasKey(e => e.LId).IsClustered(false);

            entity.ToTable("VN_DocumentPath");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DocPath).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.UpdUser).HasColumnName("updUser");
            entity.Property(e => e.VendorKycid).HasColumnName("VendorKYCId");
        });

        modelBuilder.Entity<VnGstregType>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_GSTRe__DE11596F5DE21F66");

            entity.ToTable("VN_GSTRegType");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.GstregTypeName)
                .HasMaxLength(50)
                .HasColumnName("GSTRegTypeName");
            entity.Property(e => e.LUser).HasColumnName("lUser");
        });

        modelBuilder.Entity<VnKycDetailsMsDel>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_KycDe__DE11596FCE4AC2AA");

            entity.ToTable("VN_KycDetailsMS_Del");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Acname)
                .HasMaxLength(255)
                .HasColumnName("ACName");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Ccm)
                .HasMaxLength(255)
                .HasColumnName("CCM");
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.ContactNo).HasMaxLength(50);
            entity.Property(e => e.ContactPerson).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.Division).HasMaxLength(255);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FaxNo).HasMaxLength(50);
            entity.Property(e => e.Gstn)
                .HasMaxLength(15)
                .HasColumnName("GSTN");
            entity.Property(e => e.GstregTypeId).HasColumnName("GSTRegTypeId");
            entity.Property(e => e.Hod)
                .HasMaxLength(255)
                .HasColumnName("HOD");
            entity.Property(e => e.Kam)
                .HasMaxLength(255)
                .HasColumnName("KAM");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LegalName).HasMaxLength(255);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Msme)
                .HasMaxLength(100)
                .HasColumnName("MSME");
            entity.Property(e => e.OfficeTelephone).HasMaxLength(50);
            entity.Property(e => e.PanNo).HasMaxLength(50);
            entity.Property(e => e.Pincode).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.Tds)
                .HasMaxLength(100)
                .HasColumnName("TDS");
            entity.Property(e => e.TradeName).HasMaxLength(255);
            entity.Property(e => e.UdpUser).HasColumnName("udpUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VendorName).HasMaxLength(255);
        });

        modelBuilder.Entity<VnKycHistory>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("VN_KycHistory");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.Remark).HasMaxLength(250);
        });

        modelBuilder.Entity<VnKycdocm>(entity =>
        {
            entity.HasKey(e => e.LId);

            entity.ToTable("VN_KYCDOCMS");

            entity.Property(e => e.LId)
                .ValueGeneratedNever()
                .HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LType)
                .HasComment("(2 - PN Movement)")
                .HasColumnName("lType");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.SName)
                .HasMaxLength(100)
                .HasColumnName("sName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(200)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<VnKycstatusM>(entity =>
        {
            entity.HasKey(e => e.Lid).HasName("PK_VN_VendorMS");

            entity.ToTable("VN_KYCStatusMS");

            entity.Property(e => e.Lid)
                .ValueGeneratedNever()
                .HasColumnName("lid");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LOrder).HasColumnName("lOrder");
            entity.Property(e => e.SName)
                .HasMaxLength(50)
                .HasColumnName("sName");
        });

        modelBuilder.Entity<VnVendorKycm>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_Vendo__DE11596FE8D136B0");

            entity.ToTable("VN_VendorKYCMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.Ccmname)
                .HasMaxLength(100)
                .HasColumnName("CCMName");
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.CompanyCode).HasMaxLength(100);
            entity.Property(e => e.ContactNo).HasMaxLength(100);
            entity.Property(e => e.ContactPerson).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.Division).HasMaxLength(100);
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FileDirName).HasMaxLength(50);
            entity.Property(e => e.Gstn)
                .HasMaxLength(50)
                .HasColumnName("GSTN");
            entity.Property(e => e.GstregTypeId).HasColumnName("GSTRegTypeId");
            entity.Property(e => e.Hodname)
                .HasMaxLength(100)
                .HasColumnName("HODName");
            entity.Property(e => e.IsMsme).HasColumnName("IsMSME");
            entity.Property(e => e.IsTds).HasColumnName("IsTDS");
            entity.Property(e => e.Kamname)
                .HasMaxLength(100)
                .HasColumnName("KAMName");
            entity.Property(e => e.KycTypeId)
                .HasComment("1 - Vendor, 2 Customer")
                .HasColumnName("KycTypeID");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.LegalName).HasMaxLength(255);
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.OfficeTelephone).HasMaxLength(50);
            entity.Property(e => e.PanNo).HasMaxLength(50);
            entity.Property(e => e.Pincode).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.State).HasMaxLength(100);
            entity.Property(e => e.TradeName).HasMaxLength(255);
            entity.Property(e => e.UdpUser).HasColumnName("udpUser");
            entity.Property(e => e.UpdDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updDate");
            entity.Property(e => e.VendorCategoryId).HasColumnName("VendorCategoryID");
            entity.Property(e => e.VendorName).HasMaxLength(255);
        });

        modelBuilder.Entity<VnVendorTypeM>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__VN_Vendo__DE11596FA6058D84");

            entity.ToTable("VN_VendorTypeMS");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.LUser).HasColumnName("lUser");
            entity.Property(e => e.VendorType).HasMaxLength(50);
        });

        modelBuilder.Entity<VwCustJobDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCustJobDetail");

            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AtaDate)
                .HasMaxLength(10)
                .HasColumnName("ATA Date");
            entity.Property(e => e.BeType)
                .HasMaxLength(100)
                .HasColumnName("BE Type");
            entity.Property(e => e.BoeDate)
                .HasMaxLength(10)
                .HasColumnName("BOE Date");
            entity.Property(e => e.BoeNo)
                .HasMaxLength(50)
                .HasColumnName("BOE No");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.ChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Challan Date");
            entity.Property(e => e.ChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Challan No");
            entity.Property(e => e.ChecklistRemark)
                .HasMaxLength(200)
                .HasColumnName("Checklist Remark");
            entity.Property(e => e.ChkAuthorRemark)
                .HasMaxLength(200)
                .HasColumnName("Chk Author Remark");
            entity.Property(e => e.ChkAuthorisedBy)
                .HasMaxLength(50)
                .HasColumnName("Chk Authorised By");
            entity.Property(e => e.ChkAuthorisedDate)
                .HasColumnType("datetime")
                .HasColumnName("Chk Authorised Date");
            entity.Property(e => e.ChkRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Chk Requested By");
            entity.Property(e => e.ChkRequestedDate)
                .HasColumnType("datetime")
                .HasColumnName("Chk Requested Date");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.CountryOfOrigin).HasMaxLength(20);
            entity.Property(e => e.CourierName)
                .HasMaxLength(100)
                .HasColumnName("Courier Name");
            entity.Property(e => e.CustRefNo)
                .HasMaxLength(100)
                .HasColumnName("Cust Ref No");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(100)
                .HasColumnName("Customer Name");
            entity.Property(e => e.DeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Delivered Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchDocketNo)
                .HasMaxLength(100)
                .HasColumnName("Dispatch Docket No");
            entity.Property(e => e.DocReceivedName)
                .HasMaxLength(100)
                .HasColumnName("Doc Received Name");
            entity.Property(e => e.DocumentDeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Document Delivery Date");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Payment Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.EtaDate)
                .HasMaxLength(10)
                .HasColumnName("ETA Date");
            entity.Property(e => e.ExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Examination Date");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NoOfContainer).HasColumnName("No Of Container");
            entity.Property(e => e.NoOfFclContainer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No Of FCL Container");
            entity.Property(e => e.NoOfLclContainer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No Of LCL Container");
            entity.Property(e => e.NoOfPackages).HasColumnName("No Of Packages");
            entity.Property(e => e.NocRefDate)
                .HasMaxLength(10)
                .HasColumnName("NOC Ref Date");
            entity.Property(e => e.NocRefNo)
                .HasMaxLength(50)
                .HasColumnName("NOC Ref No");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out Of Charge Date");
            entity.Property(e => e.PassingDate)
                .HasMaxLength(10)
                .HasColumnName("Passing Date");
            entity.Property(e => e.PassingQuery).HasColumnName("Passing Query");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .HasColumnName("Payment Type");
            entity.Property(e => e.PcaToCustomer)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PCA To Customer");
            entity.Property(e => e.PenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Penalty Amount");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PreAlertDate)
                .HasColumnType("datetime")
                .HasColumnName("Pre Alert Date");
            entity.Property(e => e.QueryDate)
                .HasMaxLength(10)
                .HasColumnName("Query Date");
            entity.Property(e => e.ResolveQueryDate)
                .HasMaxLength(10)
                .HasColumnName("Resolve Query Date");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.Transporter).HasMaxLength(100);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
        });

        modelBuilder.Entity<VwCustJobDetailOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCustJobDetail_Old");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.AtaDate)
                .HasMaxLength(10)
                .HasColumnName("ATA DATE");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(50)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BoeDate)
                .HasMaxLength(10)
                .HasColumnName("BOE Date");
            entity.Property(e => e.BoeNo)
                .HasMaxLength(50)
                .HasColumnName("BOE No");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CustRefNo)
                .HasMaxLength(100)
                .HasColumnName("Cust Ref No");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(200)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Blank Cheque Date");
            entity.Property(e => e.DoBlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("DO Blank Cheque No");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.EtaDate)
                .HasMaxLength(10)
                .HasColumnName("ETA DATE");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinePanaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Fine Panalty Amount");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPackages).HasColumnName("No. Of Packages");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("Pre Alert Date");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwExJobDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwExJobDetail");

            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.Buyer).HasMaxLength(200);
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.CifValue)
                .HasMaxLength(50)
                .HasColumnName("CIF Value");
            entity.Property(e => e.Consignee).HasMaxLength(250);
            entity.Property(e => e.ConsignmentCountry)
                .HasMaxLength(400)
                .HasColumnName("Consignment Country");
            entity.Property(e => e.ContainerGetInDate)
                .HasMaxLength(10)
                .HasColumnName("Container Get IN Date");
            entity.Property(e => e.ContainerLoaded)
                .HasMaxLength(50)
                .HasColumnName("Container Loaded");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.ContainerTypes)
                .HasMaxLength(50)
                .HasColumnName("Container Types");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DbkAmount)
                .HasMaxLength(50)
                .HasColumnName("DBK Amount");
            entity.Property(e => e.Destination).HasMaxLength(250);
            entity.Property(e => e.DestinationCountry)
                .HasMaxLength(400)
                .HasColumnName("Destination Country");
            entity.Property(e => e.Dimension).HasMaxLength(200);
            entity.Property(e => e.DocumentHandOverToShippingLineDate)
                .HasMaxLength(10)
                .HasColumnName("Document Hand Over To Shipping Line Date");
            entity.Property(e => e.ExamineDate)
                .HasMaxLength(10)
                .HasColumnName("Examine Date");
            entity.Property(e => e.ExamineReportDate)
                .HasMaxLength(10)
                .HasColumnName("Examine Report Date");
            entity.Property(e => e.FobValue)
                .HasMaxLength(50)
                .HasColumnName("FOB Value");
            entity.Property(e => e.Form13Date)
                .HasMaxLength(10)
                .HasColumnName("Form 13 Date");
            entity.Property(e => e.ForwarderPersonName)
                .HasMaxLength(250)
                .HasColumnName("Forwarder Person Name");
            entity.Property(e => e.FreightAmount)
                .HasMaxLength(50)
                .HasColumnName("Freight Amount");
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross WT");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(50)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.InformedToFreightForwarderDate)
                .HasMaxLength(10)
                .HasColumnName("Informed to Freight Forwarder Date");
            entity.Property(e => e.InsuranceAmount)
                .HasMaxLength(50)
                .HasColumnName("Insurance Amount");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(200)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.JobCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Job Created Date");
            entity.Property(e => e.LicenseDate).HasColumnName("License Date");
            entity.Property(e => e.LicenseNo)
                .HasMaxLength(200)
                .HasColumnName("License No");
            entity.Property(e => e.MarkAppraising)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("Mark/Appraising");
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(50)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NetWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Net WT");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No of Pkgs");
            entity.Property(e => e.PackageType)
                .HasMaxLength(50)
                .HasColumnName("Package Type");
            entity.Property(e => e.PassingDate)
                .HasMaxLength(10)
                .HasColumnName("Passing Date");
            entity.Property(e => e.PickUpBy)
                .HasMaxLength(100)
                .HasColumnName("Pick Up By");
            entity.Property(e => e.PickUpByPhone)
                .HasMaxLength(50)
                .HasColumnName("Pick Up By Phone");
            entity.Property(e => e.PickUpDate)
                .HasMaxLength(10)
                .HasColumnName("Pick Up Date");
            entity.Property(e => e.PickUpFrom)
                .HasMaxLength(250)
                .HasColumnName("Pick Up From");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port of Loading");
            entity.Property(e => e.ProductDescription)
                .HasMaxLength(300)
                .HasColumnName("Product Description");
            entity.Property(e => e.RegistrationDate)
                .HasMaxLength(10)
                .HasColumnName("Registration Date");
            entity.Property(e => e.SBillDate)
                .HasMaxLength(10)
                .HasColumnName("S/Bill Date");
            entity.Property(e => e.SBillNo)
                .HasMaxLength(50)
                .HasColumnName("S/Bill No");
            entity.Property(e => e.SealNo)
                .HasMaxLength(50)
                .HasColumnName("Seal No");
            entity.Property(e => e.ShipmentTerm)
                .HasMaxLength(50)
                .HasColumnName("Shipment Term");
            entity.Property(e => e.Shipper).HasMaxLength(100);
            entity.Property(e => e.ShippingBillType)
                .HasMaxLength(150)
                .HasColumnName("Shipping Bill Type");
            entity.Property(e => e.SumOf20).HasColumnName("Sum of 20");
            entity.Property(e => e.SumOf40).HasColumnName("Sum of 40");
            entity.Property(e => e.SumOfLcl).HasColumnName("Sum of LCL");
            entity.Property(e => e.SuperintendentLeoDate)
                .HasMaxLength(10)
                .HasColumnName("Superintendent LEO Date");
            entity.Property(e => e.TransportBy)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("Transport By");
            entity.Property(e => e.TransporterHandOverDate)
                .HasMaxLength(10)
                .HasColumnName("Transporter Hand Over Date");
            entity.Property(e => e.TypeOfExport)
                .HasMaxLength(50)
                .HasColumnName("Type of Export");
        });

        modelBuilder.Entity<VwJobAgingDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobAgingData");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcPhoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("ADC/PHO Update Date");
            entity.Property(e => e.AdcPhoUser)
                .HasMaxLength(50)
                .HasColumnName("ADC/PHO User");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(50)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPlanningUser)
                .HasMaxLength(50)
                .HasColumnName("Delivery Planning User");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.DutyUser)
                .HasMaxLength(50)
                .HasColumnName("Duty User");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinePanaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Fine Panalty Amount");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.FirstCheckUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("First Check Update Date");
            entity.Property(e => e.FirstCheckUser)
                .HasMaxLength(50)
                .HasColumnName("First Check User");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmCreationDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Creation Date");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NformApplicable)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("NForm Applicable");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NotingUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("Noting Update Date");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiApplicable)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Octroi Applicable");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.OutOfChargeUser)
                .HasMaxLength(50)
                .HasColumnName("Out Of Charge User");
            entity.Property(e => e.PassingUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("Passing Update Date");
            entity.Property(e => e.PassingUser)
                .HasMaxLength(50)
                .HasColumnName("Passing User");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitApplicable)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Road Permit Applicable");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.SformApplicable)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SForm Applicable");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwJobDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetail");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BcdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BCD Amount");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BeMode)
                .HasMaxLength(20)
                .HasColumnName("BE Mode");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillingAdvCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Adv Completed Date");
            entity.Property(e => e.BillingInstruction).HasColumnName("Billing Instruction");
            entity.Property(e => e.BillingStatus)
                .HasMaxLength(100)
                .HasColumnName("Billing Status");
            entity.Property(e => e.BillingStatusRemark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Billing Status Remark");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRemark)
                .HasMaxLength(200)
                .HasColumnName("Checklist Audit Remark");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistRequestRemark)
                .HasMaxLength(200)
                .HasColumnName("Checklist Request Remark");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsolDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Consol Do Process Date");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CountryOfOrigin)
                .HasMaxLength(50)
                .HasColumnName("Country Of Origin");
            entity.Property(e => e.CthNo)
                .HasMaxLength(50)
                .HasColumnName("CTH NO");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(20)
                .HasColumnName("Current Queue");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(400)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Blank Cheque Date");
            entity.Property(e => e.DoBlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("DO Blank Cheque No");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoPlanningRemark)
                .HasMaxLength(500)
                .HasColumnName("DO Planning Remark");
            entity.Property(e => e.DoRemark)
                .HasMaxLength(200)
                .HasColumnName("DO Remark");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyDebitAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Debit Amount");
            entity.Property(e => e.DutyFineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Fine Amount");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Paid");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyPenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Penalty Amount");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExchangeRate)
                .HasMaxLength(50)
                .HasColumnName("Exchange Rate");
            entity.Property(e => e.FinalDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Final Do Process Date");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinePenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Fine Penalty Amount");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("FirstCheck Status");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IecNo)
                .HasMaxLength(20)
                .HasColumnName("IEC NO");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Update Date");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.IgstAssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Assessable Value");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceFreightAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Freight Amount");
            entity.Property(e => e.InvoiceFreightCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Freight Currency");
            entity.Property(e => e.InvoiceInsuranceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Insurance Currency");
            entity.Property(e => e.InvoiceInsuranceExRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Invoice Insurance ExRate");
            entity.Property(e => e.InvoiceInsuranceRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Insurance Rate");
            entity.Property(e => e.InvoiceMiscAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Misc Amount");
            entity.Property(e => e.InvoiceMiscCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Misc Currency");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.Kam)
                .HasMaxLength(50)
                .HasColumnName("KAM");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OocFrom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OOC From");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortCode)
                .HasMaxLength(20)
                .HasColumnName("Port Code");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.PriorBe)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Prior BE");
            entity.Property(e => e.ProductAssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Assessable Value");
            entity.Property(e => e.ProductBasicDuty)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Basic Duty");
            entity.Property(e => e.ProductBasicDutyRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Product Basic Duty Rate");
            entity.Property(e => e.ProductCessAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Cess Amount");
            entity.Property(e => e.ProductCessRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Product Cess Rate");
            entity.Property(e => e.ProductGstDutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product GST Duty Amount");
            entity.Property(e => e.ProductGstDutyRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Product GST Duty Rate");
            entity.Property(e => e.ProductInvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Product Invoice Quantity");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Scheme/Licence Amount");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SocialSurchargeAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Social Surcharge Amount");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.SumOfLcl).HasColumnName("SUM OF LCL");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Warehouse Container No");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwJobDetailCust>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetailCust");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.AtaDate)
                .HasMaxLength(10)
                .HasColumnName("ATA Date");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BeType)
                .HasMaxLength(100)
                .HasColumnName("BE Type");
            entity.Property(e => e.BillAmount).HasColumnName("Bill Amount");
            entity.Property(e => e.BillCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Completed Date");
            entity.Property(e => e.BillDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Bill Delivery Type");
            entity.Property(e => e.BillDispatchCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Bill Dispatch Completed By");
            entity.Property(e => e.BillDispatchCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Dispatch Completed Date");
            entity.Property(e => e.BillDispatchReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Bill Dispatch Received By");
            entity.Property(e => e.BillDispatchReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Dispatch Received Date");
            entity.Property(e => e.BillNumber)
                .HasMaxLength(50)
                .HasColumnName("Bill Number");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(50)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillRetAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Bill_Ret Amount");
            entity.Property(e => e.BillRetBsRemark)
                .HasMaxLength(300)
                .HasColumnName("Bill_Ret BS Remark");
            entity.Property(e => e.BillRetChangesDate)
                .HasMaxLength(10)
                .HasColumnName("Bill_Ret Changes Date");
            entity.Property(e => e.BillRetCustomerRemark)
                .HasMaxLength(500)
                .HasColumnName("Bill_Ret Customer Remark");
            entity.Property(e => e.BillRetDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Bill_Ret Dispatch Date");
            entity.Property(e => e.BillingAdvCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Billing Adv Completed By");
            entity.Property(e => e.BillingAdvCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Adv Completed Date");
            entity.Property(e => e.BillingDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Dispatch Date");
            entity.Property(e => e.BillingInstruction).HasColumnName("Billing Instruction");
            entity.Property(e => e.BillingScrutinyCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Billing Scrutiny Completed By");
            entity.Property(e => e.BillingScrutinyCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Scrutiny Completed Date");
            entity.Property(e => e.BillingScrutinyReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Billing Scrutiny Received By");
            entity.Property(e => e.BillingScrutinyReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Scrutiny Received Date");
            entity.Property(e => e.BillingStatus)
                .HasMaxLength(100)
                .HasColumnName("Billing Status");
            entity.Property(e => e.BillingStatusRemark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Billing Status Remark");
            entity.Property(e => e.BoeDate)
                .HasMaxLength(10)
                .HasColumnName("BOE Date");
            entity.Property(e => e.BoeNo)
                .HasMaxLength(50)
                .HasColumnName("BOE No");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Challan Date");
            entity.Property(e => e.ChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Challan No");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRemark)
                .HasMaxLength(200)
                .HasColumnName("Checklist Remark");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.ChkAuthorRemark)
                .HasMaxLength(200)
                .HasColumnName("Chk Author Remark");
            entity.Property(e => e.ChkAuthorisedBy)
                .HasMaxLength(50)
                .HasColumnName("Chk Authorised By");
            entity.Property(e => e.ChkAuthorisedDate)
                .HasMaxLength(10)
                .HasColumnName("Chk Authorised Date");
            entity.Property(e => e.ChkRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Chk Requested By");
            entity.Property(e => e.ChkRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Chk Requested Date");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsoildatedJobno)
                .HasMaxLength(50)
                .HasColumnName("Consoildated Jobno");
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CourierName)
                .HasMaxLength(100)
                .HasColumnName("Courier Name");
            entity.Property(e => e.CustRefNo)
                .HasMaxLength(100)
                .HasColumnName("Cust Ref No");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(100)
                .HasColumnName("Customer Name");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Delivered Date");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(400)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchDocketNo)
                .HasMaxLength(100)
                .HasColumnName("Dispatch Docket No");
            entity.Property(e => e.DispatchType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Dispatch Type");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Blank Cheque Date");
            entity.Property(e => e.DoBlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("DO Blank Cheque No");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocReceivedName)
                .HasMaxLength(100)
                .HasColumnName("Doc Received Name");
            entity.Property(e => e.DocumentDeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Document Delivery Date");
            entity.Property(e => e.DocumentsCarryingPersonName)
                .HasMaxLength(100)
                .HasColumnName("Documents Carrying Person Name");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DocumentsReceivedPersonName)
                .HasMaxLength(100)
                .HasColumnName("Documents Received Person Name");
            entity.Property(e => e.DraftCheckCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("draft Check Completed By");
            entity.Property(e => e.DraftCheckCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Check Completed Date");
            entity.Property(e => e.DraftCheckReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("draft Check Received BY");
            entity.Property(e => e.DraftCheckReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Check Received Date");
            entity.Property(e => e.DraftCheckTickCross)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Draft Check Tick/Cross");
            entity.Property(e => e.DraftInvoDate)
                .HasColumnType("datetime")
                .HasColumnName("Draft InvoDate");
            entity.Property(e => e.DraftInvoNo)
                .HasMaxLength(50)
                .HasColumnName("Draft InvoNo");
            entity.Property(e => e.DraftInvoiceCompletedBy)
                .HasMaxLength(400)
                .HasColumnName("draft Invoice Completed By");
            entity.Property(e => e.DraftInvoiceCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Invoice Completed Date");
            entity.Property(e => e.DraftInvoiceReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("draft Invoice Received By");
            entity.Property(e => e.DraftInvoiceReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Invoice Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Paid");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Payment Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.EtaDate)
                .HasMaxLength(10)
                .HasColumnName("ETA Date");
            entity.Property(e => e.ExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Examination Date");
            entity.Property(e => e.FinalCheckCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Final Check Completed By");
            entity.Property(e => e.FinalCheckCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Check Completed Date");
            entity.Property(e => e.FinalCheckReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Final Check Received By");
            entity.Property(e => e.FinalCheckReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Check Received Date");
            entity.Property(e => e.FinalCheckTickCross)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Final Check Tick/Cross");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinalTypeCompletedBy)
                .HasMaxLength(400)
                .HasColumnName("Final Type Completed By");
            entity.Property(e => e.FinalTypeCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Type Completed Date");
            entity.Property(e => e.FinalTypeInvoDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Type InvoDate");
            entity.Property(e => e.FinalTypeInvoNo)
                .HasMaxLength(50)
                .HasColumnName("Final Type InvoNo");
            entity.Property(e => e.FinalTypeReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Final Type Received By");
            entity.Property(e => e.FinalTypeReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Type Received Date");
            entity.Property(e => e.FinePenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Fine Penalty Amount");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.FollouwupRemark)
                .HasMaxLength(100)
                .HasColumnName("Follouwup remark");
            entity.Property(e => e.FollowupDate).HasColumnType("datetime");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FreightJobNo)
                .HasMaxLength(50)
                .HasColumnName("Freight Job No");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrDcType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("LR/DC Type");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MasterInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.MasterInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.ModeOfBe)
                .HasMaxLength(50)
                .HasColumnName("Mode Of BE");
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfContainer).HasColumnName("No Of Container");
            entity.Property(e => e.NoOfFclContainer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No Of FCL Container");
            entity.Property(e => e.NoOfLclContainer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No Of LCL Container");
            entity.Property(e => e.NoOfPackages).HasColumnName("No Of Packages");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NocRefDate)
                .HasMaxLength(10)
                .HasColumnName("NOC Ref Date");
            entity.Property(e => e.NocRefNo)
                .HasMaxLength(50)
                .HasColumnName("NOC Ref No");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PassingDate)
                .HasMaxLength(10)
                .HasColumnName("Passing Date");
            entity.Property(e => e.PassingQuery).HasColumnName("Passing Query");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .HasColumnName("Payment Type");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PcaToCustomer)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PCA To Customer");
            entity.Property(e => e.PenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Penalty Amount");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.PreAlertDate1)
                .HasMaxLength(10)
                .HasColumnName("Pre Alert Date");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.QueryDate)
                .HasMaxLength(10)
                .HasColumnName("Query Date");
            entity.Property(e => e.RejectReason)
                .HasMaxLength(50)
                .HasColumnName("Reject Reason");
            entity.Property(e => e.RejectedBy)
                .HasMaxLength(50)
                .HasColumnName("Rejected By");
            entity.Property(e => e.RejectedDate)
                .HasColumnType("datetime")
                .HasColumnName("Rejected Date");
            entity.Property(e => e.RejectedStage)
                .HasMaxLength(100)
                .HasColumnName("Rejected Stage");
            entity.Property(e => e.RejectionCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Rejection Completed By");
            entity.Property(e => e.RejectionCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Rejection Completed Date");
            entity.Property(e => e.ResolveQueryDate)
                .HasMaxLength(10)
                .HasColumnName("Resolve Query Date");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.Transporter).HasMaxLength(100);
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwJobDetailInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetailInvoice");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BcdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BCD Amount");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BeMode)
                .HasMaxLength(20)
                .HasColumnName("BE Mode");
            entity.Property(e => e.BillDispatchCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Dispatch Completed Date");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillingAdvCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Adv Completed Date");
            entity.Property(e => e.BillingDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Dispatch Date");
            entity.Property(e => e.BillingInstruction).HasColumnName("Billing Instruction");
            entity.Property(e => e.BillingScrutinyCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Scrutiny Completed Date");
            entity.Property(e => e.BillingStatus)
                .HasMaxLength(100)
                .HasColumnName("Billing Status");
            entity.Property(e => e.BillingStatusRemark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Billing Status Remark");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRemark)
                .HasMaxLength(200)
                .HasColumnName("Checklist Audit Remark");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistRequestRemark)
                .HasMaxLength(200)
                .HasColumnName("Checklist Request Remark");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsolDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Consol Do Process Date");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CountryOfOrigin)
                .HasMaxLength(50)
                .HasColumnName("Country Of Origin");
            entity.Property(e => e.CourierName)
                .HasMaxLength(100)
                .HasColumnName("Courier Name");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(20)
                .HasColumnName("Current Queue");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Delivered Date");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(400)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchDocketNo)
                .HasMaxLength(100)
                .HasColumnName("Dispatch Docket No");
            entity.Property(e => e.DispatchType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Dispatch Type");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Blank Cheque Date");
            entity.Property(e => e.DoBlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("DO Blank Cheque No");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoPlanningRemark)
                .HasMaxLength(500)
                .HasColumnName("DO Planning Remark");
            entity.Property(e => e.DoRemark)
                .HasMaxLength(200)
                .HasColumnName("DO Remark");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocumentsCarryingPersonName)
                .HasMaxLength(100)
                .HasColumnName("Documents Carrying Person Name");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DocumentsReceivedPersonName)
                .HasMaxLength(100)
                .HasColumnName("Documents Received Person Name");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyDebitAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Debit Amount");
            entity.Property(e => e.DutyFineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Fine Amount");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Paid");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyPenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Penalty Amount");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExchangeRate)
                .HasMaxLength(50)
                .HasColumnName("Exchange Rate");
            entity.Property(e => e.FinalCheckCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Check Completed Date");
            entity.Property(e => e.FinalDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Final Do Process Date");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("FirstCheck Status");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IecNo)
                .HasMaxLength(20)
                .HasColumnName("IEC NO");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Update Date");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceFreightAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Freight Amount");
            entity.Property(e => e.InvoiceFreightCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Freight Currency");
            entity.Property(e => e.InvoiceInsuranceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Insurance Currency");
            entity.Property(e => e.InvoiceInsuranceExRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Invoice Insurance ExRate");
            entity.Property(e => e.InvoiceInsuranceRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Insurance Rate");
            entity.Property(e => e.InvoiceMiscAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Misc Amount");
            entity.Property(e => e.InvoiceMiscCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Misc Currency");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.Kam)
                .HasMaxLength(50)
                .HasColumnName("KAM");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MasterInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.MasterInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OocFrom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OOC From");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortCode)
                .HasMaxLength(20)
                .HasColumnName("Port Code");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.PriorBe)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Prior BE");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SocialSurchargeAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Social Surcharge Amount");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.SumOfLcl).HasColumnName("SUM OF LCL");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwJobDetailLgnew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetail_LGNew");

            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate).HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BoeType1)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.Boetype).HasColumnName("BOEType");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.Cthno)
                .HasMaxLength(50)
                .HasColumnName("CTHNO");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(400)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType1)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExchangeRate)
                .HasMaxLength(50)
                .HasColumnName("Exchange Rate");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate).HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MblMawblDate).HasColumnName("MBL MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NoOfPkgs).HasColumnName("No  Of Pkgs");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OocFrom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OOC From");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS Non RMS");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.WarehouseContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Warehouse Container No");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwJobDetailLgnewDel>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetail_LGNew_Del");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate).HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillingStatus)
                .HasMaxLength(100)
                .HasColumnName("Billing Status");
            entity.Property(e => e.BillingStatusRemark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Billing Status Remark");
            entity.Property(e => e.BoeType1)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.Boetype).HasColumnName("BOEType");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.Cthno)
                .HasMaxLength(50)
                .HasColumnName("CTHNO");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(400)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType1)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Blank Cheque Date");
            entity.Property(e => e.DoBlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("DO Blank Cheque No");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyFineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Fine Amount");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyPenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Penalty Amount");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExchangeRate)
                .HasMaxLength(50)
                .HasColumnName("Exchange Rate");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinePenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Fine Penalty Amount");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate).HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MblMawblDate).HasColumnName("MBL MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No  Of Pkgs");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OocFrom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OOC From");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Warehouse Container No");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwJobDetailMultiRow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetailMultiRow");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.AuthorRemark)
                .HasMaxLength(200)
                .HasColumnName("Author Remark");
            entity.Property(e => e.AuthorisedBy)
                .HasMaxLength(50)
                .HasColumnName("Authorised By");
            entity.Property(e => e.AuthorisedDate)
                .HasMaxLength(10)
                .HasColumnName("Authorised Date");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BcdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BCD Amount");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry No.");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillableNoBillable)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Billable/No Billable");
            entity.Property(e => e.BlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("Blank Cheque Date");
            entity.Property(e => e.BlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("Blank Cheque No");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondSubmitted)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Bond Submitted");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.CheckListForwardDate)
                .HasMaxLength(10)
                .HasColumnName("Check List Forward Date");
            entity.Property(e => e.CheckingDate)
                .HasMaxLength(10)
                .HasColumnName("Checking Date");
            entity.Property(e => e.ChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Approve Date");
            entity.Property(e => e.ChecklistDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.ChequeDate)
                .HasMaxLength(10)
                .HasColumnName("Cheque Date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(100)
                .HasColumnName("Cheque No");
            entity.Property(e => e.CompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Completed Date");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Consol Do Process Date");
            entity.Property(e => e.ConsoleDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CountryOfOrigin)
                .HasMaxLength(20)
                .HasColumnName("Country Of Origin");
            entity.Property(e => e.CthNo)
                .HasMaxLength(50)
                .HasColumnName("CTH No");
            entity.Property(e => e.CurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Current Status");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DdChallanDate)
                .HasMaxLength(10)
                .HasColumnName("DD/Challan Date");
            entity.Property(e => e.DdChallanNo)
                .HasMaxLength(50)
                .HasColumnName("DD/Challan No");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(200)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DraftInvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Draft Invoice Date");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyDebitAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Debit Amount");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Paid");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty PaymentType");
            entity.Property(e => e.DutyPaymentType1)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExpenseAmount).HasColumnName("Expense Amount");
            entity.Property(e => e.FfName)
                .HasMaxLength(100)
                .HasColumnName("FF Name");
            entity.Property(e => e.FinalDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Final Do Process Date");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinalTypingDate)
                .HasMaxLength(10)
                .HasColumnName("Final Typing Date");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.GenerlisingDate)
                .HasMaxLength(10)
                .HasColumnName("Generlising Date");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawbDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWB Date");
            entity.Property(e => e.HblHawbNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWB No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IecNo)
                .HasMaxLength(20)
                .HasColumnName("IEC NO");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgstAssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Assessable Value");
            entity.Property(e => e.IncoTerms).HasMaxLength(50);
            entity.Property(e => e.InvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Amount");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(200)
                .HasColumnName("Invoice Number");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.LrDate).HasColumnName("LR Date");
            entity.Property(e => e.LrNo).HasColumnName("LR No");
            entity.Property(e => e.MblMawbDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWB Date");
            entity.Property(e => e.MblMawbNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWB No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NocDate)
                .HasMaxLength(10)
                .HasColumnName("Noc Date");
            entity.Property(e => e.NocNumber)
                .HasMaxLength(50)
                .HasColumnName("Noc Number");
            entity.Property(e => e.OblReceivedDate).HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OocFrom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OOC From");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.OutOfChargeDate1).HasColumnName("OutOfChargeDate");
            entity.Property(e => e.PaidTo)
                .HasMaxLength(100)
                .HasColumnName("Paid To");
            entity.Property(e => e.PassingRemark)
                .HasMaxLength(400)
                .HasColumnName("Passing Remark");
            entity.Property(e => e.PayeeName)
                .HasMaxLength(100)
                .HasColumnName("Payee Name");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .HasColumnName("Payment Type");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("Pickup Person Name");
            entity.Property(e => e.PortCode)
                .HasMaxLength(20)
                .HasColumnName("Port Code");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.Priority).HasMaxLength(50);
            entity.Property(e => e.ProductAssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Assessable Value");
            entity.Property(e => e.ProductDescription)
                .HasMaxLength(400)
                .HasColumnName("Product Description");
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.QueryDate)
                .HasMaxLength(10)
                .HasColumnName("Query Date");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RdPercentage)
                .HasMaxLength(50)
                .HasColumnName("RD Percentage");
            entity.Property(e => e.ReceiptAmount)
                .HasMaxLength(100)
                .HasColumnName("Receipt Amount");
            entity.Property(e => e.ReceiptDate)
                .HasMaxLength(10)
                .HasColumnName("Receipt Date");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Receipt No");
            entity.Property(e => e.ReceiptType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Receipt Type");
            entity.Property(e => e.RequestRemark)
                .HasMaxLength(200)
                .HasColumnName("Request Remark");
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Requested By");
            entity.Property(e => e.RequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Requested Date");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate).HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo).HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceType).HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.ScrutinyStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Scrutiny Status");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShipmentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Shipment Type");
            entity.Property(e => e.ShippingLine)
                .HasMaxLength(100)
                .HasColumnName("Shipping Line");
            entity.Property(e => e.SocialSurchargeAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Social Surcharge Amount");
            entity.Property(e => e.StatusHistory)
                .HasMaxLength(4000)
                .HasColumnName("Status History");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransitType)
                .HasMaxLength(50)
                .HasColumnName("Transit Type");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.Vessel).HasMaxLength(100);
        });

        modelBuilder.Entity<VwJobDetailTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobDetail_Trans");

            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(50)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(200)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.WarehouseContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Warehouse Container No");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwReportJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReportJob");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(50)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillingStatus)
                .HasMaxLength(100)
                .HasColumnName("Billing Status");
            entity.Property(e => e.BillingStatusRemark)
                .HasMaxLength(400)
                .HasColumnName("Billing Status Remark");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsolDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Consol Do Process Date");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CthNo)
                .HasMaxLength(50)
                .HasColumnName("CTH No");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(200)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Paid");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExchangeRate)
                .HasMaxLength(50)
                .HasColumnName("Exchange Rate");
            entity.Property(e => e.FinalDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Final Do Process Date");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinePenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Fine Penalty Amount");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceProductDescription)
                .HasMaxLength(800)
                .HasColumnName("Invoice Product Description");
            entity.Property(e => e.InvoiceQuantity)
                .HasMaxLength(50)
                .HasColumnName("Invoice Quantity");
            entity.Property(e => e.InvoiceUnitOfProduct)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Of Product");
            entity.Property(e => e.InvoiceUnitPrice)
                .HasMaxLength(50)
                .HasColumnName("Invoice Unit Price");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.SumOfLcl).HasColumnName("SUM OF LCL");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<VwSezjobDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSEZJobDetail");

            entity.Property(e => e.AssesableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assesable Value");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiBranchId)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BeDate).HasColumnName("BE Date");
            entity.Property(e => e.BeNo)
                .HasMaxLength(50)
                .HasColumnName("BE No");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(100)
                .HasColumnName("BS Job No");
            entity.Property(e => e.BuyerName)
                .HasMaxLength(400)
                .HasColumnName("Buyer Name");
            entity.Property(e => e.ChaCode)
                .HasMaxLength(100)
                .HasColumnName("CHA Code");
            entity.Property(e => e.CifValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CIF Value");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Container No");
            entity.Property(e => e.ContainerSize)
                .HasMaxLength(50)
                .HasColumnName("Container Size");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(50)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountryName)
                .HasMaxLength(300)
                .HasColumnName("Country Name");
            entity.Property(e => e.Cth)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CTH");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.Destination).HasMaxLength(300);
            entity.Property(e => e.DivisionName)
                .HasMaxLength(100)
                .HasColumnName("Division Name");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.ExRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EX Rate");
            entity.Property(e => e.FileSentBilling).HasColumnName("File Sent Billing");
            entity.Property(e => e.GrossWeight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Gross Weight");
            entity.Property(e => e.GrossWtUnit)
                .HasMaxLength(200)
                .HasColumnName("Gross Wt Unit");
            entity.Property(e => e.InvoiceDate).HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(400)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate).HasColumnName("Inward Date");
            entity.Property(e => e.ItemPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Item Price");
            entity.Property(e => e.JobCreatedBy)
                .HasMaxLength(50)
                .HasColumnName("Job Created By");
            entity.Property(e => e.JobCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Job Created Date");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NoOfPackages).HasColumnName("No Of Packages");
            entity.Property(e => e.NoOfVehicles).HasColumnName("No Of Vehicles");
            entity.Property(e => e.OutwardDate1).HasColumnName("Outward Date");
            entity.Property(e => e.PcdFrDahej).HasColumnName("PCD FrDahej");
            entity.Property(e => e.PcdSentClient).HasColumnName("PCD Sent Client");
            entity.Property(e => e.Person).HasMaxLength(200);
            entity.Property(e => e.PlantName)
                .HasMaxLength(100)
                .HasColumnName("Plant Name");
            entity.Property(e => e.ProductValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Value");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RemainingQuantity)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Remaining Quantity");
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.RequestId)
                .HasMaxLength(50)
                .HasColumnName("Request ID");
            entity.Property(e => e.SezType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SEZ Type");
        });

        modelBuilder.Entity<VwWabTecDsrReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_WabTec_DSR_Report");

            entity.Property(e => e.AgencyInvdate).HasColumnName("AgencyINVDate");
            entity.Property(e => e.AssessableValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bcdamt)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("BCDAmt");
            entity.Property(e => e.BetypeName)
                .HasMaxLength(100)
                .HasColumnName("BETypeName");
            entity.Property(e => e.Boedate)
                .HasMaxLength(4000)
                .HasColumnName("BOEDATE");
            entity.Property(e => e.Boeno)
                .HasMaxLength(10)
                .HasColumnName("BOENo");
            entity.Property(e => e.BondDt).HasMaxLength(4000);
            entity.Property(e => e.BondNo).HasMaxLength(200);
            entity.Property(e => e.BondType).HasMaxLength(50);
            entity.Property(e => e.Cbm2Wt)
                .HasMaxLength(200)
                .HasColumnName("CBM 2 WT");
            entity.Property(e => e.CbmChgWt)
                .HasMaxLength(200)
                .HasColumnName("CBM CHG WT");
            entity.Property(e => e.CdrUploadDt)
                .HasMaxLength(200)
                .HasColumnName("CDR upload Dt");
            entity.Property(e => e.Cfsdate)
                .HasMaxLength(4000)
                .HasColumnName("CFSDate");
            entity.Property(e => e.Cfsname)
                .HasMaxLength(100)
                .HasColumnName("CFSName");
            entity.Property(e => e.ChaInvoiceStatus)
                .HasMaxLength(200)
                .HasColumnName("CHA Invoice Status");
            entity.Property(e => e.ChallanDt).HasMaxLength(4000);
            entity.Property(e => e.ChallanNo).HasMaxLength(50);
            entity.Property(e => e.ChecklistApproveDt).HasMaxLength(4000);
            entity.Property(e => e.ChecklistRequestDt).HasMaxLength(4000);
            entity.Property(e => e.ClearancePoNo)
                .HasMaxLength(200)
                .HasColumnName("Clearance PO No");
            entity.Property(e => e.ClearanceTat).HasColumnName("ClearanceTAT");
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.CountryOfExport).HasMaxLength(50);
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.CustName).HasMaxLength(100);
            entity.Property(e => e.CustomsHolidayInBetween)
                .HasMaxLength(200)
                .HasColumnName("Customs Holiday in Between");
            entity.Property(e => e.DailyProgress).HasMaxLength(4000);
            entity.Property(e => e.DeliveryPoint).HasMaxLength(200);
            entity.Property(e => e.DivisionName).HasMaxLength(100);
            entity.Property(e => e.Dt).HasMaxLength(4000);
            entity.Property(e => e.DutyAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DutyPaidDt).HasMaxLength(4000);
            entity.Property(e => e.DutyReqDt).HasMaxLength(4000);
            entity.Property(e => e.Etadate)
                .HasColumnType("datetime")
                .HasColumnName("ETADate");
            entity.Property(e => e.Etd)
                .HasMaxLength(200)
                .HasColumnName("ETD");
            entity.Property(e => e.ExaminDt).HasMaxLength(4000);
            entity.Property(e => e.ExchangeRate).HasMaxLength(50);
            entity.Property(e => e.Ffname)
                .HasMaxLength(100)
                .HasColumnName("FFName");
            entity.Property(e => e.GrossWt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GrossWT");
            entity.Property(e => e.HaltingDays)
                .HasMaxLength(200)
                .HasColumnName("Halting Days");
            entity.Property(e => e.Hawbno)
                .HasMaxLength(100)
                .HasColumnName("HAWBNo");
            entity.Property(e => e.Igmdate)
                .HasMaxLength(4000)
                .HasColumnName("IGMDate");
            entity.Property(e => e.Igmno)
                .HasMaxLength(50)
                .HasColumnName("IGMNo");
            entity.Property(e => e.Igstamount)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("IGSTAmount");
            entity.Property(e => e.ImportCategory)
                .HasMaxLength(200)
                .HasColumnName("Import Category");
            entity.Property(e => e.ImporterName).HasMaxLength(100);
            entity.Property(e => e.IncoTerms).HasMaxLength(100);
            entity.Property(e => e.InterestAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoiceFreightAmount).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.InvoiceMiscAmount).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.InwardDate).HasMaxLength(4000);
            entity.Property(e => e.JobRefNo).HasMaxLength(50);
            entity.Property(e => e.Liner).HasMaxLength(100);
            entity.Property(e => e.Lrno)
                .HasMaxLength(100)
                .HasColumnName("LRNo");
            entity.Property(e => e.Mawbno)
                .HasMaxLength(100)
                .HasColumnName("MAWBNo");
            entity.Property(e => e.Month)
                .HasMaxLength(4000)
                .HasColumnName("month");
            entity.Property(e => e.Oocdate)
                .HasMaxLength(4000)
                .HasColumnName("OOCDate");
            entity.Property(e => e.PenaltyAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Port).HasMaxLength(100);
            entity.Property(e => e.PortOfDestination).HasMaxLength(100);
            entity.Property(e => e.PortOfLoading).HasMaxLength(100);
            entity.Property(e => e.ReceiptedChargesPoNo)
                .HasMaxLength(200)
                .HasColumnName("Receipted Charges PO No");
            entity.Property(e => e.Reference).HasMaxLength(200);
            entity.Property(e => e.ReportMode).HasMaxLength(50);
            entity.Property(e => e.ReportingDt).HasMaxLength(4000);
            entity.Property(e => e.RimInvdate).HasColumnName("RimINVDate");
            entity.Property(e => e.RmsnonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMSNonRMS");
            entity.Property(e => e.SchemeType).HasMaxLength(50);
            entity.Property(e => e.ShipmentClearedDt).HasMaxLength(4000);
            entity.Property(e => e.ShipmentReadyDt).HasMaxLength(4000);
            entity.Property(e => e.StampDutyAmount)
                .HasMaxLength(200)
                .HasColumnName("Stamp Duty Amount");
            entity.Property(e => e.StatusName).HasMaxLength(100);
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.Swsamt)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SWSAmt");
            entity.Property(e => e.TotCustomeDuty).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TransMode).HasMaxLength(50);
            entity.Property(e => e.TypeOfvehicle)
                .HasMaxLength(50)
                .HasColumnName("TypeOFVehicle");
            entity.Property(e => e.VesselName).HasMaxLength(100);
            entity.Property(e => e.WeightForLr)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("WeightForLR");
            entity.Property(e => e.Whdetail)
                .HasMaxLength(100)
                .HasColumnName("WHDetail");
        });

        modelBuilder.Entity<VwjobDetailforBillingTurnaround>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWJobDetailforBillingTurnaround");

            entity.Property(e => e.AdcExamDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Exam Date");
            entity.Property(e => e.AdcNocDate)
                .HasMaxLength(10)
                .HasColumnName("Adc Noc Date");
            entity.Property(e => e.AdcWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("ADC Withdrawn Date");
            entity.Property(e => e.AppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Appraising Date");
            entity.Property(e => e.AssessableValue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Assessable Value");
            entity.Property(e => e.Ata)
                .HasMaxLength(10)
                .HasColumnName("ATA");
            entity.Property(e => e.BDeliveryStatus).HasColumnName("bDeliveryStatus");
            entity.Property(e => e.BabajiBranch)
                .HasMaxLength(100)
                .HasColumnName("Babaji Branch");
            entity.Property(e => e.BabajiChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Babaji Challan Date");
            entity.Property(e => e.BabajiChallanNo)
                .HasMaxLength(100)
                .HasColumnName("Babaji Challan No");
            entity.Property(e => e.BcdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BCD Amount");
            entity.Property(e => e.BeGroup)
                .HasMaxLength(100)
                .HasColumnName("BE Group");
            entity.Property(e => e.BeMode)
                .HasMaxLength(20)
                .HasColumnName("BE Mode");
            entity.Property(e => e.BillDispatchCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Bill Dispatch Completed By");
            entity.Property(e => e.BillDispatchCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Dispatch Completed Date");
            entity.Property(e => e.BillDispatchReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Bill Dispatch Received By");
            entity.Property(e => e.BillDispatchReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Bill Dispatch Received Date");
            entity.Property(e => e.BillOfEntryDate)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry Date");
            entity.Property(e => e.BillOfEntryNo)
                .HasMaxLength(10)
                .HasColumnName("Bill of Entry No");
            entity.Property(e => e.BillOfEntryPassingDate)
                .HasMaxLength(10)
                .HasColumnName("Bill Of Entry Passing Date");
            entity.Property(e => e.BillingAdvCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Billing Adv Completed By");
            entity.Property(e => e.BillingAdvCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Adv Completed Date");
            entity.Property(e => e.BillingDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Billing Dispatch Date");
            entity.Property(e => e.BillingInstruction).HasColumnName("Billing Instruction");
            entity.Property(e => e.BillingScrutinyCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Billing Scrutiny Completed By");
            entity.Property(e => e.BillingScrutinyCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Scrutiny Completed Date");
            entity.Property(e => e.BillingScrutinyReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Billing Scrutiny Received By");
            entity.Property(e => e.BillingScrutinyReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Billing Scrutiny Received Date");
            entity.Property(e => e.BillingStatus)
                .HasMaxLength(100)
                .HasColumnName("Billing Status");
            entity.Property(e => e.BillingStatusRemark)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Billing Status Remark");
            entity.Property(e => e.BoeType)
                .HasMaxLength(100)
                .HasColumnName("BOE Type");
            entity.Property(e => e.BondCompletedDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Completed Date");
            entity.Property(e => e.BondNocDate)
                .HasMaxLength(10)
                .HasColumnName("Bond Noc Date");
            entity.Property(e => e.BondNocNumber)
                .HasMaxLength(50)
                .HasColumnName("Bond Noc Number");
            entity.Property(e => e.BsJobNo)
                .HasMaxLength(50)
                .HasColumnName("BS Job No");
            entity.Property(e => e.CargoDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Delivered Date");
            entity.Property(e => e.CargoExaminationDate)
                .HasMaxLength(10)
                .HasColumnName("Cargo Examination Date");
            entity.Property(e => e.CargoMovedTo)
                .HasMaxLength(50)
                .HasColumnName("Cargo Moved To");
            entity.Property(e => e.CargoReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Cargo Received By");
            entity.Property(e => e.CeInspectionDate)
                .HasMaxLength(10)
                .HasColumnName("CE Inspection Date");
            entity.Property(e => e.CfsDate)
                .HasMaxLength(10)
                .HasColumnName("CFS Date");
            entity.Property(e => e.CfsName)
                .HasMaxLength(100)
                .HasColumnName("CFS Name");
            entity.Property(e => e.ChecklistAuditApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Approved By");
            entity.Property(e => e.ChecklistAuditDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Date");
            entity.Property(e => e.ChecklistAuditRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Checklist Audit Requested By");
            entity.Property(e => e.ChecklistAuditRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Audit Requested Date");
            entity.Property(e => e.ChecklistRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Checklist Request Date");
            entity.Property(e => e.ChecklistStatus)
                .HasMaxLength(50)
                .HasColumnName("Checklist Status");
            entity.Property(e => e.Consignee).HasMaxLength(100);
            entity.Property(e => e.ConsoildatedJobno)
                .HasMaxLength(50)
                .HasColumnName("Consoildated Jobno");
            entity.Property(e => e.ConsolAgent)
                .HasMaxLength(100)
                .HasColumnName("Consol Agent");
            entity.Property(e => e.ConsolDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Consol Do Process Date");
            entity.Property(e => e.ConsoleDoReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Console DO Received Date");
            entity.Property(e => e.ContainerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Container Type");
            entity.Property(e => e.CountOfContainerNo).HasColumnName("Count of Container No");
            entity.Property(e => e.CountryOfOrigin)
                .HasMaxLength(400)
                .HasColumnName("Country Of Origin");
            entity.Property(e => e.CourierName)
                .HasMaxLength(100)
                .HasColumnName("Courier Name");
            entity.Property(e => e.CurrentQueue)
                .HasMaxLength(20)
                .HasColumnName("Current Queue");
            entity.Property(e => e.Customer).HasMaxLength(100);
            entity.Property(e => e.CustomerChecklistApproveDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Approve Date");
            entity.Property(e => e.CustomerChecklistApprovedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Approved By");
            entity.Property(e => e.CustomerChecklistRequestedBy)
                .HasMaxLength(50)
                .HasColumnName("Customer Checklist Requested By");
            entity.Property(e => e.CustomerChecklistRequestedDate)
                .HasMaxLength(10)
                .HasColumnName("Customer Checklist Requested Date");
            entity.Property(e => e.CustomerDivisionBranch)
                .HasMaxLength(100)
                .HasColumnName("Customer Division/Branch");
            entity.Property(e => e.CustomerPlant)
                .HasMaxLength(100)
                .HasColumnName("Customer Plant");
            entity.Property(e => e.CustomerRefNo)
                .HasMaxLength(100)
                .HasColumnName("Customer Ref No");
            entity.Property(e => e.DateOfDispatchFromCfs)
                .HasMaxLength(10)
                .HasColumnName("Date of Dispatch From CFS");
            entity.Property(e => e.DeliverdContainerNo)
                .HasMaxLength(50)
                .HasColumnName("Deliverd Container No");
            entity.Property(e => e.DeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("Delivered Date");
            entity.Property(e => e.DeliveryAddress)
                .HasMaxLength(200)
                .HasColumnName("Delivery Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Date");
            entity.Property(e => e.DeliveryDestination)
                .HasMaxLength(200)
                .HasColumnName("Delivery Destination");
            entity.Property(e => e.DeliveryInstruction)
                .HasMaxLength(200)
                .HasColumnName("Delivery Instruction");
            entity.Property(e => e.DeliveryPlanningDate)
                .HasMaxLength(10)
                .HasColumnName("Delivery Planning Date");
            entity.Property(e => e.DeliveryPoint)
                .HasMaxLength(400)
                .HasColumnName("Delivery Point");
            entity.Property(e => e.DeliveryStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Delivery Status");
            entity.Property(e => e.DeliveryType)
                .HasMaxLength(50)
                .HasColumnName("Delivery Type");
            entity.Property(e => e.DispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Dispatch Date");
            entity.Property(e => e.DispatchDocketNo)
                .HasMaxLength(100)
                .HasColumnName("Dispatch Docket No");
            entity.Property(e => e.DispatchType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Dispatch Type");
            entity.Property(e => e.DispatchUser)
                .HasMaxLength(50)
                .HasColumnName("Dispatch User");
            entity.Property(e => e.DoBlankChequeDate)
                .HasMaxLength(10)
                .HasColumnName("DO Blank Cheque Date");
            entity.Property(e => e.DoBlankChequeNo)
                .HasMaxLength(50)
                .HasColumnName("DO Blank Cheque No");
            entity.Property(e => e.DoBranch)
                .HasMaxLength(100)
                .HasColumnName("DO Branch");
            entity.Property(e => e.DoPaymentType)
                .HasMaxLength(50)
                .HasColumnName("DO Payment Type");
            entity.Property(e => e.DoPickupPersonName)
                .HasMaxLength(50)
                .HasColumnName("DO Pickup Person Name");
            entity.Property(e => e.DoPlanningRemark)
                .HasMaxLength(500)
                .HasColumnName("DO Planning Remark");
            entity.Property(e => e.DoRemark)
                .HasMaxLength(200)
                .HasColumnName("DO Remark");
            entity.Property(e => e.DoStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("DO Status");
            entity.Property(e => e.DoUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("DO Update Date");
            entity.Property(e => e.DoUser)
                .HasMaxLength(50)
                .HasColumnName("DO User");
            entity.Property(e => e.DocumentsCarryingPersonName)
                .HasMaxLength(100)
                .HasColumnName("Documents Carrying Person Name");
            entity.Property(e => e.DocumentsReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Documents Received Date");
            entity.Property(e => e.DocumentsReceivedPersonName)
                .HasMaxLength(100)
                .HasColumnName("Documents Received Person Name");
            entity.Property(e => e.DraftCheckCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("draft Check Completed By");
            entity.Property(e => e.DraftCheckCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Check Completed Date");
            entity.Property(e => e.DraftCheckReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("draft Check Received BY");
            entity.Property(e => e.DraftCheckReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Check Received Date");
            entity.Property(e => e.DraftCheckTickCross)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Draft Check Tick/Cross");
            entity.Property(e => e.DraftInvoDate)
                .HasColumnType("datetime")
                .HasColumnName("Draft InvoDate");
            entity.Property(e => e.DraftInvoNo)
                .HasMaxLength(50)
                .HasColumnName("Draft InvoNo");
            entity.Property(e => e.DraftInvoiceCompletedBy)
                .HasMaxLength(400)
                .HasColumnName("draft Invoice Completed By");
            entity.Property(e => e.DraftInvoiceCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Invoice Completed Date");
            entity.Property(e => e.DraftInvoiceReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("draft Invoice Received By");
            entity.Property(e => e.DraftInvoiceReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("draft Invoice Received Date");
            entity.Property(e => e.DsroutOfchargeDate).HasColumnName("DSROutOFChargeDate");
            entity.Property(e => e.DutyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Amount");
            entity.Property(e => e.DutyChallanDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Challan Date");
            entity.Property(e => e.DutyChallanNo)
                .HasMaxLength(50)
                .HasColumnName("Duty Challan No");
            entity.Property(e => e.DutyDebitAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Debit Amount");
            entity.Property(e => e.DutyFineAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Fine Amount");
            entity.Property(e => e.DutyPaid)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Paid");
            entity.Property(e => e.DutyPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Paid Date");
            entity.Property(e => e.DutyPaymentType)
                .HasMaxLength(50)
                .HasColumnName("Duty Payment Type");
            entity.Property(e => e.DutyPenaltyAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Duty Penalty Amount");
            entity.Property(e => e.DutyRemark)
                .HasMaxLength(200)
                .HasColumnName("Duty Remark");
            entity.Property(e => e.DutyRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Duty Request Date");
            entity.Property(e => e.DutyStatus)
                .HasMaxLength(50)
                .HasColumnName("Duty Status");
            entity.Property(e => e.EmptyContRetrunDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Cont Retrun Date");
            entity.Property(e => e.EmptyValidityDate)
                .HasMaxLength(10)
                .HasColumnName("Empty Validity Date");
            entity.Property(e => e.EmptyYardName)
                .HasMaxLength(100)
                .HasColumnName("Empty Yard Name");
            entity.Property(e => e.Eta)
                .HasMaxLength(10)
                .HasColumnName("ETA");
            entity.Property(e => e.ExchangeRate)
                .HasMaxLength(50)
                .HasColumnName("Exchange Rate");
            entity.Property(e => e.FinalCheckCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Final Check Completed By");
            entity.Property(e => e.FinalCheckCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Check Completed Date");
            entity.Property(e => e.FinalCheckReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Final Check Received By");
            entity.Property(e => e.FinalCheckReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Check Received Date");
            entity.Property(e => e.FinalCheckTickCross)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Final Check Tick/Cross");
            entity.Property(e => e.FinalDoProcessDate)
                .HasMaxLength(10)
                .HasColumnName("Final Do Process Date");
            entity.Property(e => e.FinalDoReceived)
                .HasMaxLength(10)
                .HasColumnName("Final DO Received");
            entity.Property(e => e.FinalTypeCompletedBy)
                .HasMaxLength(400)
                .HasColumnName("Final Type Completed By");
            entity.Property(e => e.FinalTypeCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Type Completed Date");
            entity.Property(e => e.FinalTypeInvoDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Type InvoDate");
            entity.Property(e => e.FinalTypeInvoNo)
                .HasMaxLength(50)
                .HasColumnName("Final Type InvoNo");
            entity.Property(e => e.FinalTypeReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("Final Type Received By");
            entity.Property(e => e.FinalTypeReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Final Type Received Date");
            entity.Property(e => e.FirstAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("First Appraising Date");
            entity.Property(e => e.FirstAssessmentDate)
                .HasMaxLength(10)
                .HasColumnName("First Assessment Date");
            entity.Property(e => e.FirstCheckRequired)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("First Check Required");
            entity.Property(e => e.FirstCheckStatus)
                .HasMaxLength(1)
                .HasColumnName("FirstCheck Status");
            entity.Property(e => e.FollouwupRemark)
                .HasMaxLength(100)
                .HasColumnName("Follouwup remark");
            entity.Property(e => e.Followupdate).HasColumnType("datetime");
            entity.Property(e => e.ForwardAppraisingDate)
                .HasMaxLength(10)
                .HasColumnName("Forward Appraising Date");
            entity.Property(e => e.FrankingAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Franking Amount");
            entity.Property(e => e.FrankingDate)
                .HasMaxLength(10)
                .HasColumnName("Franking Date");
            entity.Property(e => e.FreeDays).HasColumnName("Free Days");
            entity.Property(e => e.FreightJobNo)
                .HasMaxLength(50)
                .HasColumnName("Freight Job No");
            entity.Property(e => e.FundProvisionAmount).HasColumnName("Fund Provision Amount");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross Weight");
            entity.Property(e => e.HblHawblDate)
                .HasMaxLength(10)
                .HasColumnName("HBL/HAWBL Date");
            entity.Property(e => e.HblHawblNo)
                .HasMaxLength(100)
                .HasColumnName("HBL/HAWBL No");
            entity.Property(e => e.HssSellerName)
                .HasMaxLength(100)
                .HasColumnName("HSS Seller Name");
            entity.Property(e => e.IecNo)
                .HasMaxLength(20)
                .HasColumnName("IEC NO");
            entity.Property(e => e.IgmDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Date");
            entity.Property(e => e.IgmDate2)
                .HasMaxLength(10)
                .HasColumnName("IGM Date2");
            entity.Property(e => e.IgmDate3)
                .HasMaxLength(10)
                .HasColumnName("IGM Date3");
            entity.Property(e => e.IgmFollowUpDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Follow Up Date");
            entity.Property(e => e.IgmItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Item");
            entity.Property(e => e.IgmNo)
                .HasMaxLength(50)
                .HasColumnName("IGM No");
            entity.Property(e => e.IgmNo2)
                .HasMaxLength(50)
                .HasColumnName("IGM NO2");
            entity.Property(e => e.IgmNo3)
                .HasMaxLength(50)
                .HasColumnName("IGM NO3");
            entity.Property(e => e.IgmRemark)
                .HasMaxLength(200)
                .HasColumnName("IGM Remark");
            entity.Property(e => e.IgmStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("IGM Status");
            entity.Property(e => e.IgmSubItem)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item");
            entity.Property(e => e.IgmSubItem2)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item2");
            entity.Property(e => e.IgmSubItem3)
                .HasMaxLength(50)
                .HasColumnName("IGM Sub Item3");
            entity.Property(e => e.IgmUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("IGM Update Date");
            entity.Property(e => e.IgmUser)
                .HasMaxLength(50)
                .HasColumnName("IGM User");
            entity.Property(e => e.IgstAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IGST Amount");
            entity.Property(e => e.InbondJob)
                .HasMaxLength(50)
                .HasColumnName("Inbond Job");
            entity.Property(e => e.IncoTerms)
                .HasMaxLength(50)
                .HasColumnName("Inco Terms");
            entity.Property(e => e.InterestAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Interest Amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Currency");
            entity.Property(e => e.InvoiceDate)
                .HasMaxLength(10)
                .HasColumnName("Invoice Date");
            entity.Property(e => e.InvoiceFreightAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Freight Amount");
            entity.Property(e => e.InvoiceFreightCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Freight Currency");
            entity.Property(e => e.InvoiceInsuranceCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Insurance Currency");
            entity.Property(e => e.InvoiceInsuranceExRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Invoice Insurance ExRate");
            entity.Property(e => e.InvoiceInsuranceRate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Insurance Rate");
            entity.Property(e => e.InvoiceMiscAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Invoice Misc Amount");
            entity.Property(e => e.InvoiceMiscCurrency)
                .HasMaxLength(50)
                .HasColumnName("Invoice Misc Currency");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .HasColumnName("Invoice No");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(50)
                .HasColumnName("Invoice Value");
            entity.Property(e => e.InwardDate)
                .HasMaxLength(10)
                .HasColumnName("Inward Date");
            entity.Property(e => e.JobCreatedDate)
                .HasMaxLength(10)
                .HasColumnName("Job Created Date");
            entity.Property(e => e.JobCreationDate)
                .HasMaxLength(10)
                .HasColumnName("Job Creation Date");
            entity.Property(e => e.JobCurrentStatus)
                .HasMaxLength(100)
                .HasColumnName("Job Current Status");
            entity.Property(e => e.JobPriority)
                .HasMaxLength(50)
                .HasColumnName("Job Priority");
            entity.Property(e => e.JobRemark)
                .HasMaxLength(200)
                .HasColumnName("Job Remark");
            entity.Property(e => e.JobType)
                .HasMaxLength(50)
                .HasColumnName("Job Type");
            entity.Property(e => e.JobUser)
                .HasMaxLength(50)
                .HasColumnName("Job User");
            entity.Property(e => e.Kam)
                .HasMaxLength(50)
                .HasColumnName("KAM");
            entity.Property(e => e.LandIgmDate)
                .HasMaxLength(10)
                .HasColumnName("Land IGM Date");
            entity.Property(e => e.LandIgmNo)
                .HasMaxLength(50)
                .HasColumnName("Land IGM No");
            entity.Property(e => e.LastDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("Last Dispatch Date");
            entity.Property(e => e.LrDate)
                .HasMaxLength(10)
                .HasColumnName("LR Date");
            entity.Property(e => e.LrDcType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("LR/DC Type");
            entity.Property(e => e.LrNo)
                .HasMaxLength(100)
                .HasColumnName("LR No");
            entity.Property(e => e.MasterInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.MasterInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.MblMawblDate)
                .HasMaxLength(10)
                .HasColumnName("MBL/MAWBL Date");
            entity.Property(e => e.MblMawblNo)
                .HasMaxLength(100)
                .HasColumnName("MBL/MAWBL No");
            entity.Property(e => e.MeasurementUnit)
                .HasMaxLength(50)
                .HasColumnName("Measurement Unit");
            entity.Property(e => e.Mode).HasMaxLength(50);
            entity.Property(e => e.NClosingDate)
                .HasMaxLength(10)
                .HasColumnName("N Closing Date");
            entity.Property(e => e.NFormDate)
                .HasMaxLength(10)
                .HasColumnName("N Form Date");
            entity.Property(e => e.NFormNo)
                .HasMaxLength(50)
                .HasColumnName("N Form No");
            entity.Property(e => e.NoOfPkgs).HasColumnName("No. Of Pkgs");
            entity.Property(e => e.NotingUser)
                .HasMaxLength(50)
                .HasColumnName("Noting User");
            entity.Property(e => e.OblReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("OBL Received Date");
            entity.Property(e => e.OctroiAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Octroi Amount");
            entity.Property(e => e.OctroiPaidDate)
                .HasMaxLength(10)
                .HasColumnName("Octroi Paid Date");
            entity.Property(e => e.OctroiReceiptNo)
                .HasMaxLength(100)
                .HasColumnName("Octroi Receipt No");
            entity.Property(e => e.OocFrom)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("OOC From");
            entity.Property(e => e.OutOfChargeDate)
                .HasMaxLength(10)
                .HasColumnName("Out of Charge Date");
            entity.Property(e => e.PcaBackOfficeDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Back Office Date");
            entity.Property(e => e.PcaCarryingPerson)
                .HasMaxLength(100)
                .HasColumnName("PCA Carrying Person");
            entity.Property(e => e.PcaCourierName)
                .HasMaxLength(100)
                .HasColumnName("PCA Courier Name");
            entity.Property(e => e.PcaDeliveredDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Delivered Date");
            entity.Property(e => e.PcaDeliveryType)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("PCA Delivery Type");
            entity.Property(e => e.PcaDispatchDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Date");
            entity.Property(e => e.PcaDispatchFor)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("PCA Dispatch For");
            entity.Property(e => e.PcaDispatchUpdateDate)
                .HasMaxLength(10)
                .HasColumnName("PCA Dispatch Update Date");
            entity.Property(e => e.PcaDocketNo)
                .HasMaxLength(100)
                .HasColumnName("PCA Docket No");
            entity.Property(e => e.PcaDocumentReceivedBy)
                .HasMaxLength(100)
                .HasColumnName("PCA Document Received By");
            entity.Property(e => e.PhoAppointDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Appoint Date");
            entity.Property(e => e.PhoLabTestDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Lab Test Date");
            entity.Property(e => e.PhoPaymentDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Payment Date");
            entity.Property(e => e.PhoReportDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Report Date");
            entity.Property(e => e.PhoScrutinyDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Scrutiny Date");
            entity.Property(e => e.PhoSubmitDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Submit Date");
            entity.Property(e => e.PhoWithdrawnDate)
                .HasMaxLength(10)
                .HasColumnName("PHO Withdrawn Date");
            entity.Property(e => e.PortCode)
                .HasMaxLength(20)
                .HasColumnName("Port Code");
            entity.Property(e => e.PortOfDischarge)
                .HasMaxLength(100)
                .HasColumnName("Port of Discharge");
            entity.Property(e => e.PortOfLoading)
                .HasMaxLength(100)
                .HasColumnName("Port Of Loading");
            entity.Property(e => e.PreAlertDate)
                .HasMaxLength(10)
                .HasColumnName("PreAlert Date");
            entity.Property(e => e.PriorBe)
                .HasMaxLength(10)
                .HasColumnName("Prior BE");
            entity.Property(e => e.ProgressDate)
                .HasColumnType("datetime")
                .HasColumnName("Progress Date");
            entity.Property(e => e.ProgressReport)
                .HasMaxLength(4000)
                .HasColumnName("Progress Report");
            entity.Property(e => e.RdAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RD Amount");
            entity.Property(e => e.RejectReason)
                .HasMaxLength(50)
                .HasColumnName("Reject Reason");
            entity.Property(e => e.RejectedBy)
                .HasMaxLength(50)
                .HasColumnName("Rejected By");
            entity.Property(e => e.RejectedDate)
                .HasColumnType("datetime")
                .HasColumnName("Rejected Date");
            entity.Property(e => e.RejectedStage)
                .HasMaxLength(100)
                .HasColumnName("Rejected Stage");
            entity.Property(e => e.RejectionCompletedBy)
                .HasMaxLength(50)
                .HasColumnName("Rejection Completed By");
            entity.Property(e => e.RejectionCompletedDate)
                .HasColumnType("datetime")
                .HasColumnName("Rejection Completed Date");
            entity.Property(e => e.RmsNonRms)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("RMS/Non RMS");
            entity.Property(e => e.RoadPermitDate)
                .HasMaxLength(10)
                .HasColumnName("Road Permit Date");
            entity.Property(e => e.RoadPermitNo)
                .HasMaxLength(50)
                .HasColumnName("Road Permit No");
            entity.Property(e => e.SClosingDate)
                .HasMaxLength(10)
                .HasColumnName("S Closing Date");
            entity.Property(e => e.SFormDate)
                .HasMaxLength(10)
                .HasColumnName("S Form Date");
            entity.Property(e => e.SFormNo)
                .HasMaxLength(50)
                .HasColumnName("S Form No");
            entity.Property(e => e.SchemeLicenceNo)
                .HasMaxLength(200)
                .HasColumnName("Scheme/Licence No");
            entity.Property(e => e.SchemeLicenceType)
                .HasMaxLength(100)
                .HasColumnName("Scheme/Licence Type");
            entity.Property(e => e.SecurityDeposit).HasColumnName("Security Deposit");
            entity.Property(e => e.ShippingAirline)
                .HasMaxLength(100)
                .HasColumnName("Shipping/Airline");
            entity.Property(e => e.ShortDescription)
                .HasMaxLength(400)
                .HasColumnName("Short Description");
            entity.Property(e => e.SocialSurchargeAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Social Surcharge Amount");
            entity.Property(e => e.SumOf20).HasColumnName("SUM OF 20\"");
            entity.Property(e => e.SumOf40).HasColumnName("SUM OF 40\"");
            entity.Property(e => e.SumOfLcl).HasColumnName("SUM OF LCL");
            entity.Property(e => e.Supplier).HasMaxLength(100);
            entity.Property(e => e.TermsOfInvoice)
                .HasMaxLength(100)
                .HasColumnName("Terms Of Invoice");
            entity.Property(e => e.TransportationBy)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Transportation By");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(100)
                .HasColumnName("Transporter Name");
            entity.Property(e => e.TruckRequestDate)
                .HasMaxLength(10)
                .HasColumnName("Truck Request Date");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(100)
                .HasColumnName("Vehicle No");
            entity.Property(e => e.VehicleReceivedDate)
                .HasMaxLength(10)
                .HasColumnName("Vehicle Received Date");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("Vehicle Type");
            entity.Property(e => e.VesselFlightName)
                .HasMaxLength(100)
                .HasColumnName("Vessel/Flight Name");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(100)
                .HasColumnName("Warehouse Name");
        });

        modelBuilder.Entity<WaMessageLog>(entity =>
        {
            entity.HasKey(e => e.Lid);

            entity.ToTable("WA_MessageLog");

            entity.Property(e => e.Lid).HasColumnName("lid");
            entity.Property(e => e.AcknowledgeId)
                .HasComment("0 - Not Sent to Server,  1 - Sent To Server,  2 Delivered To Recipient, 3 Read Receipt")
                .HasColumnName("AcknowledgeID");
            entity.Property(e => e.BDel).HasColumnName("bDel");
            entity.Property(e => e.DtDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dtDate");
            entity.Property(e => e.EventTypeId).HasComment("1 - Message, 2 - Acknowledge");
            entity.Property(e => e.MessageTypeId).HasComment("1 - Chat, 2 - Image, 3 - Video, 4 - Audio 5, Document, 6 - vCard, 7 -Location, 10 Other");
            entity.Property(e => e.MessageUid)
                .HasMaxLength(100)
                .HasColumnName("MessageUID");
            entity.Property(e => e.MesssageCuid)
                .HasMaxLength(100)
                .HasColumnName("MesssageCUID");
            entity.Property(e => e.MesssageDirectionId).HasComment("1 - Input, 2 - Output");
            entity.Property(e => e.SenderName).HasMaxLength(50);
            entity.Property(e => e.SenderPhone).HasMaxLength(50);
            entity.Property(e => e.SenderType).HasComment("1 - User, 2 - Group");
            entity.Property(e => e.SentTimeStamp).HasMaxLength(100);
            entity.Property(e => e.UpdDate)
                .HasColumnType("datetime")
                .HasColumnName("updDate");
        });

        modelBuilder.Entity<WhatsAppCallbackContact>(entity =>
        {
            entity.HasKey(e => e.EntryId).HasName("PK__WhatsApp__F57BD2F72BDEC307");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CallbackId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProfileName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WaId)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WhatsAppCallbackError>(entity =>
        {
            entity.HasKey(e => e.EntryId).HasName("PK__WhatsApp__F57BD2F77247D484");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CallbackId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Details).IsUnicode(false);
            entity.Property(e => e.Message).IsUnicode(false);
            entity.Property(e => e.ReceivedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WhatsAppIncomingMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WhatsApp__3214EC074EECFE0A");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.ContextFrom).HasMaxLength(50);
            entity.Property(e => e.ContextMessageId).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FromNumber).HasMaxLength(50);
            entity.Property(e => e.MessageId).HasMaxLength(255);
            entity.Property(e => e.MessageType).HasMaxLength(50);
            entity.Property(e => e.SenderName).HasMaxLength(255);
            entity.Property(e => e.Timestamp).HasMaxLength(50);
        });

        modelBuilder.Entity<WhatsAppMessageStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WhatsApp__3214EC0784A9A9C1");

            entity.ToTable("WhatsAppMessageStatus");

            entity.HasIndex(e => e.MessageId, "IX_MessageId");

            entity.HasIndex(e => e.RecipientId, "IX_RecipientId");

            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.ConversationId).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryStatus).HasMaxLength(50);
            entity.Property(e => e.MessageId).HasMaxLength(255);
            entity.Property(e => e.MobileNos).HasMaxLength(20);
            entity.Property(e => e.OriginType).HasMaxLength(50);
            entity.Property(e => e.PricingCategory).HasMaxLength(50);
            entity.Property(e => e.PricingModel).HasMaxLength(50);
            entity.Property(e => e.RecipientId).HasMaxLength(50);
            entity.Property(e => e.RequestStatus).HasMaxLength(50);
        });

        modelBuilder.Entity<WhatsAppStatus>(entity =>
        {
            entity.HasKey(e => e.LId).HasName("PK__WhatsApp__DE11596F4CD9464E");

            entity.ToTable("WhatsAppStatus");

            entity.Property(e => e.LId).HasColumnName("lId");
            entity.Property(e => e.BDel)
                .HasDefaultValue(false)
                .HasColumnName("bDel");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ErrorDetails).HasMaxLength(500);
            entity.Property(e => e.ErrorMessage).HasMaxLength(500);
            entity.Property(e => e.ErrorTitle).HasMaxLength(200);
            entity.Property(e => e.MessageId).HasMaxLength(200);
            entity.Property(e => e.RecipientId).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
