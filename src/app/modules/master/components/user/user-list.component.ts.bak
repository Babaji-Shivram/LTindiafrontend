import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../../identity/services/user.service';
import { User, UserWithDetails, UserType } from '../../../identity/models/user.model';

@Component({
  selector: 'app-user-list',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule],
  template: `
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
      <!-- Header -->
      <div class="border-b border-gray-200 px-6 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="page-title text-gray-900">User Management</h1>
            <p class="text-sm text-gray-600 mt-1">Manage system users and their access permissions</p>
          </div>
          <button 
            routerLink="/masters/users/add"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
            Add User
          </button>
        </div>
      </div>

      <!-- Filters -->
      <div class="border-b border-gray-200 px-6 py-4 bg-gray-50">
        <div class="flex flex-wrap items-center gap-4">
          <div class="flex-1 min-w-[200px]">
            <input
              type="text"
              [(ngModel)]="searchTerm"
              (input)="applyFilters()"
              placeholder="Search users..."
              class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
          
          <div class="flex items-center gap-2">
            <label class="text-sm font-medium text-gray-700">Type:</label>
            <select 
              [(ngModel)]="typeFilter" 
              (change)="applyFilters()"
              class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              <option value="">All Types</option>
              <option value="1">Internal</option>
              <option value="3">Other</option>
            </select>
          </div>

          <div class="flex items-center gap-2">
            <label class="text-sm font-medium text-gray-700">Status:</label>
            <select 
              [(ngModel)]="statusFilter" 
              (change)="applyFilters()"
              class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              <option value="">All</option>
              <option value="active">Active</option>
              <option value="deleted">Deleted</option>
            </select>
          </div>

          <div class="flex items-center gap-2">
            <label class="text-sm font-medium text-gray-700">HOD:</label>
            <select 
              [(ngModel)]="hodFilter" 
              (change)="applyFilters()"
              class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              <option value="">All</option>
              <option value="Y">HOD Only</option>
              <option value="N">Non-HOD</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Loading State -->
      <div *ngIf="isLoading" class="px-6 py-12 text-center">
        <div class="text-gray-500">Loading users...</div>
      </div>

      <!-- Data Table -->
      <div *ngIf="!isLoading" class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50 border-b border-gray-200">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Department</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">HOD</th>
              <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <tr *ngFor="let user of filteredUsers; trackBy: trackByUser" 
                class="hover:bg-gray-50 transition-colors"
                [class.bg-red-50]="user.bDel">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                    <span class="text-blue-600 font-semibold text-sm">{{ getInitials(user.sName) }}</span>
                  </div>
                  <div>
                    <div class="text-sm font-medium text-gray-900">{{ user.sName }}</div>
                    <div class="text-sm text-gray-500">{{ user.email }}</div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div>
                  <span class="text-sm font-mono text-gray-700 bg-gray-100 px-2 py-1 rounded">
                    {{ user.empCode }}
                  </span>
                  <div class="text-sm text-gray-500 mt-1">{{ user.contactNo }}</div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">{{ getDepartmentName(user.deptId) }}</div>
                <div class="text-sm text-gray-500">{{ getBranchName(user.branchId) }}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">{{ getRoleName(user.lRoleId) }}</div>
                <div class="text-sm text-gray-500">{{ getDesignationName(user.designId) }}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span [class]="getUserTypeBadge(user.lType)">
                  {{ getUserTypeLabel(user.lType) }}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-center">
                <span *ngIf="user.hod === 'Y'" 
                      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  HOD
                </span>
                <span *ngIf="user.hod === 'N'" 
                      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                  Staff
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-center">
                <span *ngIf="!user.bDel" 
                      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Active
                </span>
                <span *ngIf="user.bDel" 
                      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  Deleted
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-center">
                <div class="flex items-center justify-center space-x-2">
                  <button 
                    [routerLink]="['/masters/users', user.lId]"
                    class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                    View
                  </button>
                  <button 
                    [routerLink]="['/masters/users', user.lId, 'edit']"
                    *ngIf="!user.bDel"
                    class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                    Edit
                  </button>
                  <button 
                    (click)="deleteUser(user)"
                    *ngIf="!user.bDel"
                    class="text-red-600 hover:text-red-800 text-sm font-medium">
                    Delete
                  </button>
                  <button 
                    (click)="restoreUser(user)"
                    *ngIf="user.bDel"
                    class="text-green-600 hover:text-green-800 text-sm font-medium">
                    Restore
                  </button>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
        
        <!-- Empty State -->
        <div *ngIf="filteredUsers.length === 0" class="px-6 py-12 text-center">
          <div class="text-gray-500">
            <div class="text-lg font-medium mb-2">No users found</div>
            <div class="text-sm">{{ searchTerm ? 'Try adjusting your search criteria' : 'Get started by adding your first user' }}</div>
          </div>
        </div>
      </div>

      <!-- Footer with Summary -->
      <div *ngIf="!isLoading && users.length > 0" class="border-t border-gray-200 px-6 py-4 bg-gray-50">
        <div class="flex items-center justify-between text-sm text-gray-600">
          <div>
            Total: {{ users.length }} users 
            ({{ getActiveUsersCount() }} active, 
             {{ getDeletedUsersCount() }} deleted,
             {{ getHODsCount() }} HODs)
          </div>
          <div>
            Internal: {{ getInternalUsersCount() }}, 
            Other: {{ getOtherUsersCount() }}
          </div>
        </div>
      </div>
    </div>
  `
})
export class UserListComponent implements OnInit {
  users: User[] = [];
  filteredUsers: User[] = [];
  
  searchTerm = '';
  typeFilter = '';
  statusFilter = '';
  hodFilter = '';
  isLoading = false;

  constructor(private userService: UserService) {}

  ngOnInit(): void {
    this.loadUsers();
  }

  loadUsers(): void {
    this.isLoading = true;
    this.userService.getUsers().subscribe({
      next: (users: UserWithDetails[]) => {
        this.users = users;
        this.applyFilters();
        this.isLoading = false;
      },
      error: (error: any) => {
        console.error('Error loading users:', error);
        this.isLoading = false;
      }
    });
  }

  applyFilters(): void {
    let filtered = [...this.users];

    // Search filter
    if (this.searchTerm) {
      const term = this.searchTerm.toLowerCase();
      filtered = filtered.filter(user =>
        user.sName.toLowerCase().includes(term) ||
        user.empCode.toLowerCase().includes(term) ||
        user.email.toLowerCase().includes(term) ||
        user.contactNo.includes(term) ||
        this.getDepartmentName(user.deptId).toLowerCase().includes(term) ||
        this.getRoleName(user.lRoleId).toLowerCase().includes(term)
      );
    }

    // Type filter
    if (this.typeFilter) {
      filtered = filtered.filter(user => user.lType === +this.typeFilter);
    }

    // Status filter
    if (this.statusFilter) {
      if (this.statusFilter === 'active') {
        filtered = filtered.filter(user => !user.bDel);
      } else if (this.statusFilter === 'deleted') {
        filtered = filtered.filter(user => user.bDel);
      }
    }

    // HOD filter
    if (this.hodFilter) {
      filtered = filtered.filter(user => user.hod === this.hodFilter);
    }

    this.filteredUsers = filtered;
  }

  deleteUser(user: User): void {
    if (confirm(`Are you sure you want to delete user ${user.sName}?`)) {
      this.userService.deleteUser(user.lId).subscribe({
        next: (success) => {
          if (success) {
            this.loadUsers();
          } else {
            alert('Failed to delete user.');
          }
        },
        error: (error) => {
          console.error('Error deleting user:', error);
          alert('Error deleting user.');
        }
      });
    }
  }

  restoreUser(user: User): void {
    if (confirm(`Are you sure you want to restore user ${user.sName}?`)) {
      this.userService.restoreUser(user.lId).subscribe({
        next: (success) => {
          if (success) {
            this.loadUsers();
          } else {
            alert('Failed to restore user.');
          }
        },
        error: (error) => {
          console.error('Error restoring user:', error);
          alert('Error restoring user.');
        }
      });
    }
  }

  trackByUser(index: number, user: User): number {
    return user.lId;
  }

  getInitials(name: string): string {
    return name.split(' ')
      .map(part => part.charAt(0))
      .join('')
      .toUpperCase()
      .substring(0, 2);
  }

  getUserTypeBadge(type: number): string {
    const baseClasses = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium';
    switch (type) {
      case UserType.INTERNAL:
        return `${baseClasses} bg-blue-100 text-blue-800`;
      case UserType.OTHER:
        return `${baseClasses} bg-purple-100 text-purple-800`;
      default:
        return `${baseClasses} bg-gray-100 text-gray-800`;
    }
  }

  getUserTypeLabel(type: number): string {
    switch (type) {
      case UserType.INTERNAL:
        return 'Internal';
      case UserType.OTHER:
        return 'Other';
      default:
        return 'Unknown';
    }
  }

  getActiveUsersCount(): number {
    return this.users.filter(u => !u.bDel).length;
  }

  getDeletedUsersCount(): number {
    return this.users.filter(u => u.bDel).length;
  }

  getHODsCount(): number {
    return this.users.filter(u => u.hod === 'Y' && !u.bDel).length;
  }

  getInternalUsersCount(): number {
    return this.users.filter(u => u.lType === UserType.INTERNAL && !u.bDel).length;
  }

  getOtherUsersCount(): number {
    return this.users.filter(u => u.lType === UserType.OTHER && !u.bDel).length;
  }

  getDepartmentName(deptId: number): string {
    const departments: { [key: number]: string } = {
      1: 'Information Technology',
      2: 'Human Resources',
      3: 'Finance',
      4: 'Operations',
      5: 'Sales & Marketing'
    };
    return departments[deptId] || `Dept ${deptId}`;
  }

  getRoleName(roleId: number): string {
    const roles: { [key: number]: string } = {
      1: 'Admin',
      2: 'Manager',
      3: 'User',
      4: 'Viewer'
    };
    return roles[roleId] || `Role ${roleId}`;
  }

  getDesignationName(designId: number): string {
    const designations: { [key: number]: string } = {
      1: 'Manager',
      2: 'Senior Executive',
      3: 'Executive',
      4: 'Assistant'
    };
    return designations[designId] || `Designation ${designId}`;
  }

  getBranchName(branchId: number): string {
    const branches: { [key: number]: string } = {
      1: 'Mumbai Branch',
      2: 'Delhi Branch',
      3: 'Chennai Branch',
      4: 'Bangalore Branch'
    };
    return branches[branchId] || `Branch ${branchId}`;
  }
}
